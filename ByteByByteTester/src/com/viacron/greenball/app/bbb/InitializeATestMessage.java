/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateInitializationFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializeATestMessage class initializes the element object with the ATestMessage object.
 *
 */
public class InitializeATestMessage {
   private static Logger log4j = Logger.getLogger(InitializeATestMessage.class);
   private String theErrorMsg;
   private Element element;
   private ATestMessage aTestMessage;

   /**
    * The InitializeATestMessage class initializes the element object with the ATestMessage object.
    *
    * @param aTestMessage The object which will be used to initialize the element object.
    */
   public InitializeATestMessage(ATestMessage aTestMessage) {
      this.aTestMessage = aTestMessage;

      this.element = new Element("ATestMessage");
   }

   /**
    * This method initializes the element.
    */
   public Element initialize() throws MissingAttributeException {
      final String METHOD = "initialize()";
      log4j.debug("Entered " + METHOD);

      log4j.debug("element.getName(): ATestMessage");

      if (aTestMessage.getABoolean() != null) {
         AbstractAttribute abstractAttribute = initializeABoolean(aTestMessage.getABoolean());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aBoolean\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getAByte() != null) {
         AbstractAttribute abstractAttribute = initializeAByte(aTestMessage.getAByte());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aByte\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getAChar() != null) {
         AbstractAttribute abstractAttribute = initializeAChar(aTestMessage.getAChar());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aChar\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getACalendar() != null) {
         AbstractAttribute abstractAttribute = initializeACalendar(aTestMessage.getACalendar());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aCalendar\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getADouble() != null) {
         AbstractAttribute abstractAttribute = initializeADouble(aTestMessage.getADouble());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aDouble\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getAFloat() != null) {
         AbstractAttribute abstractAttribute = initializeAFloat(aTestMessage.getAFloat());
         element.getAbstractAttributes().add(abstractAttribute);
      }


      if (aTestMessage.getAnInt() != null) {
         AbstractAttribute abstractAttribute = initializeAnInt(aTestMessage.getAnInt());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"anInt\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getALong() != null) {
         AbstractAttribute abstractAttribute = initializeALong(aTestMessage.getALong());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aLong\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getAShort() != null) {
         AbstractAttribute abstractAttribute = initializeAShort(aTestMessage.getAShort());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aShort\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getAString() != null) {
         AbstractAttribute abstractAttribute = initializeAString(aTestMessage.getAString());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aString\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getSomeBooleans() != null) {
         AbstractAttribute abstractAttribute = initializeSomeBooleans(aTestMessage.getSomeBooleans());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someBooleans\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getSomeBytes() != null) {
         AbstractAttribute abstractAttribute = initializeSomeBytes(aTestMessage.getSomeBytes());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someBytes\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getSomeChars() != null) {
         AbstractAttribute abstractAttribute = initializeSomeChars(aTestMessage.getSomeChars());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someChars\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getSomeCalendars() != null) {
         AbstractAttribute abstractAttribute = initializeSomeCalendars(aTestMessage.getSomeCalendars());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someCalendars\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getSomeDoubles() != null) {
         AbstractAttribute abstractAttribute = initializeSomeDoubles(aTestMessage.getSomeDoubles());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someDoubles\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getSomeFloats() != null) {
         AbstractAttribute abstractAttribute = initializeSomeFloats(aTestMessage.getSomeFloats());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someFloats\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getSomeInts() != null) {
         AbstractAttribute abstractAttribute = initializeSomeInts(aTestMessage.getSomeInts());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someInts\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getSomeLongs() != null) {
         AbstractAttribute abstractAttribute = initializeSomeLongs(aTestMessage.getSomeLongs());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someLongs\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getSomeShorts() != null) {
         AbstractAttribute abstractAttribute = initializeSomeShorts(aTestMessage.getSomeShorts());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someShorts\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (aTestMessage.getSomeStrings() != null) {
         AbstractAttribute abstractAttribute = initializeSomeStrings(aTestMessage.getSomeStrings());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someStrings\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }
      if (aTestMessage.getAction() != null) {
         AbstractAttribute abstractAttribute = initializeAction(aTestMessage.getAction());
         element.getAbstractAttributes().add(abstractAttribute);
      }      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"action\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }
      if (aTestMessage.getAppState() != null) {
         AbstractAttribute abstractAttribute = initializeAppState(aTestMessage.getAppState());
         element.getAbstractAttributes().add(abstractAttribute);
      }      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"appState\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }
      if (aTestMessage.getATenBitEnum() != null) {
         AbstractAttribute abstractAttribute = initializeATenBitEnum(aTestMessage.getATenBitEnum());
         element.getAbstractAttributes().add(abstractAttribute);
      }      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aTenBitEnum\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }
      if (aTestMessage.getUserStatus() != null) {
         AbstractAttribute abstractAttribute = initializeUserStatus(aTestMessage.getUserStatus());
         element.getAbstractAttributes().add(abstractAttribute);
      }      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"userStatus\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }
      if (aTestMessage.getZBigOne() != null) {
         AbstractAttribute abstractAttribute = initializeZBigOne(aTestMessage.getZBigOne());
         element.getAbstractAttributes().add(abstractAttribute);
      }      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"zBigOne\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }


      log4j.debug("Leaving " + METHOD);
      return element;
   }

   /*
    * This method initializes the aBoolean attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeABoolean(Boolean aBoolean)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (aBoolean != null) {
         log4j.debug("Creating new KeyValuePair: aBoolean");
         KeyValuePair kvp = new KeyValuePair("aBoolean", aBoolean.toString());
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aBoolean\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the aByte attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeAByte(Byte aByte)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (aByte != null) {
         log4j.debug("Creating new KeyValuePair: aByte");
         KeyValuePair kvp = new KeyValuePair("aByte", aByte.toString());
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aByte\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the aChar attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeAChar(Character aChar)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (aChar != null) {
         log4j.debug("Creating new KeyValuePair: aChar");
         KeyValuePair kvp = new KeyValuePair("aChar", aChar.toString());
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aChar\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the aCalendar attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeACalendar(Calendar aCalendar)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (aCalendar != null) {
         log4j.debug("Creating new KeyValuePair: aCalendar");
         SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
         KeyValuePair kvp = new KeyValuePair("aCalendar",  "<DATE_TIME_BEGIN>" + formatter.format(aCalendar.getTime()) + "<DATE_TIME_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aCalendar\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the aDouble attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeADouble(Double aDouble)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (aDouble != null) {
         log4j.debug("Creating new KeyValuePair: aDouble");
         KeyValuePair kvp = new KeyValuePair("aDouble", Double.toString(aDouble));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aDouble\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the aFloat attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeAFloat(Float aFloat)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (aFloat != null) {
         log4j.debug("Creating new KeyValuePair: aFloat");
         KeyValuePair kvp = new KeyValuePair("aFloat", Float.toString(aFloat));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the anInt attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeAnInt(Integer anInt)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (anInt != null) {
         log4j.debug("Creating new KeyValuePair: anInt");
         KeyValuePair kvp = new KeyValuePair("anInt", Integer.toString(anInt));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"anInt\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the aLong attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeALong(Long aLong)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (aLong != null) {
         log4j.debug("Creating new KeyValuePair: aLong");
         KeyValuePair kvp = new KeyValuePair("aLong", Long.toString(aLong));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aLong\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the aShort attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeAShort(Short aShort)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (aShort != null) {
         log4j.debug("Creating new KeyValuePair: aShort");
         KeyValuePair kvp = new KeyValuePair("aShort", Short.toString(aShort));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aShort\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the aString attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeAString(String aString)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (aString != null) {
         log4j.debug("Creating new KeyValuePair: aString");
         KeyValuePair kvp = new KeyValuePair("aString", "<STRING_BEGIN>" + aString + "<STRING_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aString\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someBooleans attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeBooleans(List<Boolean> someBooleansList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someBooleansIndex = 0;
      for (Boolean someBooleans : someBooleansList) {
         // Entered initAttributeValue()
         if (someBooleans != null) {
            log4j.debug("Creating new KeyValuePair: someBooleans[" + someBooleansIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someBooleans[" + someBooleansIndex + "]", someBooleans.toString());
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someBooleans\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someBooleansIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someBytes attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeBytes(List<Byte> someBytesList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someBytesIndex = 0;
      for (Byte someBytes : someBytesList) {
         // Entered initAttributeValue()
         if (someBytes != null) {
            log4j.debug("Creating new KeyValuePair: someBytes[" + someBytesIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someBytes[" + someBytesIndex + "]", someBytes.toString());
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someBytes\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someBytesIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someChars attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeChars(List<Character> someCharsList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someCharsIndex = 0;
      for (Character someChars : someCharsList) {
         // Entered initAttributeValue()
         if (someChars != null) {
            log4j.debug("Creating new KeyValuePair: someChars[" + someCharsIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someChars[" + someCharsIndex + "]", someChars.toString());
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someChars\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someCharsIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someCalendars attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeCalendars(List<Calendar> someCalendarsList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someCalendarsIndex = 0;
      for (Calendar someCalendars : someCalendarsList) {
         // Entered initAttributeValue()
         if (someCalendars != null) {
            log4j.debug("Creating new KeyValuePair: someCalendars[" + someCalendarsIndex + "]");
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
            KeyValuePair kvp = new KeyValuePair("someCalendars[" + someCalendarsIndex + "]",  "<DATE_TIME_BEGIN>" + formatter.format(someCalendars.getTime()) + "<DATE_TIME_END>");
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someCalendars\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someCalendarsIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someDoubles attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeDoubles(List<Double> someDoublesList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someDoublesIndex = 0;
      for (Double someDoubles : someDoublesList) {
         // Entered initAttributeValue()
         if (someDoubles != null) {
            log4j.debug("Creating new KeyValuePair: someDoubles[" + someDoublesIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someDoubles[" + someDoublesIndex + "]", Double.toString(someDoubles));
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someDoubles\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someDoublesIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someFloats attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeFloats(List<Float> someFloatsList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someFloatsIndex = 0;
      for (Float someFloats : someFloatsList) {
         // Entered initAttributeValue()
         if (someFloats != null) {
            log4j.debug("Creating new KeyValuePair: someFloats[" + someFloatsIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someFloats[" + someFloatsIndex + "]", Float.toString(someFloats));
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someFloats\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someFloatsIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someInts attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeInts(List<Integer> someIntsList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someIntsIndex = 0;
      for (Integer someInts : someIntsList) {
         // Entered initAttributeValue()
         if (someInts != null) {
            log4j.debug("Creating new KeyValuePair: someInts[" + someIntsIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someInts[" + someIntsIndex + "]", Integer.toString(someInts));
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someInts\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someIntsIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someLongs attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeLongs(List<Long> someLongsList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someLongsIndex = 0;
      for (Long someLongs : someLongsList) {
         // Entered initAttributeValue()
         if (someLongs != null) {
            log4j.debug("Creating new KeyValuePair: someLongs[" + someLongsIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someLongs[" + someLongsIndex + "]", Long.toString(someLongs));
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someLongs\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someLongsIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someShorts attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeShorts(List<Short> someShortsList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someShortsIndex = 0;
      for (Short someShorts : someShortsList) {
         // Entered initAttributeValue()
         if (someShorts != null) {
            log4j.debug("Creating new KeyValuePair: someShorts[" + someShortsIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someShorts[" + someShortsIndex + "]", Short.toString(someShorts));
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someShorts\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someShortsIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someStrings attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeStrings(List<String> someStringsList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someStringsIndex = 0;
      for (String someStrings : someStringsList) {
         // Entered initAttributeValue()
         if (someStrings != null) {
            log4j.debug("Creating new KeyValuePair: someStrings[" + someStringsIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someStrings[" + someStringsIndex + "]", "<STRING_BEGIN>" + someStrings + "<STRING_END>");
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someStrings\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someStringsIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   private AbstractAttribute initializeAction(ChatAction action)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initPEnumRefValue()
      if (action != null) {
         log4j.debug("Creating new Key/Value pair: action");
         KeyValuePair kvp = new KeyValuePair("action", "<ENUM_BEGIN>" + action + "<ENUM_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"action\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }
      // Leaving initPEnumRefValue()
      return abstractAttribute;
   }

   private AbstractAttribute initializeAppState(AppState appState)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initPEnumRefValue()
      if (appState != null) {
         log4j.debug("Creating new Key/Value pair: appState");
         KeyValuePair kvp = new KeyValuePair("appState", "<ENUM_BEGIN>" + appState + "<ENUM_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"appState\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }
      // Leaving initPEnumRefValue()
      return abstractAttribute;
   }

   private AbstractAttribute initializeATenBitEnum(TenBitEnum aTenBitEnum)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initPEnumRefValue()
      if (aTenBitEnum != null) {
         log4j.debug("Creating new Key/Value pair: aTenBitEnum");
         KeyValuePair kvp = new KeyValuePair("aTenBitEnum", "<ENUM_BEGIN>" + aTenBitEnum + "<ENUM_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"aTenBitEnum\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }
      // Leaving initPEnumRefValue()
      return abstractAttribute;
   }

   private AbstractAttribute initializeUserStatus(UserStatusEnum userStatus)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initPEnumRefValue()
      if (userStatus != null) {
         log4j.debug("Creating new Key/Value pair: userStatus");
         KeyValuePair kvp = new KeyValuePair("userStatus", "<ENUM_BEGIN>" + userStatus + "<ENUM_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"userStatus\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }
      // Leaving initPEnumRefValue()
      return abstractAttribute;
   }

   private AbstractAttribute initializeZBigOne(ZbigOne zBigOne)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initPEnumRefValue()
      if (zBigOne != null) {
         log4j.debug("Creating new Key/Value pair: zBigOne");
         KeyValuePair kvp = new KeyValuePair("zBigOne", "<ENUM_BEGIN>" + zBigOne + "<ENUM_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"zBigOne\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }
      // Leaving initPEnumRefValue()
      return abstractAttribute;
   }

   /**
   * This method returns the error message or null if no error occurred.
   */
   public String getErrorMsg() {
      return theErrorMsg;
   }

   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }

}
