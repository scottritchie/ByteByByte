/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateRootClassFile()).
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import org.apache.log4j.Logger;

/**
 * The GreenballMessages class is the root class of the messaging system defined
 * by the GreenballMessages grammar.
 */
public class GreenballMessages {

   private static Logger log4j = Logger.getLogger(GreenballMessages.class);
   private String theErrorMsg = null;

   /**
    * The GreenballMessages constructor.
    */
   public GreenballMessages() {}

   /**
    * The number of bits required to represent the message and sub-type IDs.
    */
   public static final int ID_BITS = 7;

   // The messages available in GreenballMessages:
   public static final String ADD_ORGANIZATION = "AddOrganization";
   public static final String APPROVE_SUBSCRIPTION_REQUEST = "ApproveSubscriptionRequest";
   public static final String A_TEST_MESSAGE = "ATestMessage";
   public static final String CHAT = "Chat";
   public static final String CHAT_USER = "ChatUser";
   public static final String CONFIGURATION_CONSTANTS = "ConfigurationConstants";
   public static final String DELETE_RULE_MESSAGE = "DeleteRuleMessage";
   public static final String DELETE_RULE_MESSAGE_RESPONSE = "DeleteRuleMessageResponse";
   public static final String DELETE_RULE_PHASE2_MESSAGE = "DeleteRulePhase2Message";
   public static final String DELETE_RULES_MESSAGE = "DeleteRulesMessage";
   public static final String DELETE_SUBSCRIPTION_REQUEST = "DeleteSubscriptionRequest";
   public static final String DIRECTORY = "Directory";
   public static final String EDIT_RULE_MESSAGE = "EditRuleMessage";
   public static final String ERROR_MESSAGE = "ErrorMessage";
   public static final String FILE_TRANSFER = "FileTransfer";
   public static final String GRAMMAR = "Grammar";
   public static final String GRAMMAR_REQUEST = "GrammarRequest";
   public static final String HEARTBEAT = "Heartbeat";
   public static final String INSERT_RULE_MESSAGE = "InsertRuleMessage";
   public static final String INSERT_RULE_PHASE2_MESSAGE = "InsertRulePhase2Message";
   public static final String JOURNAL_ENTRY = "JournalEntry";
   public static final String JOURNAL_SUBSCRIPTION_REQUEST = "JournalSubscriptionRequest";
   public static final String LIST_SUBSCRIPTIONS = "ListSubscriptions";
   public static final String LOGIN = "Login";
   public static final String META_MODEL = "MetaModel";
   public static final String META_MODEL_LIST1 = "MetaModelList1";
   public static final String META_MODEL_LOAD_REQUEST = "MetaModelLoadRequest";
   public static final String META_MODEL_LOCK_REQUEST = "MetaModelLockRequest";
   public static final String META_MODEL_LOCK_RESPONSE = "MetaModelLockResponse";
   public static final String MODEL = "Model";
   public static final String MODEL_ELEMENT = "ModelElement";
   public static final String NEW_SUBSCRIPTION = "NewSubscription";
   public static final String ORGANIZATION_LIST = "OrganizationList";
   public static final String ORGANIZATION_REQUEST = "OrganizationRequest";
   public static final String REGISTER_NEW_USER = "RegisterNewUser";
   public static final String REGISTER_NEW_USER_RESPONSE = "RegisterNewUserResponse";
   public static final String REQUEST_CHANGE_PASSWORD = "RequestChangePassword";
   public static final String REQUEST_CLOSE_CONNECTION = "RequestCloseConnection";
   public static final String REQUEST_CONFIGURATION_CONSTANTS = "RequestConfigurationConstants";
   public static final String REQUEST_DELETE_ORGANIZATION = "RequestDeleteOrganization";
   public static final String REQUEST_LOAD_MODEL = "RequestLoadModel";
   public static final String REQUEST_LOGIN = "RequestLogin";
   public static final String REQUEST_MODEL = "RequestModel";
   public static final String REQUEST_ORGANIZATION_LIST = "RequestOrganizationList";
   public static final String REQUEST_SAVE_GRAMMAR = "RequestSaveGrammar";
   public static final String REQUEST_SUBSCRIPTION = "RequestSubscription";
   public static final String REQUEST_SUBSCRIPTION_PHASE2 = "RequestSubscriptionPhase2";
   public static final String REQUEST_UNSUBSCRIBE = "RequestUnsubscribe";
   public static final String RESPONSE_CHANGE_PASSWORD = "ResponseChangePassword";
   public static final String RESPONSE_CLOSE_CONNECTION = "ResponseCloseConnection";
   public static final String RESPONSE_DELETE_ORGANIZATION = "ResponseDeleteOrganization";
   public static final String RESPONSE_EDIT_RULE_MESSAGE = "ResponseEditRuleMessage";
   public static final String RESPONSE_INSERT_RULE_MESSAGE = "ResponseInsertRuleMessage";
   public static final String RESPONSE_LOAD_MODEL = "ResponseLoadModel";
   public static final String RESPONSE_LOGIN = "ResponseLogin";
   public static final String RESPONSE_MODEL_ELEMENT_INSERT = "ResponseModelElementInsert";
   public static final String RESPONSE_MODEL_ELEMENT_UPDATE = "ResponseModelElementUpdate";
   public static final String RESPONSE_SUBSCRIPTION_REQUEST = "ResponseSubscriptionRequest";
   public static final String RESPONSE_UNSUBSCRIBE = "ResponseUnsubscribe";
   public static final String RULE_EXPIRED = "RuleExpired";
   public static final String RULE_MESSAGE = "RuleMessage";
   public static final String RULE_SYNC_REQUEST = "RuleSyncRequest";
   public static final String RULE_SYNC_RESPONSE = "RuleSyncResponse";
   public static final String SAVE_GRAMMAR_PHASE1 = "SaveGrammarPhase1";
   public static final String SAVE_GRAMMAR_PHASE2 = "SaveGrammarPhase2";
   public static final String SIGN_UP = "SignUp";
   public static final String SIGN_UP_RESPONSE = "SignUpResponse";
   public static final String SMS_PROVIDER_REQUEST = "SmsProviderRequest";
   public static final String SMS_PROVIDERS = "SmsProviders";
   public static final String SUBSCRIBERS = "Subscribers";
   public static final String SUBSCRIBERS_REQUEST = "SubscribersRequest";
   public static final String SUBSCRIPTION_REQUEST = "SubscriptionRequest";
   public static final String SUBSCRIPTION_REQUESTS = "SubscriptionRequests";
   public static final String SUBSCRIPTIONS = "Subscriptions";
   public static final String TEMPLATES = "Templates";
   public static final String TERMINATE = "Terminate";
   public static final String TOPIC_SUBSCRIPTION_REQUEST = "TopicSubscriptionRequest";
   public static final String UPDATE_ORGANIZATION_LIST = "UpdateOrganizationList";
   public static final String UPDATE_RULE_DEADLINE = "UpdateRuleDeadline";

   /**
    * The pack() method packs an object into a byte array. The byte array will be in
    * BitByBit format. The object must be one of the following classes:
    *   AddOrganization
    *   ApproveSubscriptionRequest
    *   ATestMessage
    *   Chat
    *   ChatUser
    *   ConfigurationConstants
    *   DeleteRuleMessage
    *   DeleteRuleMessageResponse
    *   DeleteRulePhase2Message
    *   DeleteRulesMessage
    *   DeleteSubscriptionRequest
    *   Directory
    *   EditRuleMessage
    *   ErrorMessage
    *   FileTransfer
    *   Grammar
    *   GrammarRequest
    *   Heartbeat
    *   InsertRuleMessage
    *   InsertRulePhase2Message
    *   JournalEntry
    *   JournalSubscriptionRequest
    *   ListSubscriptions
    *   Login
    *   MetaModel
    *   MetaModelList1
    *   MetaModelLoadRequest
    *   MetaModelLockRequest
    *   MetaModelLockResponse
    *   Model
    *   ModelElement
    *   NewSubscription
    *   OrganizationList
    *   OrganizationRequest
    *   RegisterNewUser
    *   RegisterNewUserResponse
    *   RequestChangePassword
    *   RequestCloseConnection
    *   RequestConfigurationConstants
    *   RequestDeleteOrganization
    *   RequestLoadModel
    *   RequestLogin
    *   RequestModel
    *   RequestOrganizationList
    *   RequestSaveGrammar
    *   RequestSubscription
    *   RequestSubscriptionPhase2
    *   RequestUnsubscribe
    *   ResponseChangePassword
    *   ResponseCloseConnection
    *   ResponseDeleteOrganization
    *   ResponseEditRuleMessage
    *   ResponseInsertRuleMessage
    *   ResponseLoadModel
    *   ResponseLogin
    *   ResponseModelElementInsert
    *   ResponseModelElementUpdate
    *   ResponseSubscriptionRequest
    *   ResponseUnsubscribe
    *   RuleExpired
    *   RuleMessage
    *   RuleSyncRequest
    *   RuleSyncResponse
    *   SaveGrammarPhase1
    *   SaveGrammarPhase2
    *   SignUp
    *   SignUpResponse
    *   SmsProviderRequest
    *   SmsProviders
    *   Subscribers
    *   SubscribersRequest
    *   SubscriptionRequest
    *   SubscriptionRequests
    *   Subscriptions
    *   Templates
    *   Terminate
    *   TopicSubscriptionRequest
    *   UpdateOrganizationList
    *   UpdateRuleDeadline
    *
    * @param obj The object.
    * @return A byte array which represents the message object in BitByBit
    *         format.
    * @throws MissingAttributeException
    */
   public byte[] pack(Object obj) throws MissingAttributeException {
      final String METHOD = "pack()";
      log4j.debug("Entered " + METHOD);

      byte[] result = null;
      setErrorMsg(null);

      if (obj != null) {
         log4j.debug("Searching for class: " + obj.getClass().getSimpleName());
         if (obj instanceof AddOrganization) {
            log4j.debug("Found it");
            result = ((AddOrganization) obj).pack();
         }
         else if (obj instanceof ApproveSubscriptionRequest) {
            log4j.debug("Found it");
            result = ((ApproveSubscriptionRequest) obj).pack();
         }
         else if (obj instanceof ATestMessage) {
            log4j.debug("Found it");
            result = ((ATestMessage) obj).pack();
         }
         else if (obj instanceof Chat) {
            log4j.debug("Found it");
            result = ((Chat) obj).pack();
         }
         else if (obj instanceof ChatUser) {
            log4j.debug("Found it");
            result = ((ChatUser) obj).pack();
         }
         else if (obj instanceof ConfigurationConstants) {
            log4j.debug("Found it");
            result = ((ConfigurationConstants) obj).pack();
         }
         else if (obj instanceof DeleteRuleMessage) {
            log4j.debug("Found it");
            result = ((DeleteRuleMessage) obj).pack();
         }
         else if (obj instanceof DeleteRuleMessageResponse) {
            log4j.debug("Found it");
            result = ((DeleteRuleMessageResponse) obj).pack();
         }
         else if (obj instanceof DeleteRulePhase2Message) {
            log4j.debug("Found it");
            result = ((DeleteRulePhase2Message) obj).pack();
         }
         else if (obj instanceof DeleteRulesMessage) {
            log4j.debug("Found it");
            result = ((DeleteRulesMessage) obj).pack();
         }
         else if (obj instanceof DeleteSubscriptionRequest) {
            log4j.debug("Found it");
            result = ((DeleteSubscriptionRequest) obj).pack();
         }
         else if (obj instanceof Directory) {
            log4j.debug("Found it");
            result = ((Directory) obj).pack();
         }
         else if (obj instanceof EditRuleMessage) {
            log4j.debug("Found it");
            result = ((EditRuleMessage) obj).pack();
         }
         else if (obj instanceof ErrorMessage) {
            log4j.debug("Found it");
            result = ((ErrorMessage) obj).pack();
         }
         else if (obj instanceof FileTransfer) {
            log4j.debug("Found it");
            result = ((FileTransfer) obj).pack();
         }
         else if (obj instanceof Grammar) {
            log4j.debug("Found it");
            result = ((Grammar) obj).pack();
         }
         else if (obj instanceof GrammarRequest) {
            log4j.debug("Found it");
            result = ((GrammarRequest) obj).pack();
         }
         else if (obj instanceof Heartbeat) {
            log4j.debug("Found it");
            result = ((Heartbeat) obj).pack();
         }
         else if (obj instanceof InsertRuleMessage) {
            log4j.debug("Found it");
            result = ((InsertRuleMessage) obj).pack();
         }
         else if (obj instanceof InsertRulePhase2Message) {
            log4j.debug("Found it");
            result = ((InsertRulePhase2Message) obj).pack();
         }
         else if (obj instanceof JournalEntry) {
            log4j.debug("Found it");
            result = ((JournalEntry) obj).pack();
         }
         else if (obj instanceof JournalSubscriptionRequest) {
            log4j.debug("Found it");
            result = ((JournalSubscriptionRequest) obj).pack();
         }
         else if (obj instanceof ListSubscriptions) {
            log4j.debug("Found it");
            result = ((ListSubscriptions) obj).pack();
         }
         else if (obj instanceof Login) {
            log4j.debug("Found it");
            result = ((Login) obj).pack();
         }
         else if (obj instanceof MetaModel) {
            log4j.debug("Found it");
            result = ((MetaModel) obj).pack();
         }
         else if (obj instanceof MetaModelList1) {
            log4j.debug("Found it");
            result = ((MetaModelList1) obj).pack();
         }
         else if (obj instanceof MetaModelLoadRequest) {
            log4j.debug("Found it");
            result = ((MetaModelLoadRequest) obj).pack();
         }
         else if (obj instanceof MetaModelLockRequest) {
            log4j.debug("Found it");
            result = ((MetaModelLockRequest) obj).pack();
         }
         else if (obj instanceof MetaModelLockResponse) {
            log4j.debug("Found it");
            result = ((MetaModelLockResponse) obj).pack();
         }
         else if (obj instanceof Model) {
            log4j.debug("Found it");
            result = ((Model) obj).pack();
         }
         else if (obj instanceof ModelElement) {
            log4j.debug("Found it");
            result = ((ModelElement) obj).pack();
         }
         else if (obj instanceof NewSubscription) {
            log4j.debug("Found it");
            result = ((NewSubscription) obj).pack();
         }
         else if (obj instanceof OrganizationList) {
            log4j.debug("Found it");
            result = ((OrganizationList) obj).pack();
         }
         else if (obj instanceof OrganizationRequest) {
            log4j.debug("Found it");
            result = ((OrganizationRequest) obj).pack();
         }
         else if (obj instanceof RegisterNewUser) {
            log4j.debug("Found it");
            result = ((RegisterNewUser) obj).pack();
         }
         else if (obj instanceof RegisterNewUserResponse) {
            log4j.debug("Found it");
            result = ((RegisterNewUserResponse) obj).pack();
         }
         else if (obj instanceof RequestChangePassword) {
            log4j.debug("Found it");
            result = ((RequestChangePassword) obj).pack();
         }
         else if (obj instanceof RequestCloseConnection) {
            log4j.debug("Found it");
            result = ((RequestCloseConnection) obj).pack();
         }
         else if (obj instanceof RequestConfigurationConstants) {
            log4j.debug("Found it");
            result = ((RequestConfigurationConstants) obj).pack();
         }
         else if (obj instanceof RequestDeleteOrganization) {
            log4j.debug("Found it");
            result = ((RequestDeleteOrganization) obj).pack();
         }
         else if (obj instanceof RequestLoadModel) {
            log4j.debug("Found it");
            result = ((RequestLoadModel) obj).pack();
         }
         else if (obj instanceof RequestLogin) {
            log4j.debug("Found it");
            result = ((RequestLogin) obj).pack();
         }
         else if (obj instanceof RequestModel) {
            log4j.debug("Found it");
            result = ((RequestModel) obj).pack();
         }
         else if (obj instanceof RequestOrganizationList) {
            log4j.debug("Found it");
            result = ((RequestOrganizationList) obj).pack();
         }
         else if (obj instanceof RequestSaveGrammar) {
            log4j.debug("Found it");
            result = ((RequestSaveGrammar) obj).pack();
         }
         else if (obj instanceof RequestSubscription) {
            log4j.debug("Found it");
            result = ((RequestSubscription) obj).pack();
         }
         else if (obj instanceof RequestSubscriptionPhase2) {
            log4j.debug("Found it");
            result = ((RequestSubscriptionPhase2) obj).pack();
         }
         else if (obj instanceof RequestUnsubscribe) {
            log4j.debug("Found it");
            result = ((RequestUnsubscribe) obj).pack();
         }
         else if (obj instanceof ResponseChangePassword) {
            log4j.debug("Found it");
            result = ((ResponseChangePassword) obj).pack();
         }
         else if (obj instanceof ResponseCloseConnection) {
            log4j.debug("Found it");
            result = ((ResponseCloseConnection) obj).pack();
         }
         else if (obj instanceof ResponseDeleteOrganization) {
            log4j.debug("Found it");
            result = ((ResponseDeleteOrganization) obj).pack();
         }
         else if (obj instanceof ResponseEditRuleMessage) {
            log4j.debug("Found it");
            result = ((ResponseEditRuleMessage) obj).pack();
         }
         else if (obj instanceof ResponseInsertRuleMessage) {
            log4j.debug("Found it");
            result = ((ResponseInsertRuleMessage) obj).pack();
         }
         else if (obj instanceof ResponseLoadModel) {
            log4j.debug("Found it");
            result = ((ResponseLoadModel) obj).pack();
         }
         else if (obj instanceof ResponseLogin) {
            log4j.debug("Found it");
            result = ((ResponseLogin) obj).pack();
         }
         else if (obj instanceof ResponseModelElementInsert) {
            log4j.debug("Found it");
            result = ((ResponseModelElementInsert) obj).pack();
         }
         else if (obj instanceof ResponseModelElementUpdate) {
            log4j.debug("Found it");
            result = ((ResponseModelElementUpdate) obj).pack();
         }
         else if (obj instanceof ResponseSubscriptionRequest) {
            log4j.debug("Found it");
            result = ((ResponseSubscriptionRequest) obj).pack();
         }
         else if (obj instanceof ResponseUnsubscribe) {
            log4j.debug("Found it");
            result = ((ResponseUnsubscribe) obj).pack();
         }
         else if (obj instanceof RuleExpired) {
            log4j.debug("Found it");
            result = ((RuleExpired) obj).pack();
         }
         else if (obj instanceof RuleMessage) {
            log4j.debug("Found it");
            result = ((RuleMessage) obj).pack();
         }
         else if (obj instanceof RuleSyncRequest) {
            log4j.debug("Found it");
            result = ((RuleSyncRequest) obj).pack();
         }
         else if (obj instanceof RuleSyncResponse) {
            log4j.debug("Found it");
            result = ((RuleSyncResponse) obj).pack();
         }
         else if (obj instanceof SaveGrammarPhase1) {
            log4j.debug("Found it");
            result = ((SaveGrammarPhase1) obj).pack();
         }
         else if (obj instanceof SaveGrammarPhase2) {
            log4j.debug("Found it");
            result = ((SaveGrammarPhase2) obj).pack();
         }
         else if (obj instanceof SignUp) {
            log4j.debug("Found it");
            result = ((SignUp) obj).pack();
         }
         else if (obj instanceof SignUpResponse) {
            log4j.debug("Found it");
            result = ((SignUpResponse) obj).pack();
         }
         else if (obj instanceof SmsProviderRequest) {
            log4j.debug("Found it");
            result = ((SmsProviderRequest) obj).pack();
         }
         else if (obj instanceof SmsProviders) {
            log4j.debug("Found it");
            result = ((SmsProviders) obj).pack();
         }
         else if (obj instanceof Subscribers) {
            log4j.debug("Found it");
            result = ((Subscribers) obj).pack();
         }
         else if (obj instanceof SubscribersRequest) {
            log4j.debug("Found it");
            result = ((SubscribersRequest) obj).pack();
         }
         else if (obj instanceof SubscriptionRequest) {
            log4j.debug("Found it");
            result = ((SubscriptionRequest) obj).pack();
         }
         else if (obj instanceof SubscriptionRequests) {
            log4j.debug("Found it");
            result = ((SubscriptionRequests) obj).pack();
         }
         else if (obj instanceof Subscriptions) {
            log4j.debug("Found it");
            result = ((Subscriptions) obj).pack();
         }
         else if (obj instanceof Templates) {
            log4j.debug("Found it");
            result = ((Templates) obj).pack();
         }
         else if (obj instanceof Terminate) {
            log4j.debug("Found it");
            result = ((Terminate) obj).pack();
         }
         else if (obj instanceof TopicSubscriptionRequest) {
            log4j.debug("Found it");
            result = ((TopicSubscriptionRequest) obj).pack();
         }
         else if (obj instanceof UpdateOrganizationList) {
            log4j.debug("Found it");
            result = ((UpdateOrganizationList) obj).pack();
         }
         else if (obj instanceof UpdateRuleDeadline) {
            log4j.debug("Found it");
            result = ((UpdateRuleDeadline) obj).pack();
         }
         else {
            setErrorMsg("Unknown/unsupported class: " + obj.getClass().getSimpleName());
            log4j.error(getErrorMsg());
         }
      }
      else {
         setErrorMsg("The object to be packed is null"); 
         log4j.error(getErrorMsg());
      }

      log4j.debug("Leaving " + METHOD);
      return result;
   }

   /**
    * The packStr() method packs an object into a String. The String will be in
    * BitByBit format. The object must be one of the following classes:
    *   AddOrganization
    *   ApproveSubscriptionRequest
    *   ATestMessage
    *   Chat
    *   ChatUser
    *   ConfigurationConstants
    *   DeleteRuleMessage
    *   DeleteRuleMessageResponse
    *   DeleteRulePhase2Message
    *   DeleteRulesMessage
    *   DeleteSubscriptionRequest
    *   Directory
    *   EditRuleMessage
    *   ErrorMessage
    *   FileTransfer
    *   Grammar
    *   GrammarRequest
    *   Heartbeat
    *   InsertRuleMessage
    *   InsertRulePhase2Message
    *   JournalEntry
    *   JournalSubscriptionRequest
    *   ListSubscriptions
    *   Login
    *   MetaModel
    *   MetaModelList1
    *   MetaModelLoadRequest
    *   MetaModelLockRequest
    *   MetaModelLockResponse
    *   Model
    *   ModelElement
    *   NewSubscription
    *   OrganizationList
    *   OrganizationRequest
    *   RegisterNewUser
    *   RegisterNewUserResponse
    *   RequestChangePassword
    *   RequestCloseConnection
    *   RequestConfigurationConstants
    *   RequestDeleteOrganization
    *   RequestLoadModel
    *   RequestLogin
    *   RequestModel
    *   RequestOrganizationList
    *   RequestSaveGrammar
    *   RequestSubscription
    *   RequestSubscriptionPhase2
    *   RequestUnsubscribe
    *   ResponseChangePassword
    *   ResponseCloseConnection
    *   ResponseDeleteOrganization
    *   ResponseEditRuleMessage
    *   ResponseInsertRuleMessage
    *   ResponseLoadModel
    *   ResponseLogin
    *   ResponseModelElementInsert
    *   ResponseModelElementUpdate
    *   ResponseSubscriptionRequest
    *   ResponseUnsubscribe
    *   RuleExpired
    *   RuleMessage
    *   RuleSyncRequest
    *   RuleSyncResponse
    *   SaveGrammarPhase1
    *   SaveGrammarPhase2
    *   SignUp
    *   SignUpResponse
    *   SmsProviderRequest
    *   SmsProviders
    *   Subscribers
    *   SubscribersRequest
    *   SubscriptionRequest
    *   SubscriptionRequests
    *   Subscriptions
    *   Templates
    *   Terminate
    *   TopicSubscriptionRequest
    *   UpdateOrganizationList
    *   UpdateRuleDeadline
    *
    * @param obj The object.
    * @return A String which represents the message object in BitByBit
    *         format.
    * @throws MissingAttributeException
    */
   public String packStr(Object obj) throws MissingAttributeException {
      final String METHOD = "packStr()";
      log4j.debug("Entered " + METHOD);

      String result = null;
      setErrorMsg(null);

      if (obj != null) {
         log4j.debug("Searching for class: " + obj.getClass().getSimpleName());
         if (obj instanceof AddOrganization) {
            log4j.debug("Found it");
            result = ((AddOrganization) obj).packStr();
         }
         else if (obj instanceof ApproveSubscriptionRequest) {
            log4j.debug("Found it");
            result = ((ApproveSubscriptionRequest) obj).packStr();
         }
         else if (obj instanceof ATestMessage) {
            log4j.debug("Found it");
            result = ((ATestMessage) obj).packStr();
         }
         else if (obj instanceof Chat) {
            log4j.debug("Found it");
            result = ((Chat) obj).packStr();
         }
         else if (obj instanceof ChatUser) {
            log4j.debug("Found it");
            result = ((ChatUser) obj).packStr();
         }
         else if (obj instanceof ConfigurationConstants) {
            log4j.debug("Found it");
            result = ((ConfigurationConstants) obj).packStr();
         }
         else if (obj instanceof DeleteRuleMessage) {
            log4j.debug("Found it");
            result = ((DeleteRuleMessage) obj).packStr();
         }
         else if (obj instanceof DeleteRuleMessageResponse) {
            log4j.debug("Found it");
            result = ((DeleteRuleMessageResponse) obj).packStr();
         }
         else if (obj instanceof DeleteRulePhase2Message) {
            log4j.debug("Found it");
            result = ((DeleteRulePhase2Message) obj).packStr();
         }
         else if (obj instanceof DeleteRulesMessage) {
            log4j.debug("Found it");
            result = ((DeleteRulesMessage) obj).packStr();
         }
         else if (obj instanceof DeleteSubscriptionRequest) {
            log4j.debug("Found it");
            result = ((DeleteSubscriptionRequest) obj).packStr();
         }
         else if (obj instanceof Directory) {
            log4j.debug("Found it");
            result = ((Directory) obj).packStr();
         }
         else if (obj instanceof EditRuleMessage) {
            log4j.debug("Found it");
            result = ((EditRuleMessage) obj).packStr();
         }
         else if (obj instanceof ErrorMessage) {
            log4j.debug("Found it");
            result = ((ErrorMessage) obj).packStr();
         }
         else if (obj instanceof FileTransfer) {
            log4j.debug("Found it");
            result = ((FileTransfer) obj).packStr();
         }
         else if (obj instanceof Grammar) {
            log4j.debug("Found it");
            result = ((Grammar) obj).packStr();
         }
         else if (obj instanceof GrammarRequest) {
            log4j.debug("Found it");
            result = ((GrammarRequest) obj).packStr();
         }
         else if (obj instanceof Heartbeat) {
            log4j.debug("Found it");
            result = ((Heartbeat) obj).packStr();
         }
         else if (obj instanceof InsertRuleMessage) {
            log4j.debug("Found it");
            result = ((InsertRuleMessage) obj).packStr();
         }
         else if (obj instanceof InsertRulePhase2Message) {
            log4j.debug("Found it");
            result = ((InsertRulePhase2Message) obj).packStr();
         }
         else if (obj instanceof JournalEntry) {
            log4j.debug("Found it");
            result = ((JournalEntry) obj).packStr();
         }
         else if (obj instanceof JournalSubscriptionRequest) {
            log4j.debug("Found it");
            result = ((JournalSubscriptionRequest) obj).packStr();
         }
         else if (obj instanceof ListSubscriptions) {
            log4j.debug("Found it");
            result = ((ListSubscriptions) obj).packStr();
         }
         else if (obj instanceof Login) {
            log4j.debug("Found it");
            result = ((Login) obj).packStr();
         }
         else if (obj instanceof MetaModel) {
            log4j.debug("Found it");
            result = ((MetaModel) obj).packStr();
         }
         else if (obj instanceof MetaModelList1) {
            log4j.debug("Found it");
            result = ((MetaModelList1) obj).packStr();
         }
         else if (obj instanceof MetaModelLoadRequest) {
            log4j.debug("Found it");
            result = ((MetaModelLoadRequest) obj).packStr();
         }
         else if (obj instanceof MetaModelLockRequest) {
            log4j.debug("Found it");
            result = ((MetaModelLockRequest) obj).packStr();
         }
         else if (obj instanceof MetaModelLockResponse) {
            log4j.debug("Found it");
            result = ((MetaModelLockResponse) obj).packStr();
         }
         else if (obj instanceof Model) {
            log4j.debug("Found it");
            result = ((Model) obj).packStr();
         }
         else if (obj instanceof ModelElement) {
            log4j.debug("Found it");
            result = ((ModelElement) obj).packStr();
         }
         else if (obj instanceof NewSubscription) {
            log4j.debug("Found it");
            result = ((NewSubscription) obj).packStr();
         }
         else if (obj instanceof OrganizationList) {
            log4j.debug("Found it");
            result = ((OrganizationList) obj).packStr();
         }
         else if (obj instanceof OrganizationRequest) {
            log4j.debug("Found it");
            result = ((OrganizationRequest) obj).packStr();
         }
         else if (obj instanceof RegisterNewUser) {
            log4j.debug("Found it");
            result = ((RegisterNewUser) obj).packStr();
         }
         else if (obj instanceof RegisterNewUserResponse) {
            log4j.debug("Found it");
            result = ((RegisterNewUserResponse) obj).packStr();
         }
         else if (obj instanceof RequestChangePassword) {
            log4j.debug("Found it");
            result = ((RequestChangePassword) obj).packStr();
         }
         else if (obj instanceof RequestCloseConnection) {
            log4j.debug("Found it");
            result = ((RequestCloseConnection) obj).packStr();
         }
         else if (obj instanceof RequestConfigurationConstants) {
            log4j.debug("Found it");
            result = ((RequestConfigurationConstants) obj).packStr();
         }
         else if (obj instanceof RequestDeleteOrganization) {
            log4j.debug("Found it");
            result = ((RequestDeleteOrganization) obj).packStr();
         }
         else if (obj instanceof RequestLoadModel) {
            log4j.debug("Found it");
            result = ((RequestLoadModel) obj).packStr();
         }
         else if (obj instanceof RequestLogin) {
            log4j.debug("Found it");
            result = ((RequestLogin) obj).packStr();
         }
         else if (obj instanceof RequestModel) {
            log4j.debug("Found it");
            result = ((RequestModel) obj).packStr();
         }
         else if (obj instanceof RequestOrganizationList) {
            log4j.debug("Found it");
            result = ((RequestOrganizationList) obj).packStr();
         }
         else if (obj instanceof RequestSaveGrammar) {
            log4j.debug("Found it");
            result = ((RequestSaveGrammar) obj).packStr();
         }
         else if (obj instanceof RequestSubscription) {
            log4j.debug("Found it");
            result = ((RequestSubscription) obj).packStr();
         }
         else if (obj instanceof RequestSubscriptionPhase2) {
            log4j.debug("Found it");
            result = ((RequestSubscriptionPhase2) obj).packStr();
         }
         else if (obj instanceof RequestUnsubscribe) {
            log4j.debug("Found it");
            result = ((RequestUnsubscribe) obj).packStr();
         }
         else if (obj instanceof ResponseChangePassword) {
            log4j.debug("Found it");
            result = ((ResponseChangePassword) obj).packStr();
         }
         else if (obj instanceof ResponseCloseConnection) {
            log4j.debug("Found it");
            result = ((ResponseCloseConnection) obj).packStr();
         }
         else if (obj instanceof ResponseDeleteOrganization) {
            log4j.debug("Found it");
            result = ((ResponseDeleteOrganization) obj).packStr();
         }
         else if (obj instanceof ResponseEditRuleMessage) {
            log4j.debug("Found it");
            result = ((ResponseEditRuleMessage) obj).packStr();
         }
         else if (obj instanceof ResponseInsertRuleMessage) {
            log4j.debug("Found it");
            result = ((ResponseInsertRuleMessage) obj).packStr();
         }
         else if (obj instanceof ResponseLoadModel) {
            log4j.debug("Found it");
            result = ((ResponseLoadModel) obj).packStr();
         }
         else if (obj instanceof ResponseLogin) {
            log4j.debug("Found it");
            result = ((ResponseLogin) obj).packStr();
         }
         else if (obj instanceof ResponseModelElementInsert) {
            log4j.debug("Found it");
            result = ((ResponseModelElementInsert) obj).packStr();
         }
         else if (obj instanceof ResponseModelElementUpdate) {
            log4j.debug("Found it");
            result = ((ResponseModelElementUpdate) obj).packStr();
         }
         else if (obj instanceof ResponseSubscriptionRequest) {
            log4j.debug("Found it");
            result = ((ResponseSubscriptionRequest) obj).packStr();
         }
         else if (obj instanceof ResponseUnsubscribe) {
            log4j.debug("Found it");
            result = ((ResponseUnsubscribe) obj).packStr();
         }
         else if (obj instanceof RuleExpired) {
            log4j.debug("Found it");
            result = ((RuleExpired) obj).packStr();
         }
         else if (obj instanceof RuleMessage) {
            log4j.debug("Found it");
            result = ((RuleMessage) obj).packStr();
         }
         else if (obj instanceof RuleSyncRequest) {
            log4j.debug("Found it");
            result = ((RuleSyncRequest) obj).packStr();
         }
         else if (obj instanceof RuleSyncResponse) {
            log4j.debug("Found it");
            result = ((RuleSyncResponse) obj).packStr();
         }
         else if (obj instanceof SaveGrammarPhase1) {
            log4j.debug("Found it");
            result = ((SaveGrammarPhase1) obj).packStr();
         }
         else if (obj instanceof SaveGrammarPhase2) {
            log4j.debug("Found it");
            result = ((SaveGrammarPhase2) obj).packStr();
         }
         else if (obj instanceof SignUp) {
            log4j.debug("Found it");
            result = ((SignUp) obj).packStr();
         }
         else if (obj instanceof SignUpResponse) {
            log4j.debug("Found it");
            result = ((SignUpResponse) obj).packStr();
         }
         else if (obj instanceof SmsProviderRequest) {
            log4j.debug("Found it");
            result = ((SmsProviderRequest) obj).packStr();
         }
         else if (obj instanceof SmsProviders) {
            log4j.debug("Found it");
            result = ((SmsProviders) obj).packStr();
         }
         else if (obj instanceof Subscribers) {
            log4j.debug("Found it");
            result = ((Subscribers) obj).packStr();
         }
         else if (obj instanceof SubscribersRequest) {
            log4j.debug("Found it");
            result = ((SubscribersRequest) obj).packStr();
         }
         else if (obj instanceof SubscriptionRequest) {
            log4j.debug("Found it");
            result = ((SubscriptionRequest) obj).packStr();
         }
         else if (obj instanceof SubscriptionRequests) {
            log4j.debug("Found it");
            result = ((SubscriptionRequests) obj).packStr();
         }
         else if (obj instanceof Subscriptions) {
            log4j.debug("Found it");
            result = ((Subscriptions) obj).packStr();
         }
         else if (obj instanceof Templates) {
            log4j.debug("Found it");
            result = ((Templates) obj).packStr();
         }
         else if (obj instanceof Terminate) {
            log4j.debug("Found it");
            result = ((Terminate) obj).packStr();
         }
         else if (obj instanceof TopicSubscriptionRequest) {
            log4j.debug("Found it");
            result = ((TopicSubscriptionRequest) obj).packStr();
         }
         else if (obj instanceof UpdateOrganizationList) {
            log4j.debug("Found it");
            result = ((UpdateOrganizationList) obj).packStr();
         }
         else if (obj instanceof UpdateRuleDeadline) {
            log4j.debug("Found it");
            result = ((UpdateRuleDeadline) obj).packStr();
         }
         else {
            setErrorMsg("Unknown/unsupported class: " + obj.getClass().getSimpleName());
            log4j.error(getErrorMsg());
         }
      }
      else {
         setErrorMsg("The object to be packed is null"); 
         log4j.error(getErrorMsg());
      }

      log4j.debug("Leaving " + METHOD);
      return result;
   }

   /**
    * The unpack() method unpacks a byte array into an object. The byte array must be in 
    * BitByBit format. The returned object will be one of the following
    * classes:
    * AddOrganization
    * ApproveSubscriptionRequest
    * ATestMessage
    * Chat
    * ChatUser
    * ConfigurationConstants
    * DeleteRuleMessage
    * DeleteRuleMessageResponse
    * DeleteRulePhase2Message
    * DeleteRulesMessage
    * DeleteSubscriptionRequest
    * Directory
    * EditRuleMessage
    * ErrorMessage
    * FileTransfer
    * Grammar
    * GrammarRequest
    * Heartbeat
    * InsertRuleMessage
    * InsertRulePhase2Message
    * JournalEntry
    * JournalSubscriptionRequest
    * ListSubscriptions
    * Login
    * MetaModel
    * MetaModelList1
    * MetaModelLoadRequest
    * MetaModelLockRequest
    * MetaModelLockResponse
    * Model
    * ModelElement
    * NewSubscription
    * OrganizationList
    * OrganizationRequest
    * RegisterNewUser
    * RegisterNewUserResponse
    * RequestChangePassword
    * RequestCloseConnection
    * RequestConfigurationConstants
    * RequestDeleteOrganization
    * RequestLoadModel
    * RequestLogin
    * RequestModel
    * RequestOrganizationList
    * RequestSaveGrammar
    * RequestSubscription
    * RequestSubscriptionPhase2
    * RequestUnsubscribe
    * ResponseChangePassword
    * ResponseCloseConnection
    * ResponseDeleteOrganization
    * ResponseEditRuleMessage
    * ResponseInsertRuleMessage
    * ResponseLoadModel
    * ResponseLogin
    * ResponseModelElementInsert
    * ResponseModelElementUpdate
    * ResponseSubscriptionRequest
    * ResponseUnsubscribe
    * RuleExpired
    * RuleMessage
    * RuleSyncRequest
    * RuleSyncResponse
    * SaveGrammarPhase1
    * SaveGrammarPhase2
    * SignUp
    * SignUpResponse
    * SmsProviderRequest
    * SmsProviders
    * Subscribers
    * SubscribersRequest
    * SubscriptionRequest
    * SubscriptionRequests
    * Subscriptions
    * Templates
    * Terminate
    * TopicSubscriptionRequest
    * UpdateOrganizationList
    * UpdateRuleDeadline
    *
    * @return The byte array as an object.
    */
   public Object unpack(byte[] buffer) {
      final String METHOD = "unpack()";
      log4j.debug("Entered " + METHOD);

      GreenballMessagesEnum gme = GreenballMessages.peek(buffer);
      Object result = null;

      if (gme != null) {
         log4j.debug("Searching for ID: " + gme.getId());
         if (gme.getId() == GreenballMessagesEnum.ADD_ORGANIZATION.getId()) {
            log4j.debug("Found it");
            AddOrganization addOrganization = new AddOrganization();
            result = addOrganization.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.APPROVE_SUBSCRIPTION_REQUEST.getId()) {
            log4j.debug("Found it");
            ApproveSubscriptionRequest approveSubscriptionRequest = new ApproveSubscriptionRequest();
            result = approveSubscriptionRequest.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.A_TEST_MESSAGE.getId()) {
            log4j.debug("Found it");
            ATestMessage aTestMessage = new ATestMessage();
            result = aTestMessage.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.CHAT.getId()) {
            log4j.debug("Found it");
            Chat chat = new Chat();
            result = chat.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.CHAT_USER.getId()) {
            log4j.debug("Found it");
            ChatUser chatUser = new ChatUser();
            result = chatUser.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.CONFIGURATION_CONSTANTS.getId()) {
            log4j.debug("Found it");
            ConfigurationConstants configurationConstants = new ConfigurationConstants();
            result = configurationConstants.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.DELETE_RULE_MESSAGE.getId()) {
            log4j.debug("Found it");
            DeleteRuleMessage deleteRuleMessage = new DeleteRuleMessage();
            result = deleteRuleMessage.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.DELETE_RULE_MESSAGE_RESPONSE.getId()) {
            log4j.debug("Found it");
            DeleteRuleMessageResponse deleteRuleMessageResponse = new DeleteRuleMessageResponse();
            result = deleteRuleMessageResponse.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.DELETE_RULE_PHASE2_MESSAGE.getId()) {
            log4j.debug("Found it");
            DeleteRulePhase2Message deleteRulePhase2Message = new DeleteRulePhase2Message();
            result = deleteRulePhase2Message.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.DELETE_RULES_MESSAGE.getId()) {
            log4j.debug("Found it");
            DeleteRulesMessage deleteRulesMessage = new DeleteRulesMessage();
            result = deleteRulesMessage.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.DELETE_SUBSCRIPTION_REQUEST.getId()) {
            log4j.debug("Found it");
            DeleteSubscriptionRequest deleteSubscriptionRequest = new DeleteSubscriptionRequest();
            result = deleteSubscriptionRequest.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.DIRECTORY.getId()) {
            log4j.debug("Found it");
            Directory directory = new Directory();
            result = directory.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.EDIT_RULE_MESSAGE.getId()) {
            log4j.debug("Found it");
            EditRuleMessage editRuleMessage = new EditRuleMessage();
            result = editRuleMessage.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.ERROR_MESSAGE.getId()) {
            log4j.debug("Found it");
            ErrorMessage errorMessage = new ErrorMessage();
            result = errorMessage.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.FILE_TRANSFER.getId()) {
            log4j.debug("Found it");
            FileTransfer fileTransfer = new FileTransfer();
            result = fileTransfer.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.GRAMMAR.getId()) {
            log4j.debug("Found it");
            Grammar grammar = new Grammar();
            result = grammar.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.GRAMMAR_REQUEST.getId()) {
            log4j.debug("Found it");
            GrammarRequest grammarRequest = new GrammarRequest();
            result = grammarRequest.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.HEARTBEAT.getId()) {
            log4j.debug("Found it");
            Heartbeat heartbeat = new Heartbeat();
            result = heartbeat.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.INSERT_RULE_MESSAGE.getId()) {
            log4j.debug("Found it");
            InsertRuleMessage insertRuleMessage = new InsertRuleMessage();
            result = insertRuleMessage.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.INSERT_RULE_PHASE2_MESSAGE.getId()) {
            log4j.debug("Found it");
            InsertRulePhase2Message insertRulePhase2Message = new InsertRulePhase2Message();
            result = insertRulePhase2Message.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.JOURNAL_ENTRY.getId()) {
            log4j.debug("Found it");
            JournalEntry journalEntry = new JournalEntry();
            result = journalEntry.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.JOURNAL_SUBSCRIPTION_REQUEST.getId()) {
            log4j.debug("Found it");
            JournalSubscriptionRequest journalSubscriptionRequest = new JournalSubscriptionRequest();
            result = journalSubscriptionRequest.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.LIST_SUBSCRIPTIONS.getId()) {
            log4j.debug("Found it");
            ListSubscriptions listSubscriptions = new ListSubscriptions();
            result = listSubscriptions.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.LOGIN.getId()) {
            log4j.debug("Found it");
            Login login = new Login();
            result = login.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.META_MODEL.getId()) {
            log4j.debug("Found it");
            MetaModel metaModel = new MetaModel();
            result = metaModel.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.META_MODEL_LIST1.getId()) {
            log4j.debug("Found it");
            MetaModelList1 metaModelList1 = new MetaModelList1();
            result = metaModelList1.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.META_MODEL_LOAD_REQUEST.getId()) {
            log4j.debug("Found it");
            MetaModelLoadRequest metaModelLoadRequest = new MetaModelLoadRequest();
            result = metaModelLoadRequest.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.META_MODEL_LOCK_REQUEST.getId()) {
            log4j.debug("Found it");
            MetaModelLockRequest metaModelLockRequest = new MetaModelLockRequest();
            result = metaModelLockRequest.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.META_MODEL_LOCK_RESPONSE.getId()) {
            log4j.debug("Found it");
            MetaModelLockResponse metaModelLockResponse = new MetaModelLockResponse();
            result = metaModelLockResponse.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.MODEL.getId()) {
            log4j.debug("Found it");
            Model model = new Model();
            result = model.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.MODEL_ELEMENT.getId()) {
            log4j.debug("Found it");
            ModelElement modelElement = new ModelElement();
            result = modelElement.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.NEW_SUBSCRIPTION.getId()) {
            log4j.debug("Found it");
            NewSubscription newSubscription = new NewSubscription();
            result = newSubscription.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.ORGANIZATION_LIST.getId()) {
            log4j.debug("Found it");
            OrganizationList organizationList = new OrganizationList();
            result = organizationList.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.ORGANIZATION_REQUEST.getId()) {
            log4j.debug("Found it");
            OrganizationRequest organizationRequest = new OrganizationRequest();
            result = organizationRequest.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.REGISTER_NEW_USER.getId()) {
            log4j.debug("Found it");
            RegisterNewUser registerNewUser = new RegisterNewUser();
            result = registerNewUser.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.REGISTER_NEW_USER_RESPONSE.getId()) {
            log4j.debug("Found it");
            RegisterNewUserResponse registerNewUserResponse = new RegisterNewUserResponse();
            result = registerNewUserResponse.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.REQUEST_CHANGE_PASSWORD.getId()) {
            log4j.debug("Found it");
            RequestChangePassword requestChangePassword = new RequestChangePassword();
            result = requestChangePassword.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.REQUEST_CLOSE_CONNECTION.getId()) {
            log4j.debug("Found it");
            RequestCloseConnection requestCloseConnection = new RequestCloseConnection();
            result = requestCloseConnection.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.REQUEST_CONFIGURATION_CONSTANTS.getId()) {
            log4j.debug("Found it");
            RequestConfigurationConstants requestConfigurationConstants = new RequestConfigurationConstants();
            result = requestConfigurationConstants.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.REQUEST_DELETE_ORGANIZATION.getId()) {
            log4j.debug("Found it");
            RequestDeleteOrganization requestDeleteOrganization = new RequestDeleteOrganization();
            result = requestDeleteOrganization.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.REQUEST_LOAD_MODEL.getId()) {
            log4j.debug("Found it");
            RequestLoadModel requestLoadModel = new RequestLoadModel();
            result = requestLoadModel.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.REQUEST_LOGIN.getId()) {
            log4j.debug("Found it");
            RequestLogin requestLogin = new RequestLogin();
            result = requestLogin.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.REQUEST_MODEL.getId()) {
            log4j.debug("Found it");
            RequestModel requestModel = new RequestModel();
            result = requestModel.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.REQUEST_ORGANIZATION_LIST.getId()) {
            log4j.debug("Found it");
            RequestOrganizationList requestOrganizationList = new RequestOrganizationList();
            result = requestOrganizationList.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.REQUEST_SAVE_GRAMMAR.getId()) {
            log4j.debug("Found it");
            RequestSaveGrammar requestSaveGrammar = new RequestSaveGrammar();
            result = requestSaveGrammar.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.REQUEST_SUBSCRIPTION.getId()) {
            log4j.debug("Found it");
            RequestSubscription requestSubscription = new RequestSubscription();
            result = requestSubscription.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.REQUEST_SUBSCRIPTION_PHASE2.getId()) {
            log4j.debug("Found it");
            RequestSubscriptionPhase2 requestSubscriptionPhase2 = new RequestSubscriptionPhase2();
            result = requestSubscriptionPhase2.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.REQUEST_UNSUBSCRIBE.getId()) {
            log4j.debug("Found it");
            RequestUnsubscribe requestUnsubscribe = new RequestUnsubscribe();
            result = requestUnsubscribe.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.RESPONSE_CHANGE_PASSWORD.getId()) {
            log4j.debug("Found it");
            ResponseChangePassword responseChangePassword = new ResponseChangePassword();
            result = responseChangePassword.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.RESPONSE_CLOSE_CONNECTION.getId()) {
            log4j.debug("Found it");
            ResponseCloseConnection responseCloseConnection = new ResponseCloseConnection();
            result = responseCloseConnection.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.RESPONSE_DELETE_ORGANIZATION.getId()) {
            log4j.debug("Found it");
            ResponseDeleteOrganization responseDeleteOrganization = new ResponseDeleteOrganization();
            result = responseDeleteOrganization.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.RESPONSE_EDIT_RULE_MESSAGE.getId()) {
            log4j.debug("Found it");
            ResponseEditRuleMessage responseEditRuleMessage = new ResponseEditRuleMessage();
            result = responseEditRuleMessage.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.RESPONSE_INSERT_RULE_MESSAGE.getId()) {
            log4j.debug("Found it");
            ResponseInsertRuleMessage responseInsertRuleMessage = new ResponseInsertRuleMessage();
            result = responseInsertRuleMessage.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.RESPONSE_LOAD_MODEL.getId()) {
            log4j.debug("Found it");
            ResponseLoadModel responseLoadModel = new ResponseLoadModel();
            result = responseLoadModel.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.RESPONSE_LOGIN.getId()) {
            log4j.debug("Found it");
            ResponseLogin responseLogin = new ResponseLogin();
            result = responseLogin.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.RESPONSE_MODEL_ELEMENT_INSERT.getId()) {
            log4j.debug("Found it");
            ResponseModelElementInsert responseModelElementInsert = new ResponseModelElementInsert();
            result = responseModelElementInsert.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.RESPONSE_MODEL_ELEMENT_UPDATE.getId()) {
            log4j.debug("Found it");
            ResponseModelElementUpdate responseModelElementUpdate = new ResponseModelElementUpdate();
            result = responseModelElementUpdate.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.RESPONSE_SUBSCRIPTION_REQUEST.getId()) {
            log4j.debug("Found it");
            ResponseSubscriptionRequest responseSubscriptionRequest = new ResponseSubscriptionRequest();
            result = responseSubscriptionRequest.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.RESPONSE_UNSUBSCRIBE.getId()) {
            log4j.debug("Found it");
            ResponseUnsubscribe responseUnsubscribe = new ResponseUnsubscribe();
            result = responseUnsubscribe.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.RULE_EXPIRED.getId()) {
            log4j.debug("Found it");
            RuleExpired ruleExpired = new RuleExpired();
            result = ruleExpired.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.RULE_MESSAGE.getId()) {
            log4j.debug("Found it");
            RuleMessage ruleMessage = new RuleMessage();
            result = ruleMessage.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.RULE_SYNC_REQUEST.getId()) {
            log4j.debug("Found it");
            RuleSyncRequest ruleSyncRequest = new RuleSyncRequest();
            result = ruleSyncRequest.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.RULE_SYNC_RESPONSE.getId()) {
            log4j.debug("Found it");
            RuleSyncResponse ruleSyncResponse = new RuleSyncResponse();
            result = ruleSyncResponse.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.SAVE_GRAMMAR_PHASE1.getId()) {
            log4j.debug("Found it");
            SaveGrammarPhase1 saveGrammarPhase1 = new SaveGrammarPhase1();
            result = saveGrammarPhase1.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.SAVE_GRAMMAR_PHASE2.getId()) {
            log4j.debug("Found it");
            SaveGrammarPhase2 saveGrammarPhase2 = new SaveGrammarPhase2();
            result = saveGrammarPhase2.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.SIGN_UP.getId()) {
            log4j.debug("Found it");
            SignUp signUp = new SignUp();
            result = signUp.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.SIGN_UP_RESPONSE.getId()) {
            log4j.debug("Found it");
            SignUpResponse signUpResponse = new SignUpResponse();
            result = signUpResponse.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.SMS_PROVIDER_REQUEST.getId()) {
            log4j.debug("Found it");
            SmsProviderRequest smsProviderRequest = new SmsProviderRequest();
            result = smsProviderRequest.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.SMS_PROVIDERS.getId()) {
            log4j.debug("Found it");
            SmsProviders smsProviders = new SmsProviders();
            result = smsProviders.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.SUBSCRIBERS.getId()) {
            log4j.debug("Found it");
            Subscribers subscribers = new Subscribers();
            result = subscribers.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.SUBSCRIBERS_REQUEST.getId()) {
            log4j.debug("Found it");
            SubscribersRequest subscribersRequest = new SubscribersRequest();
            result = subscribersRequest.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.SUBSCRIPTION_REQUEST.getId()) {
            log4j.debug("Found it");
            SubscriptionRequest subscriptionRequest = new SubscriptionRequest();
            result = subscriptionRequest.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.SUBSCRIPTION_REQUESTS.getId()) {
            log4j.debug("Found it");
            SubscriptionRequests subscriptionRequests = new SubscriptionRequests();
            result = subscriptionRequests.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.SUBSCRIPTIONS.getId()) {
            log4j.debug("Found it");
            Subscriptions subscriptions = new Subscriptions();
            result = subscriptions.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.TEMPLATES.getId()) {
            log4j.debug("Found it");
            Templates templates = new Templates();
            result = templates.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.TERMINATE.getId()) {
            log4j.debug("Found it");
            Terminate terminate = new Terminate();
            result = terminate.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.TOPIC_SUBSCRIPTION_REQUEST.getId()) {
            log4j.debug("Found it");
            TopicSubscriptionRequest topicSubscriptionRequest = new TopicSubscriptionRequest();
            result = topicSubscriptionRequest.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.UPDATE_ORGANIZATION_LIST.getId()) {
            log4j.debug("Found it");
            UpdateOrganizationList updateOrganizationList = new UpdateOrganizationList();
            result = updateOrganizationList.unpack(buffer);
         }
         else if (gme.getId() == GreenballMessagesEnum.UPDATE_RULE_DEADLINE.getId()) {
            log4j.debug("Found it");
            UpdateRuleDeadline updateRuleDeadline = new UpdateRuleDeadline();
            result = updateRuleDeadline.unpack(buffer);
         }
         else {
            log4j.error("Error unpacking byte array.");
         }
      }

      log4j.debug("Leaving " + METHOD);
      return result;
   }

   /**
    * The unpackStr() method unpacks a String into an object. The String must be in 
    * BitByBit format. The returned object will be one of the following
    * classes:
    * AddOrganization
    * ApproveSubscriptionRequest
    * ATestMessage
    * Chat
    * ChatUser
    * ConfigurationConstants
    * DeleteRuleMessage
    * DeleteRuleMessageResponse
    * DeleteRulePhase2Message
    * DeleteRulesMessage
    * DeleteSubscriptionRequest
    * Directory
    * EditRuleMessage
    * ErrorMessage
    * FileTransfer
    * Grammar
    * GrammarRequest
    * Heartbeat
    * InsertRuleMessage
    * InsertRulePhase2Message
    * JournalEntry
    * JournalSubscriptionRequest
    * ListSubscriptions
    * Login
    * MetaModel
    * MetaModelList1
    * MetaModelLoadRequest
    * MetaModelLockRequest
    * MetaModelLockResponse
    * Model
    * ModelElement
    * NewSubscription
    * OrganizationList
    * OrganizationRequest
    * RegisterNewUser
    * RegisterNewUserResponse
    * RequestChangePassword
    * RequestCloseConnection
    * RequestConfigurationConstants
    * RequestDeleteOrganization
    * RequestLoadModel
    * RequestLogin
    * RequestModel
    * RequestOrganizationList
    * RequestSaveGrammar
    * RequestSubscription
    * RequestSubscriptionPhase2
    * RequestUnsubscribe
    * ResponseChangePassword
    * ResponseCloseConnection
    * ResponseDeleteOrganization
    * ResponseEditRuleMessage
    * ResponseInsertRuleMessage
    * ResponseLoadModel
    * ResponseLogin
    * ResponseModelElementInsert
    * ResponseModelElementUpdate
    * ResponseSubscriptionRequest
    * ResponseUnsubscribe
    * RuleExpired
    * RuleMessage
    * RuleSyncRequest
    * RuleSyncResponse
    * SaveGrammarPhase1
    * SaveGrammarPhase2
    * SignUp
    * SignUpResponse
    * SmsProviderRequest
    * SmsProviders
    * Subscribers
    * SubscribersRequest
    * SubscriptionRequest
    * SubscriptionRequests
    * Subscriptions
    * Templates
    * Terminate
    * TopicSubscriptionRequest
    * UpdateOrganizationList
    * UpdateRuleDeadline
    *
    * @return The message string as an object.
    */
   public Object unpackStr(String buffer) {
      final String METHOD = "unpackStr()";
      log4j.debug("Entered " + METHOD);

      String className = null;
      Object result = null;
      setErrorMsg(null);

      if (buffer == null) {
         setErrorMsg("No string was provided to unpack");
         log4j.error(getErrorMsg());
      }
      else if (buffer.startsWith("{") == false) {
         setErrorMsg("Invalid string format");
         log4j.error(getErrorMsg());
      }
      else {
         String tokens[] = buffer.split(" ");
         log4j.debug("# of tokens: " + tokens.length);
         log4j.debug("tokens[0]: " + tokens[0]);

         if (tokens.length == 1) {
            className = tokens[0].substring(1, tokens[0].length() - 1);
         }
         else {
            className = tokens[0].substring(1);
         }

         log4j.debug("Searching for class: " + className);
         if (className.equals("AddOrganization")) {
            log4j.debug("Found it");
         AddOrganization addOrganization = new AddOrganization();
            result = addOrganization.unpack(buffer);
         }
         else if (className.equals("ApproveSubscriptionRequest")) {
            log4j.debug("Found it");
         ApproveSubscriptionRequest approveSubscriptionRequest = new ApproveSubscriptionRequest();
            result = approveSubscriptionRequest.unpack(buffer);
         }
         else if (className.equals("ATestMessage")) {
            log4j.debug("Found it");
         ATestMessage aTestMessage = new ATestMessage();
            result = aTestMessage.unpack(buffer);
         }
         else if (className.equals("Chat")) {
            log4j.debug("Found it");
         Chat chat = new Chat();
            result = chat.unpack(buffer);
         }
         else if (className.equals("ChatUser")) {
            log4j.debug("Found it");
         ChatUser chatUser = new ChatUser();
            result = chatUser.unpack(buffer);
         }
         else if (className.equals("ConfigurationConstants")) {
            log4j.debug("Found it");
         ConfigurationConstants configurationConstants = new ConfigurationConstants();
            result = configurationConstants.unpack(buffer);
         }
         else if (className.equals("DeleteRuleMessage")) {
            log4j.debug("Found it");
         DeleteRuleMessage deleteRuleMessage = new DeleteRuleMessage();
            result = deleteRuleMessage.unpack(buffer);
         }
         else if (className.equals("DeleteRuleMessageResponse")) {
            log4j.debug("Found it");
         DeleteRuleMessageResponse deleteRuleMessageResponse = new DeleteRuleMessageResponse();
            result = deleteRuleMessageResponse.unpack(buffer);
         }
         else if (className.equals("DeleteRulePhase2Message")) {
            log4j.debug("Found it");
         DeleteRulePhase2Message deleteRulePhase2Message = new DeleteRulePhase2Message();
            result = deleteRulePhase2Message.unpack(buffer);
         }
         else if (className.equals("DeleteRulesMessage")) {
            log4j.debug("Found it");
         DeleteRulesMessage deleteRulesMessage = new DeleteRulesMessage();
            result = deleteRulesMessage.unpack(buffer);
         }
         else if (className.equals("DeleteSubscriptionRequest")) {
            log4j.debug("Found it");
         DeleteSubscriptionRequest deleteSubscriptionRequest = new DeleteSubscriptionRequest();
            result = deleteSubscriptionRequest.unpack(buffer);
         }
         else if (className.equals("Directory")) {
            log4j.debug("Found it");
         Directory directory = new Directory();
            result = directory.unpack(buffer);
         }
         else if (className.equals("EditRuleMessage")) {
            log4j.debug("Found it");
         EditRuleMessage editRuleMessage = new EditRuleMessage();
            result = editRuleMessage.unpack(buffer);
         }
         else if (className.equals("ErrorMessage")) {
            log4j.debug("Found it");
         ErrorMessage errorMessage = new ErrorMessage();
            result = errorMessage.unpack(buffer);
         }
         else if (className.equals("FileTransfer")) {
            log4j.debug("Found it");
         FileTransfer fileTransfer = new FileTransfer();
            result = fileTransfer.unpack(buffer);
         }
         else if (className.equals("Grammar")) {
            log4j.debug("Found it");
         Grammar grammar = new Grammar();
            result = grammar.unpack(buffer);
         }
         else if (className.equals("GrammarRequest")) {
            log4j.debug("Found it");
         GrammarRequest grammarRequest = new GrammarRequest();
            result = grammarRequest.unpack(buffer);
         }
         else if (className.equals("Heartbeat")) {
            log4j.debug("Found it");
         Heartbeat heartbeat = new Heartbeat();
            result = heartbeat.unpack(buffer);
         }
         else if (className.equals("InsertRuleMessage")) {
            log4j.debug("Found it");
         InsertRuleMessage insertRuleMessage = new InsertRuleMessage();
            result = insertRuleMessage.unpack(buffer);
         }
         else if (className.equals("InsertRulePhase2Message")) {
            log4j.debug("Found it");
         InsertRulePhase2Message insertRulePhase2Message = new InsertRulePhase2Message();
            result = insertRulePhase2Message.unpack(buffer);
         }
         else if (className.equals("JournalEntry")) {
            log4j.debug("Found it");
         JournalEntry journalEntry = new JournalEntry();
            result = journalEntry.unpack(buffer);
         }
         else if (className.equals("JournalSubscriptionRequest")) {
            log4j.debug("Found it");
         JournalSubscriptionRequest journalSubscriptionRequest = new JournalSubscriptionRequest();
            result = journalSubscriptionRequest.unpack(buffer);
         }
         else if (className.equals("ListSubscriptions")) {
            log4j.debug("Found it");
         ListSubscriptions listSubscriptions = new ListSubscriptions();
            result = listSubscriptions.unpack(buffer);
         }
         else if (className.equals("Login")) {
            log4j.debug("Found it");
         Login login = new Login();
            result = login.unpack(buffer);
         }
         else if (className.equals("MetaModel")) {
            log4j.debug("Found it");
         MetaModel metaModel = new MetaModel();
            result = metaModel.unpack(buffer);
         }
         else if (className.equals("MetaModelList1")) {
            log4j.debug("Found it");
         MetaModelList1 metaModelList1 = new MetaModelList1();
            result = metaModelList1.unpack(buffer);
         }
         else if (className.equals("MetaModelLoadRequest")) {
            log4j.debug("Found it");
         MetaModelLoadRequest metaModelLoadRequest = new MetaModelLoadRequest();
            result = metaModelLoadRequest.unpack(buffer);
         }
         else if (className.equals("MetaModelLockRequest")) {
            log4j.debug("Found it");
         MetaModelLockRequest metaModelLockRequest = new MetaModelLockRequest();
            result = metaModelLockRequest.unpack(buffer);
         }
         else if (className.equals("MetaModelLockResponse")) {
            log4j.debug("Found it");
         MetaModelLockResponse metaModelLockResponse = new MetaModelLockResponse();
            result = metaModelLockResponse.unpack(buffer);
         }
         else if (className.equals("Model")) {
            log4j.debug("Found it");
         Model model = new Model();
            result = model.unpack(buffer);
         }
         else if (className.equals("ModelElement")) {
            log4j.debug("Found it");
         ModelElement modelElement = new ModelElement();
            result = modelElement.unpack(buffer);
         }
         else if (className.equals("NewSubscription")) {
            log4j.debug("Found it");
         NewSubscription newSubscription = new NewSubscription();
            result = newSubscription.unpack(buffer);
         }
         else if (className.equals("OrganizationList")) {
            log4j.debug("Found it");
         OrganizationList organizationList = new OrganizationList();
            result = organizationList.unpack(buffer);
         }
         else if (className.equals("OrganizationRequest")) {
            log4j.debug("Found it");
         OrganizationRequest organizationRequest = new OrganizationRequest();
            result = organizationRequest.unpack(buffer);
         }
         else if (className.equals("RegisterNewUser")) {
            log4j.debug("Found it");
         RegisterNewUser registerNewUser = new RegisterNewUser();
            result = registerNewUser.unpack(buffer);
         }
         else if (className.equals("RegisterNewUserResponse")) {
            log4j.debug("Found it");
         RegisterNewUserResponse registerNewUserResponse = new RegisterNewUserResponse();
            result = registerNewUserResponse.unpack(buffer);
         }
         else if (className.equals("RequestChangePassword")) {
            log4j.debug("Found it");
         RequestChangePassword requestChangePassword = new RequestChangePassword();
            result = requestChangePassword.unpack(buffer);
         }
         else if (className.equals("RequestCloseConnection")) {
            log4j.debug("Found it");
         RequestCloseConnection requestCloseConnection = new RequestCloseConnection();
            result = requestCloseConnection.unpack(buffer);
         }
         else if (className.equals("RequestConfigurationConstants")) {
            log4j.debug("Found it");
         RequestConfigurationConstants requestConfigurationConstants = new RequestConfigurationConstants();
            result = requestConfigurationConstants.unpack(buffer);
         }
         else if (className.equals("RequestDeleteOrganization")) {
            log4j.debug("Found it");
         RequestDeleteOrganization requestDeleteOrganization = new RequestDeleteOrganization();
            result = requestDeleteOrganization.unpack(buffer);
         }
         else if (className.equals("RequestLoadModel")) {
            log4j.debug("Found it");
         RequestLoadModel requestLoadModel = new RequestLoadModel();
            result = requestLoadModel.unpack(buffer);
         }
         else if (className.equals("RequestLogin")) {
            log4j.debug("Found it");
         RequestLogin requestLogin = new RequestLogin();
            result = requestLogin.unpack(buffer);
         }
         else if (className.equals("RequestModel")) {
            log4j.debug("Found it");
         RequestModel requestModel = new RequestModel();
            result = requestModel.unpack(buffer);
         }
         else if (className.equals("RequestOrganizationList")) {
            log4j.debug("Found it");
         RequestOrganizationList requestOrganizationList = new RequestOrganizationList();
            result = requestOrganizationList.unpack(buffer);
         }
         else if (className.equals("RequestSaveGrammar")) {
            log4j.debug("Found it");
         RequestSaveGrammar requestSaveGrammar = new RequestSaveGrammar();
            result = requestSaveGrammar.unpack(buffer);
         }
         else if (className.equals("RequestSubscription")) {
            log4j.debug("Found it");
         RequestSubscription requestSubscription = new RequestSubscription();
            result = requestSubscription.unpack(buffer);
         }
         else if (className.equals("RequestSubscriptionPhase2")) {
            log4j.debug("Found it");
         RequestSubscriptionPhase2 requestSubscriptionPhase2 = new RequestSubscriptionPhase2();
            result = requestSubscriptionPhase2.unpack(buffer);
         }
         else if (className.equals("RequestUnsubscribe")) {
            log4j.debug("Found it");
         RequestUnsubscribe requestUnsubscribe = new RequestUnsubscribe();
            result = requestUnsubscribe.unpack(buffer);
         }
         else if (className.equals("ResponseChangePassword")) {
            log4j.debug("Found it");
         ResponseChangePassword responseChangePassword = new ResponseChangePassword();
            result = responseChangePassword.unpack(buffer);
         }
         else if (className.equals("ResponseCloseConnection")) {
            log4j.debug("Found it");
         ResponseCloseConnection responseCloseConnection = new ResponseCloseConnection();
            result = responseCloseConnection.unpack(buffer);
         }
         else if (className.equals("ResponseDeleteOrganization")) {
            log4j.debug("Found it");
         ResponseDeleteOrganization responseDeleteOrganization = new ResponseDeleteOrganization();
            result = responseDeleteOrganization.unpack(buffer);
         }
         else if (className.equals("ResponseEditRuleMessage")) {
            log4j.debug("Found it");
         ResponseEditRuleMessage responseEditRuleMessage = new ResponseEditRuleMessage();
            result = responseEditRuleMessage.unpack(buffer);
         }
         else if (className.equals("ResponseInsertRuleMessage")) {
            log4j.debug("Found it");
         ResponseInsertRuleMessage responseInsertRuleMessage = new ResponseInsertRuleMessage();
            result = responseInsertRuleMessage.unpack(buffer);
         }
         else if (className.equals("ResponseLoadModel")) {
            log4j.debug("Found it");
         ResponseLoadModel responseLoadModel = new ResponseLoadModel();
            result = responseLoadModel.unpack(buffer);
         }
         else if (className.equals("ResponseLogin")) {
            log4j.debug("Found it");
         ResponseLogin responseLogin = new ResponseLogin();
            result = responseLogin.unpack(buffer);
         }
         else if (className.equals("ResponseModelElementInsert")) {
            log4j.debug("Found it");
         ResponseModelElementInsert responseModelElementInsert = new ResponseModelElementInsert();
            result = responseModelElementInsert.unpack(buffer);
         }
         else if (className.equals("ResponseModelElementUpdate")) {
            log4j.debug("Found it");
         ResponseModelElementUpdate responseModelElementUpdate = new ResponseModelElementUpdate();
            result = responseModelElementUpdate.unpack(buffer);
         }
         else if (className.equals("ResponseSubscriptionRequest")) {
            log4j.debug("Found it");
         ResponseSubscriptionRequest responseSubscriptionRequest = new ResponseSubscriptionRequest();
            result = responseSubscriptionRequest.unpack(buffer);
         }
         else if (className.equals("ResponseUnsubscribe")) {
            log4j.debug("Found it");
         ResponseUnsubscribe responseUnsubscribe = new ResponseUnsubscribe();
            result = responseUnsubscribe.unpack(buffer);
         }
         else if (className.equals("RuleExpired")) {
            log4j.debug("Found it");
         RuleExpired ruleExpired = new RuleExpired();
            result = ruleExpired.unpack(buffer);
         }
         else if (className.equals("RuleMessage")) {
            log4j.debug("Found it");
         RuleMessage ruleMessage = new RuleMessage();
            result = ruleMessage.unpack(buffer);
         }
         else if (className.equals("RuleSyncRequest")) {
            log4j.debug("Found it");
         RuleSyncRequest ruleSyncRequest = new RuleSyncRequest();
            result = ruleSyncRequest.unpack(buffer);
         }
         else if (className.equals("RuleSyncResponse")) {
            log4j.debug("Found it");
         RuleSyncResponse ruleSyncResponse = new RuleSyncResponse();
            result = ruleSyncResponse.unpack(buffer);
         }
         else if (className.equals("SaveGrammarPhase1")) {
            log4j.debug("Found it");
         SaveGrammarPhase1 saveGrammarPhase1 = new SaveGrammarPhase1();
            result = saveGrammarPhase1.unpack(buffer);
         }
         else if (className.equals("SaveGrammarPhase2")) {
            log4j.debug("Found it");
         SaveGrammarPhase2 saveGrammarPhase2 = new SaveGrammarPhase2();
            result = saveGrammarPhase2.unpack(buffer);
         }
         else if (className.equals("SignUp")) {
            log4j.debug("Found it");
         SignUp signUp = new SignUp();
            result = signUp.unpack(buffer);
         }
         else if (className.equals("SignUpResponse")) {
            log4j.debug("Found it");
         SignUpResponse signUpResponse = new SignUpResponse();
            result = signUpResponse.unpack(buffer);
         }
         else if (className.equals("SmsProviderRequest")) {
            log4j.debug("Found it");
         SmsProviderRequest smsProviderRequest = new SmsProviderRequest();
            result = smsProviderRequest.unpack(buffer);
         }
         else if (className.equals("SmsProviders")) {
            log4j.debug("Found it");
         SmsProviders smsProviders = new SmsProviders();
            result = smsProviders.unpack(buffer);
         }
         else if (className.equals("Subscribers")) {
            log4j.debug("Found it");
         Subscribers subscribers = new Subscribers();
            result = subscribers.unpack(buffer);
         }
         else if (className.equals("SubscribersRequest")) {
            log4j.debug("Found it");
         SubscribersRequest subscribersRequest = new SubscribersRequest();
            result = subscribersRequest.unpack(buffer);
         }
         else if (className.equals("SubscriptionRequest")) {
            log4j.debug("Found it");
         SubscriptionRequest subscriptionRequest = new SubscriptionRequest();
            result = subscriptionRequest.unpack(buffer);
         }
         else if (className.equals("SubscriptionRequests")) {
            log4j.debug("Found it");
         SubscriptionRequests subscriptionRequests = new SubscriptionRequests();
            result = subscriptionRequests.unpack(buffer);
         }
         else if (className.equals("Subscriptions")) {
            log4j.debug("Found it");
         Subscriptions subscriptions = new Subscriptions();
            result = subscriptions.unpack(buffer);
         }
         else if (className.equals("Templates")) {
            log4j.debug("Found it");
         Templates templates = new Templates();
            result = templates.unpack(buffer);
         }
         else if (className.equals("Terminate")) {
            log4j.debug("Found it");
         Terminate terminate = new Terminate();
            result = terminate.unpack(buffer);
         }
         else if (className.equals("TopicSubscriptionRequest")) {
            log4j.debug("Found it");
         TopicSubscriptionRequest topicSubscriptionRequest = new TopicSubscriptionRequest();
            result = topicSubscriptionRequest.unpack(buffer);
         }
         else if (className.equals("UpdateOrganizationList")) {
            log4j.debug("Found it");
         UpdateOrganizationList updateOrganizationList = new UpdateOrganizationList();
            result = updateOrganizationList.unpack(buffer);
         }
         else if (className.equals("UpdateRuleDeadline")) {
            log4j.debug("Found it");
         UpdateRuleDeadline updateRuleDeadline = new UpdateRuleDeadline();
            result = updateRuleDeadline.unpack(buffer);
         }
         else {
            setErrorMsg("Unknown/unsupported class name: " + className);
            log4j.error(getErrorMsg());
         }
      }

      log4j.debug("Leaving " + METHOD);
      return result;
   }

   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }

   /**
    * This method returns the error message or null if no error occurred.
    */
   public String getErrorMsg() {
      return theErrorMsg;
   }

   /**
   * This method takes a "peek" at the message buffer without fully parsing
   * it. It returns the enum of the message.
   *
   * @param buffer
   *            The byte array containing the message.
   * @return The enum of the object within the message buffer.
   */
   public static GreenballMessagesEnum peek(byte[] buffer) {
      final String METHOD = "peek()";
      log4j.debug("Entered " + METHOD);

      GreenballMessagesEnum greenballMessagesEnum = null;

      if (buffer != null) {
         short id = GreenballMessagesUtility.getShort(buffer, 0);
         greenballMessagesEnum = GreenballMessagesEnum.toEnum(id);

         log4j.debug(String.format("ID: %d (%s)", greenballMessagesEnum.getId(),
         greenballMessagesEnum.getName()));
      }

      log4j.debug("Leaving " + METHOD);
      return greenballMessagesEnum;
   }

   /**
    * This method takes a "peek" at the message buffer without fully parsing
    * it. It returns the class name of the message buffer.
    *
    * @param buffer The string message buffer.
    * @return The class name of the object within the message buffer.
    */
   public static String peek(String buffer) {
      final String METHOD = "peek()";
      log4j.debug("Entered " + METHOD);

      String className = null;

      if (buffer != null) {
         if (buffer.startsWith("{")) {
            String tokens[] = buffer.split(" ");
            log4j.debug("# of tokens: " + tokens.length);
            log4j.debug("tokens[0]: " + tokens[0]);

            if (tokens.length == 1) {
               className = tokens[0].substring(1, tokens[0].length() - 1);
            } else {
               className = tokens[0].substring(1);
            }
         }
      }

      log4j.debug("className: " + className);

      log4j.debug("Leaving " + METHOD);
      return className;
   }
}
