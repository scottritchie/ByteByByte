/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInitializationFile()).
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializeOrganizationSubType class initializes an Element object with a OrganizationSubType object.
 */
public class InitializeOrganizationSubType {
private static Logger log4j = Logger.getLogger(InitializeOrganizationSubType.class);

private String theErrorMsg;
private OrganizationSubType organizationSubType;

public InitializeOrganizationSubType(OrganizationSubType organizationSubType) {
this.organizationSubType = organizationSubType;
}

/**
 * The initialize method returns an Element object initialized with data from a
 * OrganizationSubType object.
 * @param elementName The name of the element.
 * @return The element.
 * @throws MissingAttributeException
 */
protected Element initialize(String elementName) 
    throws MissingAttributeException {
final String METHOD = "initialize()";
log4j.debug("Entered " + METHOD);
Element element = null;

if (organizationSubType != null) {
log4j.debug("Creating new element: " + elementName);
element = new Element(elementName);

if (organizationSubType.getId() != null) {
AbstractAttribute abstractAttribute = initializeId(organizationSubType.getId());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"id\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (organizationSubType.getUser() != null) {
AbstractAttribute abstractAttribute = initializeUser(organizationSubType.getUser());
element.getAbstractAttributes().add(abstractAttribute);
}

if (organizationSubType.getPassword() != null) {
AbstractAttribute abstractAttribute = initializePassword(organizationSubType.getPassword());
element.getAbstractAttributes().add(abstractAttribute);
}

if (organizationSubType.getAdditional_password() != null) {
AbstractAttribute abstractAttribute = initializeAdditional_password(organizationSubType.getAdditional_password());
element.getAbstractAttributes().add(abstractAttribute);
}

if (organizationSubType.getDisplayName() != null) {
AbstractAttribute abstractAttribute = initializeDisplayName(organizationSubType.getDisplayName());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"displayName\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (organizationSubType.getDescription() != null) {
AbstractAttribute abstractAttribute = initializeDescription(organizationSubType.getDescription());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"description\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (organizationSubType.getOwner() != null) {
AbstractAttribute abstractAttribute = initializeOwner(organizationSubType.getOwner());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"owner\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (organizationSubType.getCreationTime() != null) {
AbstractAttribute abstractAttribute = initializeCreationTime(organizationSubType.getCreationTime());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"creationTime\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (organizationSubType.getSendSubscriptionRequestsTo() != null) {
AbstractAttribute abstractAttribute = initializeSendSubscriptionRequestsTo(organizationSubType.getSendSubscriptionRequestsTo());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"sendSubscriptionRequestsTo\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (organizationSubType.getIsPrivate() != null) {
AbstractAttribute abstractAttribute = initializeIsPrivate(organizationSubType.getIsPrivate());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"isPrivate\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (organizationSubType.getIsTwoFactorAuthenticationRequired() != null) {
AbstractAttribute abstractAttribute = initializeIsTwoFactorAuthenticationRequired(organizationSubType.getIsTwoFactorAuthenticationRequired());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"isTwoFactorAuthenticationRequired\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (organizationSubType.getIsListInDirectory() != null) {
AbstractAttribute abstractAttribute = initializeIsListInDirectory(organizationSubType.getIsListInDirectory());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"isListInDirectory\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (organizationSubType.getIsLocked() != null) {
AbstractAttribute abstractAttribute = initializeIsLocked(organizationSubType.getIsLocked());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"isLocked\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (organizationSubType.getLockedBy() != null) {
AbstractAttribute abstractAttribute = initializeLockedBy(organizationSubType.getLockedBy());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"lockedBy\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (organizationSubType.getLockTimestamp() != null) {
AbstractAttribute abstractAttribute = initializeLockTimestamp(organizationSubType.getLockTimestamp());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"lockTimestamp\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (organizationSubType.getTemplate() != null) {
AbstractAttribute abstractAttribute = initializeTemplate(organizationSubType.getTemplate());
element.getAbstractAttributes().add(abstractAttribute);
}

}

log4j.debug("Leaving " + METHOD);
return element;
}

/*
 * This method initializes the id attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeId(String id)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (id != null) {
      log4j.debug("Creating new KeyValuePair: id");
      KeyValuePair kvp = new KeyValuePair("id", "<STRING_BEGIN>" + id + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"id\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the user attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeUser(String user)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (user != null) {
      log4j.debug("Creating new KeyValuePair: user");
      KeyValuePair kvp = new KeyValuePair("user", "<STRING_BEGIN>" + user + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the password attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializePassword(String password)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (password != null) {
      log4j.debug("Creating new KeyValuePair: password");
      KeyValuePair kvp = new KeyValuePair("password", "<STRING_BEGIN>" + password + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the additional_password attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeAdditional_password(String additional_password)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (additional_password != null) {
      log4j.debug("Creating new KeyValuePair: additional_password");
      KeyValuePair kvp = new KeyValuePair("additional_password", "<STRING_BEGIN>" + additional_password + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the displayName attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeDisplayName(String displayName)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (displayName != null) {
      log4j.debug("Creating new KeyValuePair: displayName");
      KeyValuePair kvp = new KeyValuePair("displayName", "<STRING_BEGIN>" + displayName + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"displayName\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the description attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeDescription(String description)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (description != null) {
      log4j.debug("Creating new KeyValuePair: description");
      KeyValuePair kvp = new KeyValuePair("description", "<STRING_BEGIN>" + description + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"description\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the owner attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeOwner(String owner)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (owner != null) {
      log4j.debug("Creating new KeyValuePair: owner");
      KeyValuePair kvp = new KeyValuePair("owner", "<STRING_BEGIN>" + owner + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"owner\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the creationTime attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeCreationTime(Long creationTime)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (creationTime != null) {
      log4j.debug("Creating new KeyValuePair: creationTime");
      KeyValuePair kvp = new KeyValuePair("creationTime", Long.toString(creationTime));
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"creationTime\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the sendSubscriptionRequestsTo attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeSendSubscriptionRequestsTo(String sendSubscriptionRequestsTo)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (sendSubscriptionRequestsTo != null) {
      log4j.debug("Creating new KeyValuePair: sendSubscriptionRequestsTo");
      KeyValuePair kvp = new KeyValuePair("sendSubscriptionRequestsTo", "<STRING_BEGIN>" + sendSubscriptionRequestsTo + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"sendSubscriptionRequestsTo\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the isPrivate attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeIsPrivate(Boolean isPrivate)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (isPrivate != null) {
      log4j.debug("Creating new KeyValuePair: isPrivate");
      KeyValuePair kvp = new KeyValuePair("isPrivate", isPrivate.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"isPrivate\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the isTwoFactorAuthenticationRequired attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeIsTwoFactorAuthenticationRequired(Boolean isTwoFactorAuthenticationRequired)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (isTwoFactorAuthenticationRequired != null) {
      log4j.debug("Creating new KeyValuePair: isTwoFactorAuthenticationRequired");
      KeyValuePair kvp = new KeyValuePair("isTwoFactorAuthenticationRequired", isTwoFactorAuthenticationRequired.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"isTwoFactorAuthenticationRequired\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the isListInDirectory attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeIsListInDirectory(Boolean isListInDirectory)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (isListInDirectory != null) {
      log4j.debug("Creating new KeyValuePair: isListInDirectory");
      KeyValuePair kvp = new KeyValuePair("isListInDirectory", isListInDirectory.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"isListInDirectory\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the isLocked attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeIsLocked(Boolean isLocked)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (isLocked != null) {
      log4j.debug("Creating new KeyValuePair: isLocked");
      KeyValuePair kvp = new KeyValuePair("isLocked", isLocked.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"isLocked\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the lockedBy attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeLockedBy(String lockedBy)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (lockedBy != null) {
      log4j.debug("Creating new KeyValuePair: lockedBy");
      KeyValuePair kvp = new KeyValuePair("lockedBy", "<STRING_BEGIN>" + lockedBy + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"lockedBy\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the lockTimestamp attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeLockTimestamp(String lockTimestamp)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (lockTimestamp != null) {
      log4j.debug("Creating new KeyValuePair: lockTimestamp");
      KeyValuePair kvp = new KeyValuePair("lockTimestamp", "<STRING_BEGIN>" + lockTimestamp + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"lockTimestamp\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the template attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeTemplate(String template)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (template != null) {
      log4j.debug("Creating new KeyValuePair: template");
      KeyValuePair kvp = new KeyValuePair("template", "<STRING_BEGIN>" + template + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/**
* This method returns the error message or null if no error occurred.
*/
public String getErrorMsg() {
   return theErrorMsg;
}

private void setErrorMsg(String errorMsg) {
   theErrorMsg = errorMsg;
}


}
