/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInitializationFile()).
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializeSubscriptionRequestSubType class initializes an Element object with a SubscriptionRequestSubType object.
 */
public class InitializeSubscriptionRequestSubType {
private static Logger log4j = Logger.getLogger(InitializeSubscriptionRequestSubType.class);

private String theErrorMsg;
private SubscriptionRequestSubType subscriptionRequestSubType;

public InitializeSubscriptionRequestSubType(SubscriptionRequestSubType subscriptionRequestSubType) {
this.subscriptionRequestSubType = subscriptionRequestSubType;
}

/**
 * The initialize method returns an Element object initialized with data from a
 * SubscriptionRequestSubType object.
 * @param elementName The name of the element.
 * @return The element.
 * @throws MissingAttributeException
 */
protected Element initialize(String elementName) 
    throws MissingAttributeException {
final String METHOD = "initialize()";
log4j.debug("Entered " + METHOD);
Element element = null;

if (subscriptionRequestSubType != null) {
log4j.debug("Creating new element: " + elementName);
element = new Element(elementName);

if (subscriptionRequestSubType.getOrgId() != null) {
AbstractAttribute abstractAttribute = initializeOrgId(subscriptionRequestSubType.getOrgId());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"orgId\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (subscriptionRequestSubType.getOrgName() != null) {
AbstractAttribute abstractAttribute = initializeOrgName(subscriptionRequestSubType.getOrgName());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"orgName\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (subscriptionRequestSubType.getRequestor() != null) {
AbstractAttribute abstractAttribute = initializeRequestor(subscriptionRequestSubType.getRequestor());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"requestor\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (subscriptionRequestSubType.getMessage() != null) {
AbstractAttribute abstractAttribute = initializeMessage(subscriptionRequestSubType.getMessage());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"message\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (subscriptionRequestSubType.getOwner() != null) {
AbstractAttribute abstractAttribute = initializeOwner(subscriptionRequestSubType.getOwner());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"owner\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (subscriptionRequestSubType.getTimestamp() != null) {
AbstractAttribute abstractAttribute = initializeTimestamp(subscriptionRequestSubType.getTimestamp());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"timestamp\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

}

log4j.debug("Leaving " + METHOD);
return element;
}

/*
 * This method initializes the orgId attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeOrgId(String orgId)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (orgId != null) {
      log4j.debug("Creating new KeyValuePair: orgId");
      KeyValuePair kvp = new KeyValuePair("orgId", "<STRING_BEGIN>" + orgId + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"orgId\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the orgName attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeOrgName(String orgName)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (orgName != null) {
      log4j.debug("Creating new KeyValuePair: orgName");
      KeyValuePair kvp = new KeyValuePair("orgName", "<STRING_BEGIN>" + orgName + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"orgName\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the requestor attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeRequestor(String requestor)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (requestor != null) {
      log4j.debug("Creating new KeyValuePair: requestor");
      KeyValuePair kvp = new KeyValuePair("requestor", "<STRING_BEGIN>" + requestor + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"requestor\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the message attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeMessage(String message)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (message != null) {
      log4j.debug("Creating new KeyValuePair: message");
      KeyValuePair kvp = new KeyValuePair("message", "<STRING_BEGIN>" + message + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"message\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the owner attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeOwner(String owner)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (owner != null) {
      log4j.debug("Creating new KeyValuePair: owner");
      KeyValuePair kvp = new KeyValuePair("owner", "<STRING_BEGIN>" + owner + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"owner\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the timestamp attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeTimestamp(Long timestamp)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (timestamp != null) {
      log4j.debug("Creating new KeyValuePair: timestamp");
      KeyValuePair kvp = new KeyValuePair("timestamp", Long.toString(timestamp));
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"timestamp\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/**
* This method returns the error message or null if no error occurred.
*/
public String getErrorMsg() {
   return theErrorMsg;
}

private void setErrorMsg(String errorMsg) {
   theErrorMsg = errorMsg;
}


}
