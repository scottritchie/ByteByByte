/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateInitializationFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializeChat class initializes the element object with the Chat object.
 *
 */
public class InitializeChat {
   private static Logger log4j = Logger.getLogger(InitializeChat.class);
   private String theErrorMsg;
   private Element element;
   private Chat chat;

   /**
    * The InitializeChat class initializes the element object with the Chat object.
    *
    * @param chat The object which will be used to initialize the element object.
    */
   public InitializeChat(Chat chat) {
      this.chat = chat;

      this.element = new Element("Chat");
   }

   /**
    * This method initializes the element.
    */
   public Element initialize() throws MissingAttributeException {
      final String METHOD = "initialize()";
      log4j.debug("Entered " + METHOD);

      log4j.debug("element.getName(): Chat");

      if (chat.getUser() != null) {
         AbstractAttribute abstractAttribute = initializeUser(chat.getUser());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"user\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getMsg() != null) {
         AbstractAttribute abstractAttribute = initializeMsg(chat.getMsg());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"msg\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getDud1() != null) {
         AbstractAttribute abstractAttribute = initializeDud1(chat.getDud1());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"dud1\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getDud2() != null) {
         AbstractAttribute abstractAttribute = initializeDud2(chat.getDud2());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"dud2\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getDud3() != null) {
         AbstractAttribute abstractAttribute = initializeDud3(chat.getDud3());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"dud3\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getDud4() != null) {
         AbstractAttribute abstractAttribute = initializeDud4(chat.getDud4());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"dud4\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getDud5() != null) {
         AbstractAttribute abstractAttribute = initializeDud5(chat.getDud5());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"dud5\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getDud6() != null) {
         AbstractAttribute abstractAttribute = initializeDud6(chat.getDud6());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"dud6\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getDud7() != null) {
         AbstractAttribute abstractAttribute = initializeDud7(chat.getDud7());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"dud7\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getTimestamp() != null) {
         AbstractAttribute abstractAttribute = initializeTimestamp(chat.getTimestamp());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"timestamp\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getSomeBooleans() != null) {
         AbstractAttribute abstractAttribute = initializeSomeBooleans(chat.getSomeBooleans());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someBooleans\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getSomeBytes() != null) {
         AbstractAttribute abstractAttribute = initializeSomeBytes(chat.getSomeBytes());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someBytes\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getSomeChars() != null) {
         AbstractAttribute abstractAttribute = initializeSomeChars(chat.getSomeChars());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someChars\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getSomeInts() != null) {
         AbstractAttribute abstractAttribute = initializeSomeInts(chat.getSomeInts());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someInts\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getSomeFloats() != null) {
         AbstractAttribute abstractAttribute = initializeSomeFloats(chat.getSomeFloats());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someFloats\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getSomeLongs() != null) {
         AbstractAttribute abstractAttribute = initializeSomeLongs(chat.getSomeLongs());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someLongs\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getSomeShorts() != null) {
         AbstractAttribute abstractAttribute = initializeSomeShorts(chat.getSomeShorts());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someShorts\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getSomeStrings() != null) {
         AbstractAttribute abstractAttribute = initializeSomeStrings(chat.getSomeStrings());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someStrings\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getSomeDoubles() != null) {
         AbstractAttribute abstractAttribute = initializeSomeDoubles(chat.getSomeDoubles());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"someDoubles\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chat.getVariables() != null) {
         AbstractAttribute abstractAttribute = initializeVariables(chat.getVariables());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"variables\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }
      if (chat.getAction() != null) {
         AbstractAttribute abstractAttribute = initializeAction(chat.getAction());
         element.getAbstractAttributes().add(abstractAttribute);
      }      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"action\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }


      log4j.debug("Leaving " + METHOD);
      return element;
   }

   /*
    * This method initializes the user attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeUser(String user)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (user != null) {
         log4j.debug("Creating new KeyValuePair: user");
         KeyValuePair kvp = new KeyValuePair("user", "<STRING_BEGIN>" + user + "<STRING_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"user\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the msg attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeMsg(String msg)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (msg != null) {
         log4j.debug("Creating new KeyValuePair: msg");
         KeyValuePair kvp = new KeyValuePair("msg", "<STRING_BEGIN>" + msg + "<STRING_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"msg\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the dud1 attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeDud1(Integer dud1)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (dud1 != null) {
         log4j.debug("Creating new KeyValuePair: dud1");
         KeyValuePair kvp = new KeyValuePair("dud1", Integer.toString(dud1));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"dud1\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the dud2 attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeDud2(Float dud2)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (dud2 != null) {
         log4j.debug("Creating new KeyValuePair: dud2");
         KeyValuePair kvp = new KeyValuePair("dud2", Float.toString(dud2));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"dud2\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the dud3 attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeDud3(Double dud3)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (dud3 != null) {
         log4j.debug("Creating new KeyValuePair: dud3");
         KeyValuePair kvp = new KeyValuePair("dud3", Double.toString(dud3));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"dud3\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the dud4 attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeDud4(Character dud4)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (dud4 != null) {
         log4j.debug("Creating new KeyValuePair: dud4");
         KeyValuePair kvp = new KeyValuePair("dud4", dud4.toString());
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"dud4\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the dud5 attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeDud5(Boolean dud5)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (dud5 != null) {
         log4j.debug("Creating new KeyValuePair: dud5");
         KeyValuePair kvp = new KeyValuePair("dud5", dud5.toString());
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"dud5\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the dud6 attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeDud6(Byte dud6)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (dud6 != null) {
         log4j.debug("Creating new KeyValuePair: dud6");
         KeyValuePair kvp = new KeyValuePair("dud6", dud6.toString());
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"dud6\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the dud7 attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeDud7(Calendar dud7)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (dud7 != null) {
         log4j.debug("Creating new KeyValuePair: dud7");
         SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
         KeyValuePair kvp = new KeyValuePair("dud7",  "<DATE_TIME_BEGIN>" + formatter.format(dud7.getTime()) + "<DATE_TIME_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"dud7\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the timestamp attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeTimestamp(Long timestamp)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (timestamp != null) {
         log4j.debug("Creating new KeyValuePair: timestamp");
         KeyValuePair kvp = new KeyValuePair("timestamp", Long.toString(timestamp));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"timestamp\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someBooleans attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeBooleans(List<Boolean> someBooleansList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someBooleansIndex = 0;
      for (Boolean someBooleans : someBooleansList) {
         // Entered initAttributeValue()
         if (someBooleans != null) {
            log4j.debug("Creating new KeyValuePair: someBooleans[" + someBooleansIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someBooleans[" + someBooleansIndex + "]", someBooleans.toString());
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someBooleans\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someBooleansIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someBytes attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeBytes(List<Byte> someBytesList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someBytesIndex = 0;
      for (Byte someBytes : someBytesList) {
         // Entered initAttributeValue()
         if (someBytes != null) {
            log4j.debug("Creating new KeyValuePair: someBytes[" + someBytesIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someBytes[" + someBytesIndex + "]", someBytes.toString());
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someBytes\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someBytesIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someChars attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeChars(List<Character> someCharsList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someCharsIndex = 0;
      for (Character someChars : someCharsList) {
         // Entered initAttributeValue()
         if (someChars != null) {
            log4j.debug("Creating new KeyValuePair: someChars[" + someCharsIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someChars[" + someCharsIndex + "]", someChars.toString());
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someChars\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someCharsIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someInts attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeInts(List<Integer> someIntsList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someIntsIndex = 0;
      for (Integer someInts : someIntsList) {
         // Entered initAttributeValue()
         if (someInts != null) {
            log4j.debug("Creating new KeyValuePair: someInts[" + someIntsIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someInts[" + someIntsIndex + "]", Integer.toString(someInts));
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someInts\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someIntsIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someFloats attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeFloats(List<Float> someFloatsList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someFloatsIndex = 0;
      for (Float someFloats : someFloatsList) {
         // Entered initAttributeValue()
         if (someFloats != null) {
            log4j.debug("Creating new KeyValuePair: someFloats[" + someFloatsIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someFloats[" + someFloatsIndex + "]", Float.toString(someFloats));
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someFloats\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someFloatsIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someLongs attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeLongs(List<Long> someLongsList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someLongsIndex = 0;
      for (Long someLongs : someLongsList) {
         // Entered initAttributeValue()
         if (someLongs != null) {
            log4j.debug("Creating new KeyValuePair: someLongs[" + someLongsIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someLongs[" + someLongsIndex + "]", Long.toString(someLongs));
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someLongs\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someLongsIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someShorts attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeShorts(List<Short> someShortsList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someShortsIndex = 0;
      for (Short someShorts : someShortsList) {
         // Entered initAttributeValue()
         if (someShorts != null) {
            log4j.debug("Creating new KeyValuePair: someShorts[" + someShortsIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someShorts[" + someShortsIndex + "]", Short.toString(someShorts));
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someShorts\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someShortsIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someStrings attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeStrings(List<String> someStringsList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someStringsIndex = 0;
      for (String someStrings : someStringsList) {
         // Entered initAttributeValue()
         if (someStrings != null) {
            log4j.debug("Creating new KeyValuePair: someStrings[" + someStringsIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someStrings[" + someStringsIndex + "]", "<STRING_BEGIN>" + someStrings + "<STRING_END>");
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someStrings\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someStringsIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the someDoubles attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSomeDoubles(List<Double> someDoublesList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int someDoublesIndex = 0;
      for (Double someDoubles : someDoublesList) {
         // Entered initAttributeValue()
         if (someDoubles != null) {
            log4j.debug("Creating new KeyValuePair: someDoubles[" + someDoublesIndex + "]");
            KeyValuePair kvp = new KeyValuePair("someDoubles[" + someDoublesIndex + "]", Double.toString(someDoubles));
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"someDoubles\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         someDoublesIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the variables attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeVariables(List<Variable> variablesList)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      if (variablesList != null) {
         int indexvariables = 0;
         for (Variable variables : variablesList) {
         InitializeVariable initializeVariable = new InitializeVariable(variables);
         Element variablesElement = initializeVariable.initialize("variables[" + indexvariables + "]");
         abstractAttribute.getElements().add(variablesElement);
         indexvariables++;
         }
      }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"variables\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }
      return abstractAttribute;
   }

   private AbstractAttribute initializeAction(ChatAction action)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initPEnumRefValue()
      if (action != null) {
         log4j.debug("Creating new Key/Value pair: action");
         KeyValuePair kvp = new KeyValuePair("action", "<ENUM_BEGIN>" + action + "<ENUM_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"action\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }
      // Leaving initPEnumRefValue()
      return abstractAttribute;
   }

   /**
   * This method returns the error message or null if no error occurred.
   */
   public String getErrorMsg() {
      return theErrorMsg;
   }

   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }

}
