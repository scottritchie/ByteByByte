/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateInstantiationFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

public class InstantiateConfigurationConstants {
   private static Logger log4j = Logger.getLogger(InstantiateConfigurationConstants.class);

   /*
    * The isUpdated flags. If an attribute is required by the grammar then a value
    * must be provided, and the isUpdated flag will be set when the value is
    * obtained during unpacking. After the object is constructed during unpacking, 
    * validation will be performed to make sure a value was provided for all attributes
    * that are not optional. 
    * See buildFlags() in JBitByBitGenerator.java.
    */
   private boolean isConfigurationConstantNameMaxLengthUpdated = false;
   private boolean isFirstNameMaxLengthUpdated = false;
   private boolean isLastNameMaxLengthUpdated = false;
   private boolean isMiddleNameMaxLengthUpdated = false;
   private boolean isMetaModelNameMaxLengthUpdated = false;
   private boolean isMetaModelDescriptionMaxLengthUpdated = false;
   private boolean isMetaModelOwnerMaxLengthUpdated = false;
   private boolean isOrgDisplayNameMaxLengthUpdated = false;
   private boolean isPasswordMaxLengthUpdated = false;
   private boolean isPasswordMinLengthUpdated = false;
   private boolean isPathMaxLengthUpdated = false;
   private boolean isSubscriptionRequestMessageMaxLengthUpdated = false;
   private boolean isUserNameMaxLengthUpdated = false;
   private boolean isUserRoleMaxLengthUpdated = false;
   private boolean isUserStatusMaxLengthUpdated = false;
   private boolean isPaymentStatusMaxLengthUpdated = false;
   private boolean isSessionIdUpdated = false;

   private Element element;
   private ConfigurationConstants configurationConstants;

   /**
    * The InstantiateConfigurationConstants class instantiates the ConfigurationConstants object.
    *
    * @param element The root element returned by the parser after parsing the string
    *                representing the ConfigurationConstants.
    */
   public InstantiateConfigurationConstants(Element element) {
      this.element = element;   
      this.configurationConstants = new ConfigurationConstants();
   }

   /**
    * This method instantiates the ConfigurationConstants.
    *
    * @return The ConfigurationConstants.
    */
   public ConfigurationConstants instantiate() {
      final String METHOD = "instantiate()";
      log4j.debug("Entered " + METHOD);

      log4j.debug("ConfigurationConstants: " + element.getName());
      log4j.debug("# of attributes: " + element.getAbstractAttributes().size());

      instantiateConfigurationConstantsAttributes(element);

      for (AbstractAttribute abstractAttribute : element
            .getAbstractAttributes()) {
         for (Element e : abstractAttribute.getElements()) {
            log4j.debug("element name: " + e.getName());
      instantiateConfigurationConstantsSubTypeRefs(e);
      }
      }

      log4j.debug("Leaving " + METHOD);
      return configurationConstants;
      }

      /*
       * This method instantiates the ConfigurationConstants attributes.
       * 
       * @param Element element
       */
      private void instantiateConfigurationConstantsAttributes(Element element) {
      final String METHOD = "instantiateConfigurationConstantsAttributes()";
      log4j.debug("Entered " + METHOD);

      log4j.debug("element name: " + element.getName());
      for (AbstractAttribute attr : element.getAbstractAttributes()) {
         for (KeyValuePair kvp : attr.getKeyValuePairs()) {
            log4j.debug("key: " + kvp.getKey());
            log4j.debug("value: " + kvp.getValue());
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("configurationConstantNameMaxLength")) {
               log4j.debug("setting value of \"configurationConstantNameMaxLength\" to: " + kvp.getValue());
               this.isConfigurationConstantNameMaxLengthUpdated = true;
               configurationConstants.setConfigurationConstantNameMaxLength(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("firstNameMaxLength")) {
               log4j.debug("setting value of \"firstNameMaxLength\" to: " + kvp.getValue());
               this.isFirstNameMaxLengthUpdated = true;
               configurationConstants.setFirstNameMaxLength(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("lastNameMaxLength")) {
               log4j.debug("setting value of \"lastNameMaxLength\" to: " + kvp.getValue());
               this.isLastNameMaxLengthUpdated = true;
               configurationConstants.setLastNameMaxLength(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("middleNameMaxLength")) {
               log4j.debug("setting value of \"middleNameMaxLength\" to: " + kvp.getValue());
               this.isMiddleNameMaxLengthUpdated = true;
               configurationConstants.setMiddleNameMaxLength(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("metaModelNameMaxLength")) {
               log4j.debug("setting value of \"metaModelNameMaxLength\" to: " + kvp.getValue());
               this.isMetaModelNameMaxLengthUpdated = true;
               configurationConstants.setMetaModelNameMaxLength(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("metaModelDescriptionMaxLength")) {
               log4j.debug("setting value of \"metaModelDescriptionMaxLength\" to: " + kvp.getValue());
               this.isMetaModelDescriptionMaxLengthUpdated = true;
               configurationConstants.setMetaModelDescriptionMaxLength(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("metaModelOwnerMaxLength")) {
               log4j.debug("setting value of \"metaModelOwnerMaxLength\" to: " + kvp.getValue());
               this.isMetaModelOwnerMaxLengthUpdated = true;
               configurationConstants.setMetaModelOwnerMaxLength(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("orgDisplayNameMaxLength")) {
               log4j.debug("setting value of \"orgDisplayNameMaxLength\" to: " + kvp.getValue());
               this.isOrgDisplayNameMaxLengthUpdated = true;
               configurationConstants.setOrgDisplayNameMaxLength(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("passwordMaxLength")) {
               log4j.debug("setting value of \"passwordMaxLength\" to: " + kvp.getValue());
               this.isPasswordMaxLengthUpdated = true;
               configurationConstants.setPasswordMaxLength(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("passwordMinLength")) {
               log4j.debug("setting value of \"passwordMinLength\" to: " + kvp.getValue());
               this.isPasswordMinLengthUpdated = true;
               configurationConstants.setPasswordMinLength(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("pathMaxLength")) {
               log4j.debug("setting value of \"pathMaxLength\" to: " + kvp.getValue());
               this.isPathMaxLengthUpdated = true;
               configurationConstants.setPathMaxLength(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("subscriptionRequestMessageMaxLength")) {
               log4j.debug("setting value of \"subscriptionRequestMessageMaxLength\" to: " + kvp.getValue());
               this.isSubscriptionRequestMessageMaxLengthUpdated = true;
               configurationConstants.setSubscriptionRequestMessageMaxLength(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("userNameMaxLength")) {
               log4j.debug("setting value of \"userNameMaxLength\" to: " + kvp.getValue());
               this.isUserNameMaxLengthUpdated = true;
               configurationConstants.setUserNameMaxLength(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("userRoleMaxLength")) {
               log4j.debug("setting value of \"userRoleMaxLength\" to: " + kvp.getValue());
               this.isUserRoleMaxLengthUpdated = true;
               configurationConstants.setUserRoleMaxLength(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("userStatusMaxLength")) {
               log4j.debug("setting value of \"userStatusMaxLength\" to: " + kvp.getValue());
               this.isUserStatusMaxLengthUpdated = true;
               configurationConstants.setUserStatusMaxLength(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("paymentStatusMaxLength")) {
               log4j.debug("setting value of \"paymentStatusMaxLength\" to: " + kvp.getValue());
               this.isPaymentStatusMaxLengthUpdated = true;
               configurationConstants.setPaymentStatusMaxLength(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("sessionId")) {
               log4j.debug("setting value of \"sessionId\" to: " + kvp.getValue());
               this.isSessionIdUpdated = true;
               configurationConstants.setSessionId(kvp.getValue());
            }
            // Leaving instantiateMsgAttribute()
         }
      }

      log4j.debug("Leaving " + METHOD);
   }

   /*
    * This method instantiates the ConfigurationConstants SubType references.
    * 
    * @param Element element
    */
   private void instantiateConfigurationConstantsSubTypeRefs(Element element) {
      final String METHOD = "instantiateConfigurationConstantsSubTypeRefs()";
      log4j.debug("Entered " + METHOD);


      log4j.debug("Leaving " + METHOD);
   }


   /**
    * The validate method checks that a value was provided for all required 
    * attributes.
    *
    * @return The error message or null if no error occurred.
    */
   protected String validate() {
      final String METHOD = "validate()";
      log4j.debug("Entered " + METHOD);

      String result = null;

      // Entered buildValidationMethod()
      if (!this.isConfigurationConstantNameMaxLengthUpdated) {
         String msg = "ConfigurationConstantNameMaxLength is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
      }

      if (!this.isFirstNameMaxLengthUpdated) {
         String msg = "FirstNameMaxLength is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isLastNameMaxLengthUpdated) {
         String msg = "LastNameMaxLength is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isMiddleNameMaxLengthUpdated) {
         String msg = "MiddleNameMaxLength is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isMetaModelNameMaxLengthUpdated) {
         String msg = "MetaModelNameMaxLength is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isMetaModelDescriptionMaxLengthUpdated) {
         String msg = "MetaModelDescriptionMaxLength is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isMetaModelOwnerMaxLengthUpdated) {
         String msg = "MetaModelOwnerMaxLength is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isOrgDisplayNameMaxLengthUpdated) {
         String msg = "OrgDisplayNameMaxLength is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isPasswordMaxLengthUpdated) {
         String msg = "PasswordMaxLength is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isPasswordMinLengthUpdated) {
         String msg = "PasswordMinLength is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isPathMaxLengthUpdated) {
         String msg = "PathMaxLength is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isSubscriptionRequestMessageMaxLengthUpdated) {
         String msg = "SubscriptionRequestMessageMaxLength is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isUserNameMaxLengthUpdated) {
         String msg = "UserNameMaxLength is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isUserRoleMaxLengthUpdated) {
         String msg = "UserRoleMaxLength is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isUserStatusMaxLengthUpdated) {
         String msg = "UserStatusMaxLength is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isPaymentStatusMaxLengthUpdated) {
         String msg = "PaymentStatusMaxLength is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isSessionIdUpdated) {
         String msg = "SessionId is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }


      if (result != null) {
         log4j.debug("result: " + result);
      }

      log4j.debug("Leaving " + METHOD);
      return result;
   }
}
