/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateInitializationFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializeTopicSubscriptionRequest class initializes the element object with the TopicSubscriptionRequest object.
 *
 */
public class InitializeTopicSubscriptionRequest {
   private static Logger log4j = Logger.getLogger(InitializeTopicSubscriptionRequest.class);
   private String theErrorMsg;
   private Element element;
   private TopicSubscriptionRequest topicSubscriptionRequest;

   /**
    * The InitializeTopicSubscriptionRequest class initializes the element object with the TopicSubscriptionRequest object.
    *
    * @param topicSubscriptionRequest The object which will be used to initialize the element object.
    */
   public InitializeTopicSubscriptionRequest(TopicSubscriptionRequest topicSubscriptionRequest) {
      this.topicSubscriptionRequest = topicSubscriptionRequest;

      this.element = new Element("TopicSubscriptionRequest");
   }

   /**
    * This method initializes the element.
    */
   public Element initialize() throws MissingAttributeException {
      final String METHOD = "initialize()";
      log4j.debug("Entered " + METHOD);

      log4j.debug("element.getName(): TopicSubscriptionRequest");

      if (topicSubscriptionRequest.getTopics() != null) {
         AbstractAttribute abstractAttribute = initializeTopics(topicSubscriptionRequest.getTopics());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"topics\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }


      log4j.debug("Leaving " + METHOD);
      return element;
   }

   /*
    * This method initializes the topics attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeTopics(List<String> topicsList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int topicsIndex = 0;
      for (String topics : topicsList) {
         // Entered initAttributeValue()
         if (topics != null) {
            log4j.debug("Creating new KeyValuePair: topics[" + topicsIndex + "]");
            KeyValuePair kvp = new KeyValuePair("topics[" + topicsIndex + "]", "<STRING_BEGIN>" + topics + "<STRING_END>");
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"topics\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         topicsIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /**
   * This method returns the error message or null if no error occurred.
   */
   public String getErrorMsg() {
      return theErrorMsg;
   }

   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }

}
