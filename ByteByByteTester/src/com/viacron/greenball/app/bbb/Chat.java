/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateClassFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;


import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.Date;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;
import com.viacron.utils.StringMessageBuffer.parser.SMBGLexer;
import com.viacron.utils.StringMessageBuffer.parser.SMBGParser;

/**
 * The Chat class defines a message of the messaging system defined
 * by the GreenballMessages grammar. It provides methods for packing a Chat object
 * into a byte array or string, and for unpacking a byte array or string
 * back into a Chat object.
 */
public class Chat {
   private static final int ID = GreenballMessagesEnum.CHAT.getId();

   /**
    * The number of bits required to represent the ChatEnum IDs.
    * # of attributes: 20
    * # of PEnumRefs: 1
    */
   private static final int ID_BITS = 5;

   private static GreenballMessagesDirectoryEntry[] theDirectory;
   private static final int DIRECTORY_OFFSET = 39;

   private static Logger log4j = Logger.getLogger(Chat.class);

   SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");

   // Entered buildClassEnum()
   private enum ChatEnum {
      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      USER(0, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      MSG(1, -1, 0, true),

      // sizeInBits: 32
      DUD1(2, 16, 0, false),

      // sizeInBits: 32
      DUD2(3, 48, 0, false),

      // sizeInBits: 64
      DUD3(4, 80, 0, false),

      // sizeInBits: 16
      DUD4(5, 144, 0, false),

      // sizeInBits: 8
      DUD5(6, 160, 0, false),

      // sizeInBits: 8
      DUD6(7, 168, 0, false),

      // sizeInBits: 64
      DUD7(8, 176, 0, false),

      // sizeInBits: 64
      TIMESTAMP(9, 240, 0, false),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_BOOLEANS(10, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_BYTES(11, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_CHARS(12, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_INTS(13, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_FLOATS(14, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_LONGS(15, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_SHORTS(16, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_STRINGS(17, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_DOUBLES(18, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      VARIABLES(19, -1, 0, true),

      // sizeInBits: 1
      // sizeInBytes: 1
      ACTION(20, 304, 0, false);

      private final int id;
      private final int offsetInBits;
      private int length;
      private boolean isDirectoryEntry;

      ChatEnum(int id, int offsetInBits, int length, boolean isDirectoryEntry) {
         this.id = id;
         this.offsetInBits = offsetInBits;
         this.length = length;
         this.isDirectoryEntry = isDirectoryEntry;
      }

      public int getId() {
         return this.id;
      }

      public int getOffsetInBits() {
         return this.offsetInBits;
      }

      public int getLength() {
         return this.length;
      }

      public void setLength(int length) {
         this.length = length;
      }
   } // Leaving buildClassEnum()

   /*
    * The instance variables.
    * See buildInstanceVariables() in JBitByBitGenerator.java.
    */
   private String user;
   private String msg;
   private int dud1;
   private float dud2;
   private double dud3;
   private char dud4;
   private boolean dud5;
   private byte dud6;
   private Calendar dud7;
   private long timestamp;
   private List<Boolean> someBooleans;
   private List<Byte> someBytes;
   private List<Character> someChars;
   private List<Integer> someInts;
   private List<Float> someFloats;
   private List<Long> someLongs;
   private List<Short> someShorts;
   private List<String> someStrings;
   private List<Double> someDoubles;
   private List<Variable> variables;
   private ChatAction action;


   private String theErrorMsg;

   /**
    * The Chat no-arg constructor.
    */
   public Chat() {}

   /**
    * The Chat constructor.
    * See buildParameterAnnotations() in JBitByBitGenerator.java.
    *
    * @param user The user message attribute.
    * @param msg The msg message attribute.
    * @param dud1 The dud1 message attribute.
    * @param dud2 The dud2 message attribute.
    * @param dud3 The dud3 message attribute.
    * @param dud4 The dud4 message attribute.
    * @param dud5 The dud5 message attribute.
    * @param dud6 The dud6 message attribute.
    * @param dud7 The dud7 message attribute.
    * @param timestamp The timestamp message attribute.
    * @param someBooleans The someBooleans message attribute.
    * @param someBytes The someBytes message attribute.
    * @param someChars The someChars message attribute.
    * @param someInts The someInts message attribute.
    * @param someFloats The someFloats message attribute.
    * @param someLongs The someLongs message attribute.
    * @param someShorts The someShorts message attribute.
    * @param someStrings The someStrings message attribute.
    * @param someDoubles The someDoubles message attribute.
    * @param variables The variables message attribute.
    * @param action The ChatAction message attribute.
    */
   public Chat(String user,
               String msg,
               Integer dud1,
               Float dud2,
               Double dud3,
               Character dud4,
               Boolean dud5,
               Byte dud6,
               Calendar dud7,
               Long timestamp,
               List<Boolean> someBooleans,
               List<Byte> someBytes,
               List<Character>someChars,
               List<Integer> someInts,
               List<Float> someFloats,
               List<Long> someLongs,
               List<Short> someShorts,
               List<String> someStrings,
               List<Double> someDoubles, List<Variable> variables, ChatAction action) {
      // Entered buildParameterAssignments()
      this.setUser(user);
      this.setMsg(msg);
      this.setDud1(dud1);
      this.setDud2(dud2);
      this.setDud3(dud3);
      this.setDud4(dud4);
      this.setDud5(dud5);
      this.setDud6(dud6);
      this.setDud7(dud7);
      this.setTimestamp(timestamp);
      this.setSomeBooleans(someBooleans);
      this.setSomeBytes(someBytes);
      this.setSomeChars(someChars);
      this.setSomeInts(someInts);
      this.setSomeFloats(someFloats);
      this.setSomeLongs(someLongs);
      this.setSomeShorts(someShorts);
      this.setSomeStrings(someStrings);
      this.setSomeDoubles(someDoubles);
      this.setVariables(variables);
      this.setAction(action);
      // Leaving buildParameterAssignments()
   }


   // Entered buildSetErrorMsgMethod()
   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }
   // Leaving buildSetErrorMsgMethod()

   // Entered buildGetErrorMsgMethod()
   /**
    * This method returns the error message or null if no error
    * occurred.
    */
   public String getErrorMsg() {
      return theErrorMsg;
   }
   // Leaving buildGetErrorMsgMethod()

   // Entered buildPackMethod()
   /**
    * This method packs a Chat object into a byte array. If a required attribute is not
    * provided an exception will be thrown.
    *
    * @return A byte array which represents a Chat message object.
    * @throws MissingAttributeException
    */
   public byte[] pack() throws MissingAttributeException {
      final String METHOD = "pack()";
      log4j.debug("Entered " + METHOD);

      int byteArraySize = getChatSize();
      log4j.debug("byteArraySize: " + byteArraySize);
      byte[] bb = new byte[byteArraySize];

      /*
       * Convert object to byte array.
       */
      int offset = 0;

      bb = GreenballMessagesUtility.insertShort(bb, offset, (short) ID);
      offset += 2;

      if (this.getDud1() != null) {
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getDud1());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"dud1\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getDud2() != null) {
         bb = GreenballMessagesUtility.insertFloat(bb, offset, this.getDud2());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"dud2\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getDud3() != null) {
         bb = GreenballMessagesUtility.insertDouble(bb, offset, this.getDud3());
         offset += 8;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"dud3\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getDud4() != null) {
         bb = GreenballMessagesUtility.insertCharacter(bb, offset, this.getDud4());
         offset += 2;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"dud4\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getDud5() != null) {
         bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 1, this.getDud5() == true ? 1 : 0);
         offset += 1;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"dud5\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getDud6() != null) {
         bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 8, this.getDud6());
         offset += 1;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"dud6\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getDud7() != null) {
         bb = GreenballMessagesUtility.insertCalendar(bb, offset, this.getDud7());
         offset += 8;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"dud7\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getTimestamp() != null) {
         bb = GreenballMessagesUtility.insertLong(bb, offset, this.getTimestamp());
         offset += 8;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"timestamp\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 1, getAction().ordinal());
      // bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getAction().getId());
      offset += 1;

      ChatEnum.USER.setLength(this.getUser().length());
      ChatEnum.MSG.setLength(this.getMsg().length());
      ChatEnum.SOME_BOOLEANS.setLength(this.getSomeBooleans().size());
      ChatEnum.SOME_BYTES.setLength(this.getSomeBytes().size());
      ChatEnum.SOME_CHARS.setLength(this.getSomeChars().size());
      ChatEnum.SOME_INTS.setLength(this.getSomeInts().size());
      ChatEnum.SOME_FLOATS.setLength(this.getSomeFloats().size());
      ChatEnum.SOME_LONGS.setLength(this.getSomeLongs().size());
      ChatEnum.SOME_SHORTS.setLength(this.getSomeShorts().size());
      ChatEnum.SOME_STRINGS.setLength(this.getSomeStrings().size());
      ChatEnum.SOME_DOUBLES.setLength(this.getSomeDoubles().size());
      ChatEnum.VARIABLES.setLength(this.getVariables().size());

      int directorySize = getChatDirectorySize();
      if (directorySize != 0) {
         // Create the directory
         theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
         for (int i = 0; i < directorySize; i++) {
            theDirectory[i] = new GreenballMessagesDirectoryEntry();
         }

         // Fill the directory
         int index = 0;
         offset = DIRECTORY_OFFSET
               + GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES
               * theDirectory.length;

         for (ChatEnum chatEnum : ChatEnum.values()) {
            if (chatEnum.isDirectoryEntry == true) {
               int id = chatEnum.getId();
               int length = chatEnum.getLength();

               theDirectory[index].setId(id);
               theDirectory[index].setLength(length);
               theDirectory[index].setOffset(offset);

               // Insert the data
               if (id == ChatEnum.USER.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "user", offset));
                  bb = GreenballMessagesUtility.insertString(bb, offset, getUser());
                  offset += length * 1;
               }
               else if (id == ChatEnum.MSG.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "msg", offset));
                  bb = GreenballMessagesUtility.insertString(bb, offset, getMsg());
                  offset += length * 1;
               }
               else if (id == ChatEnum.SOME_BOOLEANS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someBooleans", offset));
                  bb = GreenballMessagesUtility.insertBooleans(bb, offset, getSomeBooleans());
                  offset += length * 1;
               }
               else if (id == ChatEnum.SOME_BYTES.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someBytes", offset));
                  bb = GreenballMessagesUtility.insertBytes(bb, offset, getSomeBytes());
                  offset += length * 1;
               }
               else if (id == ChatEnum.SOME_CHARS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someChars", offset));
                  bb = GreenballMessagesUtility.insertCharacters(bb, offset, getSomeChars());
                  offset += length * 2;
               }
               else if (id == ChatEnum.SOME_INTS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someInts", offset));
                  bb = GreenballMessagesUtility.insertIntegers(bb, offset, getSomeInts());
                  offset += length * 4;
               }
               else if (id == ChatEnum.SOME_FLOATS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someFloats", offset));
                  bb = GreenballMessagesUtility.insertFloats(bb, offset, getSomeFloats());
                  offset += length * 4;
               }
               else if (id == ChatEnum.SOME_LONGS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someLongs", offset));
                  bb = GreenballMessagesUtility.insertLongs(bb, offset, getSomeLongs());
                  offset += length * 8;
               }
               else if (id == ChatEnum.SOME_SHORTS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someShorts", offset));
                  bb = GreenballMessagesUtility.insertShorts(bb, offset, getSomeShorts());
                  offset += length * 2;
               }
               else if (id == ChatEnum.SOME_STRINGS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someStrings", offset));
                  for (String s : getSomeStrings()) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, s);
                     int strLen = s.getBytes(Charset
                           .forName("UTF-8")).length;

                     theDirectory[index].setId(id);
                     theDirectory[index].setLength(strLen);
                     theDirectory[index].setOffset(offset);

                     offset += strLen;
                     index++;
                  }
                  index--;
               }
               else if (id == ChatEnum.SOME_DOUBLES.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someDoubles", offset));
                  bb = GreenballMessagesUtility.insertDoubles(bb, offset, getSomeDoubles());
                  offset += length * 8;
               }
               else if (id == ChatEnum.VARIABLES.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "variables", offset));
                  for (Variable variable : this.variables) {
                     byte[] bytes = variable.pack();
                     bb = GreenballMessagesUtility.insertBytes(bb, offset, bytes);

                     theDirectory[index].setId(id);
                     theDirectory[index].setLength(bytes.length);
                     theDirectory[index].setOffset(offset);

                     offset += bytes.length;
                     index++;
                  }
               }
               index++;
            }
         }

         // Insert the directory
         offset = DIRECTORY_OFFSET;
         for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
            bb = GreenballMessagesUtility.insertInteger(bb, offset, directoryEntry.getId());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 4, directoryEntry.getLength());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 8, directoryEntry.getOffset());

            offset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
            index++;
         }

         // Calculate and insert the checksum
         long checksum = GreenballMessagesUtility.getChecksum(bb, bb.length - 8);
         bb = GreenballMessagesUtility.insertLong(bb, bb.length - 8, checksum);
      }
      log4j.debug("Leaving " + METHOD);
      return bb;
   }
   // Leaving buildPackMethod()

   // Entered buildUnpackMethod()
   /**
    * This method unpacks a byte array containing a Chat object.
    *
    * @return The byte array as a Chat message object.
    */
   public Chat unpack(byte[] ba) {
      final String METHOD = "unpack()";
      log4j.debug("Entered " + METHOD);

      Chat chat = new Chat();

      chat.setDud1(GreenballMessagesUtility.getInteger(ba, ChatEnum.DUD1.getOffsetInBits()));
      chat.setDud2(GreenballMessagesUtility.getFloat(ba, ChatEnum.DUD2.getOffsetInBits()));
      chat.setDud3(GreenballMessagesUtility.getDouble(ba, ChatEnum.DUD3.getOffsetInBits()));
      chat.setDud4(GreenballMessagesUtility.getCharacter(ba, ChatEnum.DUD4.getOffsetInBits()));
      chat.setDud5(GreenballMessagesUtility.getBoolean(ba, ChatEnum.DUD5.getOffsetInBits()));
      chat.setDud6(GreenballMessagesUtility.getByte(ba, ChatEnum.DUD6.getOffsetInBits()));
      chat.setDud7(GreenballMessagesUtility.getCalendar(ba, ChatEnum.DUD7.getOffsetInBits()));
      chat.setTimestamp(GreenballMessagesUtility.getLong(ba, ChatEnum.TIMESTAMP.getOffsetInBits()));
      chat.setAction(ChatAction.toEnum(GreenballMessagesUtility.getInteger(ba, ChatEnum.ACTION.getOffsetInBits())));

      // Get the directory
      int directorySize = getChatDirectorySize();
      theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
      int dirOffset = DIRECTORY_OFFSET;

      for (int entry = 0 ; entry < directorySize; entry++) {
         GreenballMessagesDirectoryEntry directoryEntry = new GreenballMessagesDirectoryEntry();

         int id = GreenballMessagesUtility.getInteger(ba, dirOffset * 8);
         directoryEntry.setId(id);
         int length = GreenballMessagesUtility.getInteger(ba, (dirOffset + 4) * 8);
         directoryEntry.setLength(length);
         int offset = GreenballMessagesUtility.getInteger(ba, (dirOffset + 8) * 8);
         directoryEntry.setOffset(offset);

         theDirectory[entry] = directoryEntry;

         dirOffset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      }

      for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
         int id = directoryEntry.getId();
         int offset = directoryEntry.getOffset();
         int length = directoryEntry.getLength();

         if (id == ChatEnum.USER.getId()) {
            chat.setUser(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == ChatEnum.MSG.getId()) {
            chat.setMsg(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == ChatEnum.SOME_BOOLEANS.getId()) {
            for (int index = 0; index < length; index++) {
               boolean b = GreenballMessagesUtility.getBoolean(ba, offset * 8 + index * 8);
               chat.getSomeBooleans().add(b);
            }
         }
         else if (id == ChatEnum.SOME_BYTES.getId()) {
            for (int index = 0; index < length; index++) {
               byte b = GreenballMessagesUtility.getByte(ba, offset * 8 + index * 8);
               chat.getSomeBytes().add(b);
            }
         }
         else if (id == ChatEnum.SOME_CHARS.getId()) {
            for (int index = 0; index < length; index++) {
               char c = GreenballMessagesUtility.getCharacter(ba, offset * 8 + index * 16);
               chat.getSomeChars().add(c);
            }
         }
         else if (id == ChatEnum.SOME_INTS.getId()) {
            for (int index = 0; index < length; index++) {
               int i = GreenballMessagesUtility.getInteger(ba, offset * 8 + index * 32);
               chat.getSomeInts().add(i);
            }
         }
         else if (id == ChatEnum.SOME_FLOATS.getId()) {
            for (int index = 0; index < length; index++) {
               float f = GreenballMessagesUtility.getFloat(ba, offset * 8 + index * 32);
               chat.getSomeFloats().add(f);
            }
         }
         else if (id == ChatEnum.SOME_LONGS.getId()) {
            for (int index = 0; index < length; index++) {
               long l = GreenballMessagesUtility.getLong(ba, offset * 8 + index * 64);
               chat.getSomeLongs().add(l);
            }
         }
         else if (id == ChatEnum.SOME_SHORTS.getId()) {
            for (int index = 0; index < length; index++) {
               short s = GreenballMessagesUtility.getShort(ba, offset * 8 + index * 16);
               chat.getSomeShorts().add(s);
            }
         }
         else if (id == ChatEnum.SOME_STRINGS.getId()) {
            String s = GreenballMessagesUtility.getString(ba, offset, length);
            chat.getSomeStrings().add(s);
         }
         else if (id == ChatEnum.SOME_DOUBLES.getId()) {
            for (int index = 0; index < length; index++) {
               double d = GreenballMessagesUtility.getDouble(ba, offset * 8 + index * 64);
               chat.getSomeDoubles().add(d);
            }
         }
         else if (id == ChatEnum.VARIABLES.getId()) {
            byte[] bytes = new byte[length];
            for (int index = 0; index < length; index++) {
               bytes[index] = GreenballMessagesUtility.getByte(ba, (offset + index) * 8);
            }
            chat.getVariables().add(new Variable().unpack(bytes));
         }
      }

      log4j.debug("Leaving " + METHOD);
      return chat;
   }
   // Leaving buildUnpackMethod()

   // Entered buildPackStrMethod()
   /**
    * This method packs a Chat object into a String. If a required attribute is not
    * provided an exception will be thrown.
    *
    * @return A String which represents a Chat message object.
    * @throws MissingAttributeException
    */
   public String packStr() throws MissingAttributeException {
      final String METHOD = "packStr()";
      log4j.debug("Entered " + METHOD);

      String msg = null;
      setErrorMsg(null);
       
      /*
       * Initialize attribute values.
       */
      InitializeChat initializeChat = new InitializeChat(this);
      Element element = initializeChat.initialize();

      if (getErrorMsg() == null) {
         /*
          * Convert object to String.
          * See convertObjectToString() in JBitByBitGenerator.java.
          */
         msg = "{" + element.getName();
         for (AbstractAttribute attr : element.getAbstractAttributes()) {
            msg = buildString(attr, msg);
         }
         msg = msg.concat("}");

         log4j.debug("msg: " + msg);
      }

      log4j.debug("Leaving " + METHOD);
      return msg;
   }
   // Leaving buildPackStrMethod()

   // Entered buildUnpackStrMethod()
   /**
    * The unpack() method unpacks a String into an object. The String must conform to the
    * SMBG grammar.
    *
     * @return The message string as an object.
    */
   public Chat unpack(String buffer) {
      final String METHOD = "unpack()";
      log4j.debug("Entered " + METHOD);

      setErrorMsg(null);

      // Create the lexer
      log4j.debug("lexing...");
      SMBGLexer lexer = new SMBGLexer(new ANTLRStringStream(buffer));

      int nbrOfSyntaxErrors = lexer.getNumberOfSyntaxErrors();
      log4j.debug("# of lexer errors: " + nbrOfSyntaxErrors);

      // Check for errors
      if (nbrOfSyntaxErrors != 0) {
         for (String error : lexer.getErrors()) {
            log4j.error(error);
         }

         return null;
      }

      // Wrap a token-stream around the lexer
      CommonTokenStream tokenStream = new CommonTokenStream(lexer);

      // Create the parser
      log4j.debug("parsing...");
      SMBGParser parser = new SMBGParser(tokenStream);

      // Check for errors
      nbrOfSyntaxErrors = parser.getNumberOfSyntaxErrors();
      log4j.debug("# of parse errors: " + nbrOfSyntaxErrors);

      if (nbrOfSyntaxErrors != 0) {
         for (String error : parser.getErrors()) {
               log4j.error(error);
         }

         return null;
      }

      // Unpack the string into objects
      log4j.debug("unpacking...");
      try {
         parser.unpack();
      } catch (RecognitionException e) {
         log4j.error("Error: " + e.getMessage());
         setErrorMsg(e.getMessage());
         return null;
      }
      
      Element element = parser.getElement();
      element.dump();

      /*
       * Instantiate the Chat object.
       */
       InstantiateChat instantiateChat = new InstantiateChat(element);
       Chat chat = instantiateChat.instantiate();

      /*
       * Verify that a value was provided for all mandatory attributes.
       */
      String result = instantiateChat.validate();
      if (result != null) {
         log4j.error("Error: " + result);
         setErrorMsg(result);
         return null;
      }

      log4j.debug("Leaving " + METHOD);
      return chat;
   }
   // Leaving buildUnpackStrMethod()

   private String buildString(AbstractAttribute attr, String msg) {
      for (KeyValuePair kvp : attr.getKeyValuePairs()) {
         msg = msg.concat(" " + kvp.getKey() + ":" + kvp.getValue());
      }

      for (Element element : attr.getElements()) {
         msg = msg.concat(" {" + element.getName());
         for (AbstractAttribute abstractAttribute : element.getAbstractAttributes()) {
            msg = buildString(abstractAttribute, msg);
         }
         msg = msg.concat("}");
      }

      return msg;
   }

   /**
    * This method sets the user attribute. Setting of this value is required.
    * @param user The user attribute.
    */
   public void setUser(String user) {
      this.user = user;
   }

   /**
    * This method sets the msg attribute. Setting of this value is required.
    * @param msg The msg attribute.
    */
   public void setMsg(String msg) {
      this.msg = msg;
   }

   /**
    * This method sets the dud1 attribute. Setting of this value is required.
    * @param dud1 The dud1 attribute.
    */
   public void setDud1(Integer dud1) {
      this.dud1 = dud1;
   }

   /**
    * This method sets the dud2 attribute. Setting of this value is required.
    * @param dud2 The dud2 attribute.
    */
   public void setDud2(Float dud2) {
      this.dud2 = dud2;
   }

   /**
    * This method sets the dud3 attribute. Setting of this value is required.
    * @param dud3 The dud3 attribute.
    */
   public void setDud3(Double dud3) {
      this.dud3 = dud3;
   }

   /**
    * This method sets the dud4 attribute. Setting of this value is required.
    * @param dud4 The dud4 attribute.
    */
   public void setDud4(Character dud4) {
      this.dud4 = dud4;
   }

   /**
    * This method sets the dud5 attribute. Setting of this value is required.
    * @param dud5 The dud5 attribute.
    */
   public void setDud5(Boolean dud5) {
      this.dud5 = dud5;
   }

   /**
    * This method sets the dud6 attribute. Setting of this value is required.
    * @param dud6 The dud6 attribute.
    */
   public void setDud6(Byte dud6) {
      this.dud6 = dud6;
   }

   /**
    * This method sets the dud7 attribute. Setting of this value is required.
    * @param dud7 The dud7 attribute.
    */
   public void setDud7(Calendar dud7) {
      this.dud7 = dud7;
   }

   /**
    * This method sets the timestamp attribute. Setting of this value is required.
    * @param timestamp The timestamp attribute.
    */
   public void setTimestamp(Long timestamp) {
      this.timestamp = timestamp;
   }

   /**
    * This method sets the someBooleans attribute. Setting of this value is required.
    * @param someBooleans The someBooleans attribute.
    */
   public void setSomeBooleans(List<Boolean> someBooleans) {
      this.someBooleans = someBooleans;
   }

   /**
    * This method sets the someBytes attribute. Setting of this value is required.
    * @param someBytes The someBytes attribute.
    */
   public void setSomeBytes(List<Byte> someBytes) {
      this.someBytes = someBytes;
   }

   /**
    * This method sets the someChars attribute. Setting of this value is required.
    * @param someChars The someChars attribute.
    */
   public void setSomeChars(List<Character> someChars) {
      this.someChars = someChars;
   }

   /**
    * This method sets the someInts attribute. Setting of this value is required.
    * @param someInts The someInts attribute.
    */
   public void setSomeInts(List<Integer> someInts) {
      this.someInts = someInts;
   }

   /**
    * This method sets the someFloats attribute. Setting of this value is required.
    * @param someFloats The someFloats attribute.
    */
   public void setSomeFloats(List<Float> someFloats) {
      this.someFloats = someFloats;
   }

   /**
    * This method sets the someLongs attribute. Setting of this value is required.
    * @param someLongs The someLongs attribute.
    */
   public void setSomeLongs(List<Long> someLongs) {
      this.someLongs = someLongs;
   }

   /**
    * This method sets the someShorts attribute. Setting of this value is required.
    * @param someShorts The someShorts attribute.
    */
   public void setSomeShorts(List<Short> someShorts) {
      this.someShorts = someShorts;
   }

   /**
    * This method sets the someStrings attribute. Setting of this value is required.
    * @param someStrings The someStrings attribute.
    */
   public void setSomeStrings(List<String> someStrings) {
      this.someStrings = someStrings;
   }

   /**
    * This method sets the someDoubles attribute. Setting of this value is required.
    * @param someDoubles The someDoubles attribute.
    */
   public void setSomeDoubles(List<Double> someDoubles) {
      this.someDoubles = someDoubles;
   }

   /**
    * This method gets the user attribute. The user attribute is a required attribute.
    */
   public String getUser() {
      return this.user;
   }

   /**
    * This method gets the msg attribute. The msg attribute is a required attribute.
    */
   public String getMsg() {
      return this.msg;
   }

   /**
    * This method gets the dud1 attribute. The dud1 attribute is a required attribute.
    */
   public Integer getDud1() {
      return this.dud1;
   }

   /**
    * This method gets the dud2 attribute. The dud2 attribute is a required attribute.
    */
   public Float getDud2() {
      return this.dud2;
   }

   /**
    * This method gets the dud3 attribute. The dud3 attribute is a required attribute.
    */
   public Double getDud3() {
      return this.dud3;
   }

   /**
    * This method gets the dud4 attribute. The dud4 attribute is a required attribute.
    */
   public Character getDud4() {
      return this.dud4;
   }

   /**
    * This method gets the dud5 attribute. The dud5 attribute is a required attribute.
    */
   public Boolean getDud5() {
      return this.dud5;
   }

   /**
    * This method gets the dud6 attribute. The dud6 attribute is a required attribute.
    */
   public Byte getDud6() {
      return this.dud6;
   }

   /**
    * This method gets the dud7 attribute. The dud7 attribute is a required attribute.
    */
   public Calendar getDud7() {
      return this.dud7;
   }

   /**
    * This method gets the timestamp attribute. The timestamp attribute is a required attribute.
    */
   public Long getTimestamp() {
      return this.timestamp;
   }

   /**
    * This method gets the someBooleans attribute. The someBooleans attribute is a required attribute.
    */
   public List<Boolean> getSomeBooleans() {
      if (this.someBooleans == null) {
         this.someBooleans = new ArrayList<Boolean>();
      }
      return this.someBooleans;
   }

   /**
    * This method gets the someBytes attribute. The someBytes attribute is a required attribute.
    */
   public List<Byte> getSomeBytes() {
      if (this.someBytes == null) {
         this.someBytes = new ArrayList<Byte>();
      }
      return this.someBytes;
   }

   /**
    * This method gets the someChars attribute. The someChars attribute is a required attribute.
    */
   public List<Character> getSomeChars() {
      if (this.someChars == null) {
         this.someChars = new ArrayList<Character>();
      }
      return this.someChars;
   }

   /**
    * This method gets the someInts attribute. The someInts attribute is a required attribute.
    */
   public List<Integer> getSomeInts() {
      if (this.someInts == null) {
         this.someInts = new ArrayList<Integer>();
      }
      return this.someInts;
   }

   /**
    * This method gets the someFloats attribute. The someFloats attribute is a required attribute.
    */
   public List<Float> getSomeFloats() {
      if (this.someFloats == null) {
         this.someFloats = new ArrayList<Float>();
      }
      return this.someFloats;
   }

   /**
    * This method gets the someLongs attribute. The someLongs attribute is a required attribute.
    */
   public List<Long> getSomeLongs() {
      if (this.someLongs == null) {
         this.someLongs = new ArrayList<Long>();
      }
      return this.someLongs;
   }

   /**
    * This method gets the someShorts attribute. The someShorts attribute is a required attribute.
    */
   public List<Short> getSomeShorts() {
      if (this.someShorts == null) {
         this.someShorts = new ArrayList<Short>();
      }
      return this.someShorts;
   }

   /**
    * This method gets the someStrings attribute. The someStrings attribute is a required attribute.
    */
   public List<String> getSomeStrings() {
      if (this.someStrings == null) {
         this.someStrings = new ArrayList<String>();
      }
      return this.someStrings;
   }

   /**
    * This method gets the someDoubles attribute. The someDoubles attribute is a required attribute.
    */
   public List<Double> getSomeDoubles() {
      if (this.someDoubles == null) {
         this.someDoubles = new ArrayList<Double>();
      }
      return this.someDoubles;
   }

   /**
    * This method sets the variables attribute. Setting of this value is required.
    * @param variables The variables.
    */
   public void setVariables(List<Variable> variables) {
      this.variables = variables;
   }

   /**
    * This method gets the variables attribute. The variables attribute is a required attribute.
    */
   public List<Variable> getVariables() {
      if (this.variables == null) {
         this.variables = new ArrayList<Variable>();
      }
      return this.variables;
   }

   /**
    * This method sets the action attribute. Setting of this value is required.
    * @param action The action.
    */
   public void setAction(ChatAction action) {
      this.action = action;
   }

   /**
    * This method gets the action attribute. The action attribute is a required attribute.
    * @return The action attribute.
    */
   public ChatAction getAction() {
      return this.action;
   }

   /**
    * This method gets the size of the directory.
    */
   private int getChatDirectorySize() {
      int directorySize = 0;

      // user
      directorySize++;
      // msg
      directorySize++;
      // someBooleans
      directorySize++;
      // someBytes
      directorySize++;
      // someChars
      directorySize++;
      // someInts
      directorySize++;
      // someFloats
      directorySize++;
      // someLongs
      directorySize++;
      // someShorts
      directorySize++;
      // someStrings
      directorySize += getSomeStrings().size();
      // someDoubles
      directorySize++;
      // variables
      directorySize += getVariables().size();

      return directorySize;
   }


   /**
    * This method gets the size of the Chat object.
    * @return The size in bytes.
    */
   public int getChatSize() {
      int size = 0;

      int directorySize = getChatDirectorySize();
      size += directorySize * GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      // Add two bytes for the ID
      size += 2;
      // Add eight bytes for the CRC
      size += 8;
      // Add size of user
      size += (getUser() != null ? getUser().length() : 0);
      // Add size of msg
      size += (getMsg() != null ? getMsg().length() : 0);
      // Add size of dud1
      size += 4;
      // Add size of dud2
      size += 4;
      // Add size of dud3
      size += 8;
      // Add size of dud4
      size += 2;
      // Add size of dud5
      size += 1;
      // Add size of dud6
      size += 1;
      // Add size of dud7
      size += 8;
      // Add size of timestamp
      size += 8;
      // Add size of someBooleans
      size += 1 * getSomeBooleans().size();
      // Add size of someBytes
      size += 1 * getSomeBytes().size();
      // Add size of someChars
      size += 2 * getSomeChars().size();
      // Add size of someInts
      size += 4 * getSomeInts().size();
      // Add size of someFloats
      size += 4 * getSomeFloats().size();
      // Add size of someLongs
      size += 8 * getSomeLongs().size();
      // Add size of someShorts
      size += 2 * getSomeShorts().size();
      // Add size of someStrings
      for (String s : getSomeStrings()) {
         size += s.getBytes(Charset.forName("UTF-8")).length;
      }
      // Add size of someDoubles
      size += 8 * getSomeDoubles().size();
      // Add size of variables
      for (Variable variable: getVariables()) {
         size += variable.getVariableSize();
      }
      // Add size of action
      size += 1;

      return size;
   }

   @Override
   public String toString() {
      StringBuilder result = new StringBuilder();
      String NEW_LINE = System.getProperty("line.separator");

      result.append(this.getClass().getSimpleName() + " Object {" + NEW_LINE);
      result.append(" user: " + user + NEW_LINE);
      result.append(" msg: " + msg + NEW_LINE);
      result.append(" dud1: " + dud1 + NEW_LINE);
      result.append(" dud2: " + dud2 + NEW_LINE);
      result.append(" dud3: " + dud3 + NEW_LINE);
      result.append(" dud4: " + dud4 + NEW_LINE);
      result.append(" dud5: " + dud5 + NEW_LINE);
      result.append(" dud6: " + dud6 + NEW_LINE);
      result.append(" dud7: " + dud7 + NEW_LINE);
      result.append(" timestamp: " + timestamp + NEW_LINE);

      if (someBooleans != null) {
         int i = 0;
         for (Boolean someBooleansBoolean : someBooleans) {
            result.append(" someBooleans[" + i + "]: " + someBooleansBoolean.toString() + NEW_LINE);
            i++;
         }
      }

      if (someBytes != null) {
         int i = 0;
         for (Byte someBytesByte : someBytes) {
            result.append(" someBytes[" + i + "]: " + someBytesByte.toString() + NEW_LINE);
            i++;
         }
      }

      if (someChars != null) {
         int i = 0;
         for (Character someCharsChar : someChars) {
            result.append(" someChars[" + i + "]: " + someCharsChar.toString() + NEW_LINE);
            i++;
         }
      }

      if (someInts != null) {
         int i = 0;
         for (Integer someIntsInteger : someInts) {
            result.append(" someInts[" + i + "]: " + someIntsInteger.toString() + NEW_LINE);
            i++;
         }
      }

      if (someFloats != null) {
         int i = 0;
         for (Float someFloatsFloat : someFloats) {
            result.append(" someFloats[" + i + "]: " + someFloatsFloat.toString() + NEW_LINE);
            i++;
         }
      }

      if (someLongs != null) {
         int i = 0;
         for (Long someLongsLong : someLongs) {
            result.append(" someLongs[" + i + "]: " + someLongsLong.toString() + NEW_LINE);
            i++;
         }
      }

      if (someShorts != null) {
         int i = 0;
         for (Short someShortsShort : someShorts) {
            result.append(" someShorts[" + i + "]: " + someShortsShort.toString() + NEW_LINE);
            i++;
         }
      }

      if (someStrings != null) {
         int i = 0;
         for (String someStringsString : someStrings) {
            result.append(" someStrings[" + i + "]: " + someStringsString.toString() + NEW_LINE);
            i++;
         }
      }

      if (someDoubles != null) {
         int i = 0;
         for (Double someDoublesDouble : someDoubles) {
            result.append(" someDoubles[" + i + "]: " + someDoublesDouble.toString() + NEW_LINE);
            i++;
         }
      }

      if (variables != null) {
         for (Variable variablesVariable : variables) {
            result.append(variablesVariable.toString());
         }
      }

      result.append(" action: " + action + NEW_LINE);
      result.append("} ");

      return result.toString();
   }

   /**
    * The hashCode method returns this object's hashCode.
    */
   @Override
   public int hashCode() {
      final int prime = 31;
      int result = 1;
      result = prime * result
         + ((String) user).hashCode();
      result = prime * result
         + ((String) msg).hashCode();
      result = prime * result
         + ((Integer) dud1).hashCode();
      result = prime * result
         + ((Float) dud2).hashCode();
      result = prime * result
         + ((Double) dud3).hashCode();
      result = prime * result
         + ((Character) dud4).hashCode();
      result = prime * result
         + ((Boolean) dud5).hashCode();
      result = prime * result
         + ((Byte) dud6).hashCode();
      result = prime * result
         + ((Calendar) dud7).hashCode();
      result = prime * result
         + ((Long) timestamp).hashCode();
      for (Boolean b : someBooleans) {
         result = prime * result + b.hashCode();
      }
      for (Byte b : someBytes) {
         result = prime * result + b.hashCode();
      }
      for (Character c : someChars) {
         result = prime * result + c.hashCode();
      }
      for (Integer i : someInts) {
         result = prime * result + i.hashCode();
      }
      for (Float f : someFloats) {
         result = prime * result + f.hashCode();
      }
      for (Long l : someLongs) {
         result = prime * result + l.hashCode();
      }
      for (Short s : someShorts) {
         result = prime * result + s.hashCode();
      }
      for (String s : someStrings) {
         result = prime * result + s.hashCode();
      }
      for (Double d : someDoubles) {
         result = prime * result + d.hashCode();
      }
      return result;
   }

   /**
    * The equals method checks for equality. 
    */
   public boolean equals(Object obj) {
      if (obj == this) return true;
      if (obj == null) return false;
      if (getClass() != obj.getClass()) return false;

      Chat chat = (Chat) obj;
      if (!chat.getUser().equals(this.getUser())) {
         return false;
      }

      if (!chat.getMsg().equals(this.getMsg())) {
         return false;
      }

      if (chat.getDud1() != this.getDud1()) {
         return false;
      }

      if (chat.getDud2() != this.getDud2()) {
         return false;
      }

      if (chat.getDud3() != this.getDud3()) {
         return false;
      }

      if (chat.getDud4() != this.getDud4()) {
         return false;
      }

      if (chat.getDud5() != this.getDud5()) {
         return false;
      }

      if (chat.getDud6() != this.getDud6()) {
         return false;
      }

      if (chat.getDud7() != this.getDud7()) {
         return false;
      }

      if (chat.getTimestamp() != this.getTimestamp()) {
         return false;
      }

      if (chat.getSomeBooleans() != this.getSomeBooleans()) {
         return false;
      }

      if (chat.getSomeBytes() != this.getSomeBytes()) {
         return false;
      }

      if (chat.getSomeChars() != this.getSomeChars()) {
         return false;
      }

      if (chat.getSomeInts() != this.getSomeInts()) {
         return false;
      }

      if (chat.getSomeFloats() != this.getSomeFloats()) {
         return false;
      }

      if (chat.getSomeLongs() != this.getSomeLongs()) {
         return false;
      }

      if (chat.getSomeShorts() != this.getSomeShorts()) {
         return false;
      }

      if (!chat.getSomeStrings().equals(this.getSomeStrings())) {
         return false;
      }

      if (chat.getSomeDoubles() != this.getSomeDoubles()) {
         return false;
      }

      return true;
   }
}
