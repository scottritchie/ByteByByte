/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInitializationFile()).
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializeRule class initializes an Element object with a Rule object.
 */
public class InitializeRule {
private static Logger log4j = Logger.getLogger(InitializeRule.class);

private String theErrorMsg;
private Rule rule;

public InitializeRule(Rule rule) {
this.rule = rule;
}

/**
 * The initialize method returns an Element object initialized with data from a
 * Rule object.
 * @param elementName The name of the element.
 * @return The element.
 * @throws MissingAttributeException
 */
protected Element initialize(String elementName) 
    throws MissingAttributeException {
final String METHOD = "initialize()";
log4j.debug("Entered " + METHOD);
Element element = null;

if (rule != null) {
log4j.debug("Creating new element: " + elementName);
element = new Element(elementName);

if (rule.getScopePaths() != null) {
AbstractAttribute abstractAttribute = initializeScopePaths(rule.getScopePaths());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"scopePaths\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getTestPaths() != null) {
AbstractAttribute abstractAttribute = initializeTestPaths(rule.getTestPaths());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"testPaths\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getDeadlinePaths() != null) {
AbstractAttribute abstractAttribute = initializeDeadlinePaths(rule.getDeadlinePaths());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"deadlinePaths\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getTestPathIDs() != null) {
AbstractAttribute abstractAttribute = initializeTestPathIDs(rule.getTestPathIDs());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"testPathIDs\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getScopeIDs() != null) {
AbstractAttribute abstractAttribute = initializeScopeIDs(rule.getScopeIDs());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"scopeIDs\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getTestIDs() != null) {
AbstractAttribute abstractAttribute = initializeTestIDs(rule.getTestIDs());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"testIDs\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getOrgId() != null) {
AbstractAttribute abstractAttribute = initializeOrgId(rule.getOrgId());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"orgId\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getName() != null) {
AbstractAttribute abstractAttribute = initializeName(rule.getName());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"name\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getId() != null) {
AbstractAttribute abstractAttribute = initializeId(rule.getId());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"id\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getTestPathLabels() != null) {
AbstractAttribute abstractAttribute = initializeTestPathLabels(rule.getTestPathLabels());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"testPathLabels\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getTestPathIds() != null) {
AbstractAttribute abstractAttribute = initializeTestPathIds(rule.getTestPathIds());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"testPathIds\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getDeadlinePathLabels() != null) {
AbstractAttribute abstractAttribute = initializeDeadlinePathLabels(rule.getDeadlinePathLabels());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"deadlinePathLabels\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getDeadlinePathIds() != null) {
AbstractAttribute abstractAttribute = initializeDeadlinePathIds(rule.getDeadlinePathIds());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"deadlinePathIds\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getScopePathLabels() != null) {
AbstractAttribute abstractAttribute = initializeScopePathLabels(rule.getScopePathLabels());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"scopePathLabels\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getScopePathIds() != null) {
AbstractAttribute abstractAttribute = initializeScopePathIds(rule.getScopePathIds());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"scopePathIds\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getDeadlineLong() != null) {
AbstractAttribute abstractAttribute = initializeDeadlineLong(rule.getDeadlineLong());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"deadlineLong\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getWarning() != null) {
AbstractAttribute abstractAttribute = initializeWarning(rule.getWarning());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"warning\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getTimePeriod() != null) {
AbstractAttribute abstractAttribute = initializeTimePeriod(rule.getTimePeriod());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"timePeriod\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getEmailAddress() != null) {
AbstractAttribute abstractAttribute = initializeEmailAddress(rule.getEmailAddress());
element.getAbstractAttributes().add(abstractAttribute);
}

if (rule.getSms() != null) {
AbstractAttribute abstractAttribute = initializeSms(rule.getSms());
element.getAbstractAttributes().add(abstractAttribute);
}

if (rule.getExpectedNodeState() != null) {
AbstractAttribute abstractAttribute = initializeExpectedNodeState(rule.getExpectedNodeState());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"expectedNodeState\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getEnabled() != null) {
AbstractAttribute abstractAttribute = initializeEnabled(rule.getEnabled());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"enabled\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getEmailNotification() != null) {
AbstractAttribute abstractAttribute = initializeEmailNotification(rule.getEmailNotification());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"emailNotification\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getSmsNotification() != null) {
AbstractAttribute abstractAttribute = initializeSmsNotification(rule.getSmsNotification());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"smsNotification\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getDeadlineId() != null) {
AbstractAttribute abstractAttribute = initializeDeadlineId(rule.getDeadlineId());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"deadlineId\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getSaveWhenExpired() != null) {
AbstractAttribute abstractAttribute = initializeSaveWhenExpired(rule.getSaveWhenExpired());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"saveWhenExpired\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getExpired() != null) {
AbstractAttribute abstractAttribute = initializeExpired(rule.getExpired());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"expired\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rule.getState() != null) {
AbstractAttribute abstractAttribute = initializeState(rule.getState());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"state\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

}

log4j.debug("Leaving " + METHOD);
return element;
}

/*
 * This method initializes the scopePaths attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeScopePaths(List<RulePath> scopePathsList)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   if (scopePathsList != null) {
      int indexscopePaths = 0;
      for (RulePath scopePaths : scopePathsList) {
      InitializeRulePath initializeRulePath = new InitializeRulePath(scopePaths);
      Element scopePathsElement = initializeRulePath.initialize("scopePaths[" + indexscopePaths + "]");
      abstractAttribute.getElements().add(scopePathsElement);
      indexscopePaths++;
      }
   }
else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"scopePaths\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}
   return abstractAttribute;
}

/*
 * This method initializes the testPaths attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeTestPaths(List<RulePath> testPathsList)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   if (testPathsList != null) {
      int indextestPaths = 0;
      for (RulePath testPaths : testPathsList) {
      InitializeRulePath initializeRulePath = new InitializeRulePath(testPaths);
      Element testPathsElement = initializeRulePath.initialize("testPaths[" + indextestPaths + "]");
      abstractAttribute.getElements().add(testPathsElement);
      indextestPaths++;
      }
   }
else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"testPaths\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}
   return abstractAttribute;
}

/*
 * This method initializes the deadlinePaths attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeDeadlinePaths(List<RulePath> deadlinePathsList)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   if (deadlinePathsList != null) {
      int indexdeadlinePaths = 0;
      for (RulePath deadlinePaths : deadlinePathsList) {
      InitializeRulePath initializeRulePath = new InitializeRulePath(deadlinePaths);
      Element deadlinePathsElement = initializeRulePath.initialize("deadlinePaths[" + indexdeadlinePaths + "]");
      abstractAttribute.getElements().add(deadlinePathsElement);
      indexdeadlinePaths++;
      }
   }
else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"deadlinePaths\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}
   return abstractAttribute;
}

/*
 * This method initializes the testPathIDs attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeTestPathIDs(List<String> testPathIDsList)
        throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   int testPathIDsIndex = 0;
   for (String testPathIDs : testPathIDsList) {
      // Entered initAttributeValue()
      if (testPathIDs != null) {
         log4j.debug("Creating new KeyValuePair: testPathIDs[" + testPathIDsIndex + "]");
         KeyValuePair kvp = new KeyValuePair("testPathIDs[" + testPathIDsIndex + "]", "<STRING_BEGIN>" + testPathIDs + "<STRING_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"testPathIDs\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      testPathIDsIndex++;
   }
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the scopeIDs attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeScopeIDs(List<ScopeIdType> scopeIDsList)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   if (scopeIDsList != null) {
      int indexscopeIDs = 0;
      for (ScopeIdType scopeIDs : scopeIDsList) {
      InitializeScopeIdType initializeScopeIdType = new InitializeScopeIdType(scopeIDs);
      Element scopeIDsElement = initializeScopeIdType.initialize("scopeIDs[" + indexscopeIDs + "]");
      abstractAttribute.getElements().add(scopeIDsElement);
      indexscopeIDs++;
      }
   }
else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"scopeIDs\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}
   return abstractAttribute;
}

/*
 * This method initializes the testIDs attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeTestIDs(List<String> testIDsList)
        throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   int testIDsIndex = 0;
   for (String testIDs : testIDsList) {
      // Entered initAttributeValue()
      if (testIDs != null) {
         log4j.debug("Creating new KeyValuePair: testIDs[" + testIDsIndex + "]");
         KeyValuePair kvp = new KeyValuePair("testIDs[" + testIDsIndex + "]", "<STRING_BEGIN>" + testIDs + "<STRING_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"testIDs\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      testIDsIndex++;
   }
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the orgId attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeOrgId(String orgId)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (orgId != null) {
      log4j.debug("Creating new KeyValuePair: orgId");
      KeyValuePair kvp = new KeyValuePair("orgId", "<STRING_BEGIN>" + orgId + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"orgId\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the name attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeName(String name)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (name != null) {
      log4j.debug("Creating new KeyValuePair: name");
      KeyValuePair kvp = new KeyValuePair("name", "<STRING_BEGIN>" + name + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"name\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the id attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeId(String id)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (id != null) {
      log4j.debug("Creating new KeyValuePair: id");
      KeyValuePair kvp = new KeyValuePair("id", "<STRING_BEGIN>" + id + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"id\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the testPathLabels attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeTestPathLabels(String testPathLabels)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (testPathLabels != null) {
      log4j.debug("Creating new KeyValuePair: testPathLabels");
      KeyValuePair kvp = new KeyValuePair("testPathLabels", "<STRING_BEGIN>" + testPathLabels + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"testPathLabels\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the testPathIds attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeTestPathIds(String testPathIds)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (testPathIds != null) {
      log4j.debug("Creating new KeyValuePair: testPathIds");
      KeyValuePair kvp = new KeyValuePair("testPathIds", "<STRING_BEGIN>" + testPathIds + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"testPathIds\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the deadlinePathLabels attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeDeadlinePathLabels(String deadlinePathLabels)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (deadlinePathLabels != null) {
      log4j.debug("Creating new KeyValuePair: deadlinePathLabels");
      KeyValuePair kvp = new KeyValuePair("deadlinePathLabels", "<STRING_BEGIN>" + deadlinePathLabels + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"deadlinePathLabels\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the deadlinePathIds attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeDeadlinePathIds(String deadlinePathIds)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (deadlinePathIds != null) {
      log4j.debug("Creating new KeyValuePair: deadlinePathIds");
      KeyValuePair kvp = new KeyValuePair("deadlinePathIds", "<STRING_BEGIN>" + deadlinePathIds + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"deadlinePathIds\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the scopePathLabels attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeScopePathLabels(String scopePathLabels)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (scopePathLabels != null) {
      log4j.debug("Creating new KeyValuePair: scopePathLabels");
      KeyValuePair kvp = new KeyValuePair("scopePathLabels", "<STRING_BEGIN>" + scopePathLabels + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"scopePathLabels\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the scopePathIds attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeScopePathIds(String scopePathIds)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (scopePathIds != null) {
      log4j.debug("Creating new KeyValuePair: scopePathIds");
      KeyValuePair kvp = new KeyValuePair("scopePathIds", "<STRING_BEGIN>" + scopePathIds + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"scopePathIds\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the deadlineLong attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeDeadlineLong(Long deadlineLong)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (deadlineLong != null) {
      log4j.debug("Creating new KeyValuePair: deadlineLong");
      KeyValuePair kvp = new KeyValuePair("deadlineLong", Long.toString(deadlineLong));
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"deadlineLong\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the warning attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeWarning(String warning)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (warning != null) {
      log4j.debug("Creating new KeyValuePair: warning");
      KeyValuePair kvp = new KeyValuePair("warning", "<STRING_BEGIN>" + warning + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"warning\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the timePeriod attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeTimePeriod(String timePeriod)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (timePeriod != null) {
      log4j.debug("Creating new KeyValuePair: timePeriod");
      KeyValuePair kvp = new KeyValuePair("timePeriod", "<STRING_BEGIN>" + timePeriod + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"timePeriod\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the emailAddress attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeEmailAddress(String emailAddress)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (emailAddress != null) {
      log4j.debug("Creating new KeyValuePair: emailAddress");
      KeyValuePair kvp = new KeyValuePair("emailAddress", "<STRING_BEGIN>" + emailAddress + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the sms attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeSms(String sms)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (sms != null) {
      log4j.debug("Creating new KeyValuePair: sms");
      KeyValuePair kvp = new KeyValuePair("sms", "<STRING_BEGIN>" + sms + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the expectedNodeState attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeExpectedNodeState(Integer expectedNodeState)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (expectedNodeState != null) {
      log4j.debug("Creating new KeyValuePair: expectedNodeState");
      KeyValuePair kvp = new KeyValuePair("expectedNodeState", Integer.toString(expectedNodeState));
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"expectedNodeState\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the enabled attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeEnabled(Boolean enabled)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (enabled != null) {
      log4j.debug("Creating new KeyValuePair: enabled");
      KeyValuePair kvp = new KeyValuePair("enabled", enabled.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"enabled\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the emailNotification attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeEmailNotification(Boolean emailNotification)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (emailNotification != null) {
      log4j.debug("Creating new KeyValuePair: emailNotification");
      KeyValuePair kvp = new KeyValuePair("emailNotification", emailNotification.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"emailNotification\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the smsNotification attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeSmsNotification(Boolean smsNotification)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (smsNotification != null) {
      log4j.debug("Creating new KeyValuePair: smsNotification");
      KeyValuePair kvp = new KeyValuePair("smsNotification", smsNotification.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"smsNotification\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the deadlineId attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeDeadlineId(String deadlineId)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (deadlineId != null) {
      log4j.debug("Creating new KeyValuePair: deadlineId");
      KeyValuePair kvp = new KeyValuePair("deadlineId", "<STRING_BEGIN>" + deadlineId + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"deadlineId\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the saveWhenExpired attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeSaveWhenExpired(Boolean saveWhenExpired)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (saveWhenExpired != null) {
      log4j.debug("Creating new KeyValuePair: saveWhenExpired");
      KeyValuePair kvp = new KeyValuePair("saveWhenExpired", saveWhenExpired.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"saveWhenExpired\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the expired attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeExpired(Boolean expired)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (expired != null) {
      log4j.debug("Creating new KeyValuePair: expired");
      KeyValuePair kvp = new KeyValuePair("expired", expired.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"expired\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

private AbstractAttribute initializeState(RuleState state)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initPEnumRefValue()
   if (state != null) {
      log4j.debug("Creating new Key/Value pair: state");
      KeyValuePair kvp = new KeyValuePair("state", "<ENUM_BEGIN>" + state + "<ENUM_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"state\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }
   // Leaving initPEnumRefValue()
   return abstractAttribute;
}

/**
* This method returns the error message or null if no error occurred.
*/
public String getErrorMsg() {
   return theErrorMsg;
}

private void setErrorMsg(String errorMsg) {
   theErrorMsg = errorMsg;
}


}
