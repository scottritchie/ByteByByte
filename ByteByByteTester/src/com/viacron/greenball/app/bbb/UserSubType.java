/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateClassFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
/**
 * The UserSubType class is a SubType referenced by message objects defined
 * by the GreenballMessages grammar.
 */
public class UserSubType {
   private static final int ID = GreenballMessagesEnum.USER_SUB_TYPE.getId();

   /**
    * The number of bits required to represent the UserSubTypeEnum IDs.
    * # of attributes: 6
    * # of PEnumRefs: 3
    */
   private static final int ID_BITS = 4;

   private static GreenballMessagesDirectoryEntry[] theDirectory;
   private static final int DIRECTORY_OFFSET = 0;

   private static Logger log4j = Logger.getLogger(UserSubType.class);

   // Entered buildClassEnum()
   private enum UserSubTypeEnum {
      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      FIRST_NAME(0, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      MIDDLE_NAME(1, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      LAST_NAME(2, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      USER_NAME(3, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      PASSWORD(4, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      TIMESTAMP(5, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      USER_ROLE(6, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      USER_STATUS(7, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      PAYMENT_STATUS(8, -1, 0, true);

      private final int id;
      private final int offsetInBits;
      private int length;
      private boolean isDirectoryEntry;

      UserSubTypeEnum(int id, int offsetInBits, int length, boolean isDirectoryEntry) {
         this.id = id;
         this.offsetInBits = offsetInBits;
         this.length = length;
         this.isDirectoryEntry = isDirectoryEntry;
      }

      public int getId() {
         return this.id;
      }

      public int getOffsetInBits() {
         return this.offsetInBits;
      }

      public int getLength() {
         return this.length;
      }

      public void setLength(int length) {
         this.length = length;
      }
   } // Leaving buildClassEnum()

   /*
    * The instance variables.
    * See buildInstanceVariables() in JBitByBitGenerator.java.
    */
   private String firstName;
   private String middleName;
   private String lastName;
   private String userName;
   private String password;
   private long timestamp;
   private UserRoleEnum userRole;

   private UserStatusEnum userStatus;

   private PaymentStatusEnum paymentStatus;


   private String theErrorMsg;

   /**
    * The UserSubType no-arg constructor.
    */
   public UserSubType() {}

   /**
    * The UserSubType constructor.
    * See buildParameterAnnotations() in JBitByBitGenerator.java.
    *
    * @param firstName The firstName message attribute.
    * @param middleName The middleName message attribute.
    * @param lastName The lastName message attribute.
    * @param userName The userName message attribute.
    * @param password The password message attribute.
    * @param timestamp The timestamp message attribute.
    * @param userRole The UserRoleEnum message attribute.
    * @param userStatus The UserStatusEnum message attribute.
    * @param paymentStatus The PaymentStatusEnum message attribute.
    */
   public UserSubType(String firstName,
                      String middleName,
                      String lastName,
                      String userName,
                      String password,
                      Long timestamp, UserRoleEnum userRole, UserStatusEnum userStatus, PaymentStatusEnum paymentStatus) {
      // Entered buildParameterAssignments()
      this.setFirstName(firstName);
      this.setMiddleName(middleName);
      this.setLastName(lastName);
      this.setUserName(userName);
      this.setPassword(password);
      this.setTimestamp(timestamp);
      this.setUserRole(userRole);
      this.setUserStatus(userStatus);
      this.setPaymentStatus(paymentStatus);
      // Leaving buildParameterAssignments()
   }

   /**
    * The UserSubType copy constructor.
    */
   public UserSubType(UserSubType userSubType) {
      // Entered buildCopyConstructorParameterAssignments()
      this.setFirstName(userSubType.getFirstName());
      this.setMiddleName(userSubType.getMiddleName());
      this.setLastName(userSubType.getLastName());
      this.setUserName(userSubType.getUserName());
      this.setPassword(userSubType.getPassword());
      this.setTimestamp(userSubType.getTimestamp());
      this.setUserRole(userSubType.getUserRole());
      this.setUserStatus(userSubType.getUserStatus());
      this.setPaymentStatus(userSubType.getPaymentStatus());
      // Leaving buildCopyConstructorParameterAssignments()
   }

   // Entered buildSetErrorMsgMethod()
   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }
   // Leaving buildSetErrorMsgMethod()

   // Entered buildGetErrorMsgMethod()
   /**
    * This method returns the error message or null if no error
    * occurred.
    */
   public String getErrorMsg() {
      return theErrorMsg;
   }
   // Leaving buildGetErrorMsgMethod()

   // Entered buildPackMethod()
   /**
    * This method packs a UserSubType object into a byte array. If a required attribute is not
    * provided an exception will be thrown.
    *
    * @return A byte array which represents a UserSubType message object.
    * @throws MissingAttributeException
    */
   public byte[] pack() throws MissingAttributeException {
      final String METHOD = "pack()";
      log4j.debug("Entered " + METHOD);

      int byteArraySize = getUserSubTypeSize();
      log4j.debug("byteArraySize: " + byteArraySize);
      byte[] bb = new byte[byteArraySize];

      /*
       * Convert object to byte array.
       */
      int offset = 0;


      UserSubTypeEnum.FIRST_NAME.setLength(this.getFirstName().length());
      UserSubTypeEnum.MIDDLE_NAME.setLength(this.getMiddleName().length());
      UserSubTypeEnum.LAST_NAME.setLength(this.getLastName().length());
      UserSubTypeEnum.USER_NAME.setLength(this.getUserName().length());
      UserSubTypeEnum.PASSWORD.setLength(this.getPassword().length());
      UserSubTypeEnum.TIMESTAMP.setLength(8);
      UserSubTypeEnum.USER_ROLE.setLength(1);
      UserSubTypeEnum.USER_STATUS.setLength(1);
      UserSubTypeEnum.PAYMENT_STATUS.setLength(1);

      int directorySize = getUserSubTypeDirectorySize();
      if (directorySize != 0) {
         // Create the directory
         theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
         for (int i = 0; i < directorySize; i++) {
            theDirectory[i] = new GreenballMessagesDirectoryEntry();
         }

         // Fill the directory
         int index = 0;
         offset = DIRECTORY_OFFSET
               + GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES
               * theDirectory.length;

         for (UserSubTypeEnum userSubTypeEnum : UserSubTypeEnum.values()) {
            if (userSubTypeEnum.isDirectoryEntry == true) {
               int id = userSubTypeEnum.getId();
               int length = userSubTypeEnum.getLength();

               theDirectory[index].setId(id);
               theDirectory[index].setLength(length);
               theDirectory[index].setOffset(offset);

               // Insert the data
               if (id == UserSubTypeEnum.FIRST_NAME.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "firstName", offset));
                  bb = GreenballMessagesUtility.insertString(bb, offset, getFirstName());
                  offset += length * 1;
               }
               else if (id == UserSubTypeEnum.MIDDLE_NAME.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "middleName", offset));
                  bb = GreenballMessagesUtility.insertString(bb, offset, getMiddleName());
                  offset += length * 1;
               }
               else if (id == UserSubTypeEnum.LAST_NAME.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "lastName", offset));
                  bb = GreenballMessagesUtility.insertString(bb, offset, getLastName());
                  offset += length * 1;
               }
               else if (id == UserSubTypeEnum.USER_NAME.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "userName", offset));
                  bb = GreenballMessagesUtility.insertString(bb, offset, getUserName());
                  offset += length * 1;
               }
               else if (id == UserSubTypeEnum.PASSWORD.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "password", offset));
                  bb = GreenballMessagesUtility.insertString(bb, offset, getPassword());
                  offset += length * 1;
               }
               else if (id == UserSubTypeEnum.TIMESTAMP.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "timestamp", offset));
                  bb = GreenballMessagesUtility.insertLong(bb, offset, getTimestamp());
                  offset += length * 8;
               }
               else if (id == UserSubTypeEnum.USER_ROLE.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "userRole", offset));
                  bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 3, getUserRole().ordinal());
                  // bb = GreenballMessagesUtility.insertInteger(bb, offset, getUserRole().ordinal());
                  offset += 1;
               }
               else if (id == UserSubTypeEnum.USER_STATUS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "userStatus", offset));
                  bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 4, getUserStatus().ordinal());
                  // bb = GreenballMessagesUtility.insertInteger(bb, offset, getUserStatus().ordinal());
                  offset += 1;
               }
               else if (id == UserSubTypeEnum.PAYMENT_STATUS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "paymentStatus", offset));
                  bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 3, getPaymentStatus().ordinal());
                  // bb = GreenballMessagesUtility.insertInteger(bb, offset, getPaymentStatus().ordinal());
                  offset += 1;
               }
               index++;
            }
         }

         // Insert the directory
         offset = DIRECTORY_OFFSET;
         for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
            bb = GreenballMessagesUtility.insertInteger(bb, offset, directoryEntry.getId());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 4, directoryEntry.getLength());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 8, directoryEntry.getOffset());

            offset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
            index++;
         }

      }
      log4j.debug("Leaving " + METHOD);
      return bb;
   }
   // Leaving buildPackMethod()

   // Entered buildUnpackMethod()
   /**
    * This method unpacks a byte array containing a UserSubType object.
    *
    * @return The byte array as a UserSubType message object.
    */
   public UserSubType unpack(byte[] ba) {
      final String METHOD = "unpack()";
      log4j.debug("Entered " + METHOD);

      UserSubType userSubType = new UserSubType();


      // Get the directory
      int directorySize = getUserSubTypeDirectorySize();
      theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
      int dirOffset = DIRECTORY_OFFSET;

      for (int entry = 0 ; entry < directorySize; entry++) {
         GreenballMessagesDirectoryEntry directoryEntry = new GreenballMessagesDirectoryEntry();

         int id = GreenballMessagesUtility.getInteger(ba, dirOffset * 8);
         directoryEntry.setId(id);
         int length = GreenballMessagesUtility.getInteger(ba, (dirOffset + 4) * 8);
         directoryEntry.setLength(length);
         int offset = GreenballMessagesUtility.getInteger(ba, (dirOffset + 8) * 8);
         directoryEntry.setOffset(offset);

         theDirectory[entry] = directoryEntry;

         dirOffset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      }

      for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
         int id = directoryEntry.getId();
         int offset = directoryEntry.getOffset();
         int length = directoryEntry.getLength();

         if (id == UserSubTypeEnum.FIRST_NAME.getId()) {
            userSubType.setFirstName(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == UserSubTypeEnum.MIDDLE_NAME.getId()) {
            userSubType.setMiddleName(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == UserSubTypeEnum.LAST_NAME.getId()) {
            userSubType.setLastName(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == UserSubTypeEnum.USER_NAME.getId()) {
            userSubType.setUserName(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == UserSubTypeEnum.PASSWORD.getId()) {
            userSubType.setPassword(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == UserSubTypeEnum.TIMESTAMP.getId()) {
            userSubType.setTimestamp(GreenballMessagesUtility.getLong(ba, offset));
         }
      }

      log4j.debug("Leaving " + METHOD);
      return userSubType;
   }
   // Leaving buildUnpackMethod()

   /**
    * This method sets the firstName attribute. Setting of this value is required.
    * @param firstName The firstName attribute.
    */
   public void setFirstName(String firstName) {
      this.firstName = firstName;
   }

   /**
    * This method sets the middleName attribute. Setting of this value is optional.
    * @param middleName The middleName attribute.
    */
   public void setMiddleName(String middleName) {
      this.middleName = middleName;
   }

   /**
    * This method sets the lastName attribute. Setting of this value is required.
    * @param lastName The lastName attribute.
    */
   public void setLastName(String lastName) {
      this.lastName = lastName;
   }

   /**
    * This method sets the userName attribute. Setting of this value is required.
    * @param userName The userName attribute.
    */
   public void setUserName(String userName) {
      this.userName = userName;
   }

   /**
    * This method sets the password attribute. Setting of this value is optional.
    * @param password The password attribute.
    */
   public void setPassword(String password) {
      this.password = password;
   }

   /**
    * This method sets the timestamp attribute. Setting of this value is optional.
    * @param timestamp The timestamp attribute.
    */
   public void setTimestamp(Long timestamp) {
      this.timestamp = timestamp;
   }

   /**
    * This method gets the firstName attribute. The firstName attribute is a required attribute.
    */
   public String getFirstName() {
      return this.firstName;
   }

   /**
    * This method gets the middleName attribute. The middleName attribute is an optional attribute.
    */
   public String getMiddleName() {
      return this.middleName;
   }

   /**
    * This method gets the lastName attribute. The lastName attribute is a required attribute.
    */
   public String getLastName() {
      return this.lastName;
   }

   /**
    * This method gets the userName attribute. The userName attribute is a required attribute.
    */
   public String getUserName() {
      return this.userName;
   }

   /**
    * This method gets the password attribute. The password attribute is an optional attribute.
    */
   public String getPassword() {
      return this.password;
   }

   /**
    * This method gets the timestamp attribute. The timestamp attribute is an optional attribute.
    */
   public Long getTimestamp() {
      return this.timestamp;
   }

   /**
    * This method sets the userRole attribute. Setting of this value is optional.
    * @param userRole The userRole.
    */
   public void setUserRole(UserRoleEnum userRole) {
      this.userRole = userRole;
   }

   /**
    * This method sets the userStatus attribute. Setting of this value is optional.
    * @param userStatus The userStatus.
    */
   public void setUserStatus(UserStatusEnum userStatus) {
      this.userStatus = userStatus;
   }

   /**
    * This method sets the paymentStatus attribute. Setting of this value is optional.
    * @param paymentStatus The paymentStatus.
    */
   public void setPaymentStatus(PaymentStatusEnum paymentStatus) {
      this.paymentStatus = paymentStatus;
   }

   /**
    * This method gets the userRole attribute. The userRole attribute is an optional attribute.
    * @return The userRole attribute.
    */
   public UserRoleEnum getUserRole() {
      return this.userRole;
   }

   /**
    * This method gets the userStatus attribute. The userStatus attribute is an optional attribute.
    * @return The userStatus attribute.
    */
   public UserStatusEnum getUserStatus() {
      return this.userStatus;
   }

   /**
    * This method gets the paymentStatus attribute. The paymentStatus attribute is an optional attribute.
    * @return The paymentStatus attribute.
    */
   public PaymentStatusEnum getPaymentStatus() {
      return this.paymentStatus;
   }

   /**
    * This method gets the size of the directory.
    */
   private int getUserSubTypeDirectorySize() {
      int directorySize = 0;

      // firstName
      directorySize++;
      // middleName
      directorySize++;
      // lastName
      directorySize++;
      // userName
      directorySize++;
      // password
      directorySize++;
      // timestamp
      directorySize++;
      // userRole
      directorySize++;
      // userStatus
      directorySize++;
      // paymentStatus
      directorySize++;

      return directorySize;
   }


   /**
    * This method gets the size of the UserSubType object.
    * @return The size in bytes.
    */
   public int getUserSubTypeSize() {
      int size = 0;

      int directorySize = getUserSubTypeDirectorySize();
      size += directorySize * GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      // Add size of firstName
      size += (getFirstName() != null ? getFirstName().length() : 0);
      // Add size of middleName
      size += (getMiddleName() != null ? getMiddleName().length() : 0);
      // Add size of lastName
      size += (getLastName() != null ? getLastName().length() : 0);
      // Add size of userName
      size += (getUserName() != null ? getUserName().length() : 0);
      // Add size of password
      size += (getPassword() != null ? getPassword().length() : 0);
      // Add size of timestamp
      size += 8;
      // Add size of userRole
      size += 1;
      // Add size of userStatus
      size += 1;
      // Add size of paymentStatus
      size += 1;

      return size;
   }

   @Override
   public String toString() {
      StringBuilder result = new StringBuilder();
      String NEW_LINE = System.getProperty("line.separator");

      result.append(this.getClass().getSimpleName() + " Object {" + NEW_LINE);
      result.append(" firstName: " + firstName + NEW_LINE);
      result.append(" middleName: " + middleName + NEW_LINE);
      result.append(" lastName: " + lastName + NEW_LINE);
      result.append(" userName: " + userName + NEW_LINE);
      result.append(" password: " + password + NEW_LINE);
      result.append(" timestamp: " + timestamp + NEW_LINE);

      result.append(" userRole: " + userRole + NEW_LINE);
      result.append(" userStatus: " + userStatus + NEW_LINE);
      result.append(" paymentStatus: " + paymentStatus + NEW_LINE);
      result.append("} ");

      return result.toString();
   }

   /**
    * The hashCode method returns this object's hashCode.
    */
   @Override
   public int hashCode() {
      final int prime = 31;
      int result = 1;
      result = prime * result
         + ((String) firstName).hashCode();
      result = prime * result
         + ((String) middleName).hashCode();
      result = prime * result
         + ((String) lastName).hashCode();
      result = prime * result
         + ((String) userName).hashCode();
      result = prime * result
         + ((String) password).hashCode();
      result = prime * result
         + ((Long) timestamp).hashCode();
      return result;
   }

   /**
    * The equals method checks for equality. 
    */
   public boolean equals(Object obj) {
      if (obj == this) return true;
      if (obj == null) return false;
      if (getClass() != obj.getClass()) return false;

      UserSubType userSubType = (UserSubType) obj;
      if (!userSubType.getFirstName().equals(this.getFirstName())) {
         return false;
      }

      if (userSubType.getMiddleName() == null && this.getMiddleName() != null) {
         return false;
      }
      else if (userSubType.getMiddleName() != null && this.getMiddleName() == null) {
         return false;
      }
      else if (userSubType.getMiddleName() != null && 
      !userSubType.getMiddleName().equals(this.getMiddleName())) {
         return false;
      }

      if (!userSubType.getLastName().equals(this.getLastName())) {
         return false;
      }

      if (!userSubType.getUserName().equals(this.getUserName())) {
         return false;
      }

      if (userSubType.getPassword() == null && this.getPassword() != null) {
         return false;
      }
      else if (userSubType.getPassword() != null && this.getPassword() == null) {
         return false;
      }
      else if (userSubType.getPassword() != null && 
      !userSubType.getPassword().equals(this.getPassword())) {
         return false;
      }

      if (userSubType.getTimestamp() != this.getTimestamp()) {
         return false;
      }

      return true;
   }
}
