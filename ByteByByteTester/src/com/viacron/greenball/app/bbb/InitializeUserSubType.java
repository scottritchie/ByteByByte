/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInitializationFile()).
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializeUserSubType class initializes an Element object with a UserSubType object.
 */
public class InitializeUserSubType {
private static Logger log4j = Logger.getLogger(InitializeUserSubType.class);

private String theErrorMsg;
private UserSubType userSubType;

public InitializeUserSubType(UserSubType userSubType) {
this.userSubType = userSubType;
}

/**
 * The initialize method returns an Element object initialized with data from a
 * UserSubType object.
 * @param elementName The name of the element.
 * @return The element.
 * @throws MissingAttributeException
 */
protected Element initialize(String elementName) 
    throws MissingAttributeException {
final String METHOD = "initialize()";
log4j.debug("Entered " + METHOD);
Element element = null;

if (userSubType != null) {
log4j.debug("Creating new element: " + elementName);
element = new Element(elementName);

if (userSubType.getFirstName() != null) {
AbstractAttribute abstractAttribute = initializeFirstName(userSubType.getFirstName());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"firstName\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (userSubType.getMiddleName() != null) {
AbstractAttribute abstractAttribute = initializeMiddleName(userSubType.getMiddleName());
element.getAbstractAttributes().add(abstractAttribute);
}

if (userSubType.getLastName() != null) {
AbstractAttribute abstractAttribute = initializeLastName(userSubType.getLastName());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"lastName\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (userSubType.getUserName() != null) {
AbstractAttribute abstractAttribute = initializeUserName(userSubType.getUserName());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"userName\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (userSubType.getPassword() != null) {
AbstractAttribute abstractAttribute = initializePassword(userSubType.getPassword());
element.getAbstractAttributes().add(abstractAttribute);
}

if (userSubType.getTimestamp() != null) {
AbstractAttribute abstractAttribute = initializeTimestamp(userSubType.getTimestamp());
element.getAbstractAttributes().add(abstractAttribute);
}

if (userSubType.getUserRole() != null) {
AbstractAttribute abstractAttribute = initializeUserRole(userSubType.getUserRole());
element.getAbstractAttributes().add(abstractAttribute);
}

if (userSubType.getUserStatus() != null) {
AbstractAttribute abstractAttribute = initializeUserStatus(userSubType.getUserStatus());
element.getAbstractAttributes().add(abstractAttribute);
}

if (userSubType.getPaymentStatus() != null) {
AbstractAttribute abstractAttribute = initializePaymentStatus(userSubType.getPaymentStatus());
element.getAbstractAttributes().add(abstractAttribute);
}

}

log4j.debug("Leaving " + METHOD);
return element;
}

/*
 * This method initializes the firstName attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeFirstName(String firstName)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (firstName != null) {
      log4j.debug("Creating new KeyValuePair: firstName");
      KeyValuePair kvp = new KeyValuePair("firstName", "<STRING_BEGIN>" + firstName + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"firstName\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the middleName attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeMiddleName(String middleName)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (middleName != null) {
      log4j.debug("Creating new KeyValuePair: middleName");
      KeyValuePair kvp = new KeyValuePair("middleName", "<STRING_BEGIN>" + middleName + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the lastName attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeLastName(String lastName)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (lastName != null) {
      log4j.debug("Creating new KeyValuePair: lastName");
      KeyValuePair kvp = new KeyValuePair("lastName", "<STRING_BEGIN>" + lastName + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"lastName\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the userName attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeUserName(String userName)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (userName != null) {
      log4j.debug("Creating new KeyValuePair: userName");
      KeyValuePair kvp = new KeyValuePair("userName", "<STRING_BEGIN>" + userName + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"userName\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the password attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializePassword(String password)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (password != null) {
      log4j.debug("Creating new KeyValuePair: password");
      KeyValuePair kvp = new KeyValuePair("password", "<STRING_BEGIN>" + password + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the timestamp attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeTimestamp(Long timestamp)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (timestamp != null) {
      log4j.debug("Creating new KeyValuePair: timestamp");
      KeyValuePair kvp = new KeyValuePair("timestamp", Long.toString(timestamp));
      abstractAttribute.getKeyValuePairs().add(kvp);
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

private AbstractAttribute initializeUserRole(UserRoleEnum userRole)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initPEnumRefValue()
   if (userRole != null) {
      log4j.debug("Creating new Key/Value pair: userRole");
      KeyValuePair kvp = new KeyValuePair("userRole", "<ENUM_BEGIN>" + userRole + "<ENUM_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   // Leaving initPEnumRefValue()
   return abstractAttribute;
}

private AbstractAttribute initializeUserStatus(UserStatusEnum userStatus)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initPEnumRefValue()
   if (userStatus != null) {
      log4j.debug("Creating new Key/Value pair: userStatus");
      KeyValuePair kvp = new KeyValuePair("userStatus", "<ENUM_BEGIN>" + userStatus + "<ENUM_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   // Leaving initPEnumRefValue()
   return abstractAttribute;
}

private AbstractAttribute initializePaymentStatus(PaymentStatusEnum paymentStatus)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initPEnumRefValue()
   if (paymentStatus != null) {
      log4j.debug("Creating new Key/Value pair: paymentStatus");
      KeyValuePair kvp = new KeyValuePair("paymentStatus", "<ENUM_BEGIN>" + paymentStatus + "<ENUM_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   // Leaving initPEnumRefValue()
   return abstractAttribute;
}

/**
* This method returns the error message or null if no error occurred.
*/
public String getErrorMsg() {
   return theErrorMsg;
}

private void setErrorMsg(String errorMsg) {
   theErrorMsg = errorMsg;
}


}
