/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateClassFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
/**
 * The ImportSubType class is a SubType referenced by message objects defined
 * by the GreenballMessages grammar.
 */
public class ImportSubType {
   private static final int ID = GreenballMessagesEnum.IMPORT_SUB_TYPE.getId();

   /**
    * The number of bits required to represent the ImportSubTypeEnum IDs.
    * # of attributes: 1
    * # of PEnumRefs: 0
    */
   private static final int ID_BITS = 0;

   private static GreenballMessagesDirectoryEntry[] theDirectory;
   private static final int DIRECTORY_OFFSET = 0;

   private static Logger log4j = Logger.getLogger(ImportSubType.class);

   // Entered buildClassEnum()
   private enum ImportSubTypeEnum {
      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      IMPORT_NAME_SPACE(0, -1, 0, true);

      private final int id;
      private final int offsetInBits;
      private int length;
      private boolean isDirectoryEntry;

      ImportSubTypeEnum(int id, int offsetInBits, int length, boolean isDirectoryEntry) {
         this.id = id;
         this.offsetInBits = offsetInBits;
         this.length = length;
         this.isDirectoryEntry = isDirectoryEntry;
      }

      public int getId() {
         return this.id;
      }

      public int getOffsetInBits() {
         return this.offsetInBits;
      }

      public int getLength() {
         return this.length;
      }

      public void setLength(int length) {
         this.length = length;
      }
   } // Leaving buildClassEnum()

   /*
    * The instance variables.
    * See buildInstanceVariables() in JBitByBitGenerator.java.
    */
   private String importNameSpace;

   private String theErrorMsg;

   /**
    * The ImportSubType no-arg constructor.
    */
   public ImportSubType() {}

   /**
    * The ImportSubType constructor.
    * See buildParameterAnnotations() in JBitByBitGenerator.java.
    *
    * @param importNameSpace The importNameSpace message attribute.
    */
   public ImportSubType(String importNameSpace) {
      // Entered buildParameterAssignments()
      this.setImportNameSpace(importNameSpace);
      // Leaving buildParameterAssignments()
   }

   /**
    * The ImportSubType copy constructor.
    */
   public ImportSubType(ImportSubType importSubType) {
      // Entered buildCopyConstructorParameterAssignments()
      this.setImportNameSpace(importSubType.getImportNameSpace());
      // Leaving buildCopyConstructorParameterAssignments()
   }

   // Entered buildSetErrorMsgMethod()
   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }
   // Leaving buildSetErrorMsgMethod()

   // Entered buildGetErrorMsgMethod()
   /**
    * This method returns the error message or null if no error
    * occurred.
    */
   public String getErrorMsg() {
      return theErrorMsg;
   }
   // Leaving buildGetErrorMsgMethod()

   // Entered buildPackMethod()
   /**
    * This method packs a ImportSubType object into a byte array. If a required attribute is not
    * provided an exception will be thrown.
    *
    * @return A byte array which represents a ImportSubType message object.
    * @throws MissingAttributeException
    */
   public byte[] pack() throws MissingAttributeException {
      final String METHOD = "pack()";
      log4j.debug("Entered " + METHOD);

      int byteArraySize = getImportSubTypeSize();
      log4j.debug("byteArraySize: " + byteArraySize);
      byte[] bb = new byte[byteArraySize];

      /*
       * Convert object to byte array.
       */
      int offset = 0;


      ImportSubTypeEnum.IMPORT_NAME_SPACE.setLength(this.getImportNameSpace().length());

      int directorySize = getImportSubTypeDirectorySize();
      if (directorySize != 0) {
         // Create the directory
         theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
         for (int i = 0; i < directorySize; i++) {
            theDirectory[i] = new GreenballMessagesDirectoryEntry();
         }

         // Fill the directory
         int index = 0;
         offset = DIRECTORY_OFFSET
               + GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES
               * theDirectory.length;

         for (ImportSubTypeEnum importSubTypeEnum : ImportSubTypeEnum.values()) {
            if (importSubTypeEnum.isDirectoryEntry == true) {
               int id = importSubTypeEnum.getId();
               int length = importSubTypeEnum.getLength();

               theDirectory[index].setId(id);
               theDirectory[index].setLength(length);
               theDirectory[index].setOffset(offset);

               // Insert the data
               if (id == ImportSubTypeEnum.IMPORT_NAME_SPACE.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "importNameSpace", offset));
                  bb = GreenballMessagesUtility.insertString(bb, offset, getImportNameSpace());
                  offset += length * 1;
               }
               index++;
            }
         }

         // Insert the directory
         offset = DIRECTORY_OFFSET;
         for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
            bb = GreenballMessagesUtility.insertInteger(bb, offset, directoryEntry.getId());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 4, directoryEntry.getLength());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 8, directoryEntry.getOffset());

            offset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
            index++;
         }

      }
      log4j.debug("Leaving " + METHOD);
      return bb;
   }
   // Leaving buildPackMethod()

   // Entered buildUnpackMethod()
   /**
    * This method unpacks a byte array containing a ImportSubType object.
    *
    * @return The byte array as a ImportSubType message object.
    */
   public ImportSubType unpack(byte[] ba) {
      final String METHOD = "unpack()";
      log4j.debug("Entered " + METHOD);

      ImportSubType importSubType = new ImportSubType();


      // Get the directory
      int directorySize = getImportSubTypeDirectorySize();
      theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
      int dirOffset = DIRECTORY_OFFSET;

      for (int entry = 0 ; entry < directorySize; entry++) {
         GreenballMessagesDirectoryEntry directoryEntry = new GreenballMessagesDirectoryEntry();

         int id = GreenballMessagesUtility.getInteger(ba, dirOffset * 8);
         directoryEntry.setId(id);
         int length = GreenballMessagesUtility.getInteger(ba, (dirOffset + 4) * 8);
         directoryEntry.setLength(length);
         int offset = GreenballMessagesUtility.getInteger(ba, (dirOffset + 8) * 8);
         directoryEntry.setOffset(offset);

         theDirectory[entry] = directoryEntry;

         dirOffset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      }

      for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
         int id = directoryEntry.getId();
         int offset = directoryEntry.getOffset();
         int length = directoryEntry.getLength();

         if (id == ImportSubTypeEnum.IMPORT_NAME_SPACE.getId()) {
            importSubType.setImportNameSpace(GreenballMessagesUtility.getString(ba, offset, length));
         }
      }

      log4j.debug("Leaving " + METHOD);
      return importSubType;
   }
   // Leaving buildUnpackMethod()

   /**
    * This method sets the importNameSpace attribute. Setting of this value is required.
    * @param importNameSpace The importNameSpace attribute.
    */
   public void setImportNameSpace(String importNameSpace) {
      this.importNameSpace = importNameSpace;
   }

   /**
    * This method gets the importNameSpace attribute. The importNameSpace attribute is a required attribute.
    */
   public String getImportNameSpace() {
      return this.importNameSpace;
   }

   /**
    * This method gets the size of the directory.
    */
   private int getImportSubTypeDirectorySize() {
      int directorySize = 0;

      // importNameSpace
      directorySize++;

      return directorySize;
   }


   /**
    * This method gets the size of the ImportSubType object.
    * @return The size in bytes.
    */
   public int getImportSubTypeSize() {
      int size = 0;

      int directorySize = getImportSubTypeDirectorySize();
      size += directorySize * GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      // Add size of importNameSpace
      size += (getImportNameSpace() != null ? getImportNameSpace().length() : 0);

      return size;
   }

   @Override
   public String toString() {
      StringBuilder result = new StringBuilder();
      String NEW_LINE = System.getProperty("line.separator");

      result.append(this.getClass().getSimpleName() + " Object {" + NEW_LINE);
      result.append(" importNameSpace: " + importNameSpace + NEW_LINE);

      result.append("} ");

      return result.toString();
   }

   /**
    * The hashCode method returns this object's hashCode.
    */
   @Override
   public int hashCode() {
      final int prime = 31;
      int result = 1;
      result = prime * result
         + ((String) importNameSpace).hashCode();
      return result;
   }

   /**
    * The equals method checks for equality. 
    */
   public boolean equals(Object obj) {
      if (obj == this) return true;
      if (obj == null) return false;
      if (getClass() != obj.getClass()) return false;

      ImportSubType importSubType = (ImportSubType) obj;
      if (!importSubType.getImportNameSpace().equals(this.getImportNameSpace())) {
         return false;
      }

      return true;
   }
}
