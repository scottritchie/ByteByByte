/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateClassFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
/**
 * The MetaModel1 class is a SubType referenced by message objects defined
 * by the GreenballMessages grammar.
 */
public class MetaModel1 {
   private static final int ID = GreenballMessagesEnum.META_MODEL1.getId();

   /**
    * The number of bits required to represent the MetaModel1Enum IDs.
    * # of attributes: 4
    * # of PEnumRefs: 0
    */
   private static final int ID_BITS = 2;

   private static GreenballMessagesDirectoryEntry[] theDirectory;
   private static final int DIRECTORY_OFFSET = 0;

   private static Logger log4j = Logger.getLogger(MetaModel1.class);

   // Entered buildClassEnum()
   private enum MetaModel1Enum {
      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      NAME(0, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      DATATYPE(1, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      INCLUDE(2, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      META_MODEL_ELEMENT(3, -1, 0, true);

      private final int id;
      private final int offsetInBits;
      private int length;
      private boolean isDirectoryEntry;

      MetaModel1Enum(int id, int offsetInBits, int length, boolean isDirectoryEntry) {
         this.id = id;
         this.offsetInBits = offsetInBits;
         this.length = length;
         this.isDirectoryEntry = isDirectoryEntry;
      }

      public int getId() {
         return this.id;
      }

      public int getOffsetInBits() {
         return this.offsetInBits;
      }

      public int getLength() {
         return this.length;
      }

      public void setLength(int length) {
         this.length = length;
      }
   } // Leaving buildClassEnum()

   /*
    * The instance variables.
    * See buildInstanceVariables() in JBitByBitGenerator.java.
    */
   private String name;
   private List<Datatype> datatype;
   private List<Include> include;
   private List<MetaModelElement> metaModelElement;

   private String theErrorMsg;

   /**
    * The MetaModel1 no-arg constructor.
    */
   public MetaModel1() {}

   /**
    * The MetaModel1 constructor.
    * See buildParameterAnnotations() in JBitByBitGenerator.java.
    *
    * @param name The name message attribute.
    * @param datatype The datatype message attribute.
    * @param include The include message attribute.
    * @param metaModelElement The metaModelElement message attribute.
    */
   public MetaModel1(String name, List<Datatype> datatype, List<Include> include, List<MetaModelElement> metaModelElement) {
      // Entered buildParameterAssignments()
      this.setName(name);
      this.setDatatype(datatype);
      this.setInclude(include);
      this.setMetaModelElement(metaModelElement);
      // Leaving buildParameterAssignments()
   }

   /**
    * The MetaModel1 copy constructor.
    */
   public MetaModel1(MetaModel1 metaModel1) {
      // Entered buildCopyConstructorParameterAssignments()
      this.setName(metaModel1.getName());
      for(Datatype tmpDatatype : metaModel1.getDatatype()) {
         this.getDatatype().add(new Datatype(tmpDatatype));
      }
      for(Include tmpInclude : metaModel1.getInclude()) {
         this.getInclude().add(new Include(tmpInclude));
      }
      for(MetaModelElement tmpMetaModelElement : metaModel1.getMetaModelElement()) {
         this.getMetaModelElement().add(new MetaModelElement(tmpMetaModelElement));
      }
      // Leaving buildCopyConstructorParameterAssignments()
   }

   // Entered buildSetErrorMsgMethod()
   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }
   // Leaving buildSetErrorMsgMethod()

   // Entered buildGetErrorMsgMethod()
   /**
    * This method returns the error message or null if no error
    * occurred.
    */
   public String getErrorMsg() {
      return theErrorMsg;
   }
   // Leaving buildGetErrorMsgMethod()

   // Entered buildPackMethod()
   /**
    * This method packs a MetaModel1 object into a byte array. If a required attribute is not
    * provided an exception will be thrown.
    *
    * @return A byte array which represents a MetaModel1 message object.
    * @throws MissingAttributeException
    */
   public byte[] pack() throws MissingAttributeException {
      final String METHOD = "pack()";
      log4j.debug("Entered " + METHOD);

      int byteArraySize = getMetaModel1Size();
      log4j.debug("byteArraySize: " + byteArraySize);
      byte[] bb = new byte[byteArraySize];

      /*
       * Convert object to byte array.
       */
      int offset = 0;


      MetaModel1Enum.NAME.setLength(this.getName().length());
      MetaModel1Enum.DATATYPE.setLength(this.getDatatype().size());
      MetaModel1Enum.INCLUDE.setLength(this.getInclude().size());
      MetaModel1Enum.META_MODEL_ELEMENT.setLength(this.getMetaModelElement().size());

      int directorySize = getMetaModel1DirectorySize();
      if (directorySize != 0) {
         // Create the directory
         theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
         for (int i = 0; i < directorySize; i++) {
            theDirectory[i] = new GreenballMessagesDirectoryEntry();
         }

         // Fill the directory
         int index = 0;
         offset = DIRECTORY_OFFSET
               + GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES
               * theDirectory.length;

         for (MetaModel1Enum metaModel1Enum : MetaModel1Enum.values()) {
            if (metaModel1Enum.isDirectoryEntry == true) {
               int id = metaModel1Enum.getId();
               int length = metaModel1Enum.getLength();

               theDirectory[index].setId(id);
               theDirectory[index].setLength(length);
               theDirectory[index].setOffset(offset);

               // Insert the data
               if (id == MetaModel1Enum.NAME.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "name", offset));
                  bb = GreenballMessagesUtility.insertString(bb, offset, getName());
                  offset += length * 1;
               }
               else if (id == MetaModel1Enum.DATATYPE.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "datatype", offset));
                  for (Datatype datatype : this.datatype) {
                     byte[] bytes = datatype.pack();
                     bb = GreenballMessagesUtility.insertBytes(bb, offset, bytes);

                     theDirectory[index].setId(id);
                     theDirectory[index].setLength(bytes.length);
                     theDirectory[index].setOffset(offset);

                     offset += bytes.length;
                     index++;
                  }
               }
               else if (id == MetaModel1Enum.INCLUDE.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "include", offset));
                  for (Include include : this.include) {
                     byte[] bytes = include.pack();
                     bb = GreenballMessagesUtility.insertBytes(bb, offset, bytes);

                     theDirectory[index].setId(id);
                     theDirectory[index].setLength(bytes.length);
                     theDirectory[index].setOffset(offset);

                     offset += bytes.length;
                     index++;
                  }
               }
               else if (id == MetaModel1Enum.META_MODEL_ELEMENT.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "metaModelElement", offset));
                  for (MetaModelElement metaModelElement : this.metaModelElement) {
                     byte[] bytes = metaModelElement.pack();
                     bb = GreenballMessagesUtility.insertBytes(bb, offset, bytes);

                     theDirectory[index].setId(id);
                     theDirectory[index].setLength(bytes.length);
                     theDirectory[index].setOffset(offset);

                     offset += bytes.length;
                     index++;
                  }
               }
               index++;
            }
         }

         // Insert the directory
         offset = DIRECTORY_OFFSET;
         for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
            bb = GreenballMessagesUtility.insertInteger(bb, offset, directoryEntry.getId());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 4, directoryEntry.getLength());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 8, directoryEntry.getOffset());

            offset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
            index++;
         }

      }
      log4j.debug("Leaving " + METHOD);
      return bb;
   }
   // Leaving buildPackMethod()

   // Entered buildUnpackMethod()
   /**
    * This method unpacks a byte array containing a MetaModel1 object.
    *
    * @return The byte array as a MetaModel1 message object.
    */
   public MetaModel1 unpack(byte[] ba) {
      final String METHOD = "unpack()";
      log4j.debug("Entered " + METHOD);

      MetaModel1 metaModel1 = new MetaModel1();


      // Get the directory
      int directorySize = getMetaModel1DirectorySize();
      theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
      int dirOffset = DIRECTORY_OFFSET;

      for (int entry = 0 ; entry < directorySize; entry++) {
         GreenballMessagesDirectoryEntry directoryEntry = new GreenballMessagesDirectoryEntry();

         int id = GreenballMessagesUtility.getInteger(ba, dirOffset * 8);
         directoryEntry.setId(id);
         int length = GreenballMessagesUtility.getInteger(ba, (dirOffset + 4) * 8);
         directoryEntry.setLength(length);
         int offset = GreenballMessagesUtility.getInteger(ba, (dirOffset + 8) * 8);
         directoryEntry.setOffset(offset);

         theDirectory[entry] = directoryEntry;

         dirOffset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      }

      for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
         int id = directoryEntry.getId();
         int offset = directoryEntry.getOffset();
         int length = directoryEntry.getLength();

         if (id == MetaModel1Enum.NAME.getId()) {
            metaModel1.setName(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == MetaModel1Enum.DATATYPE.getId()) {
            byte[] bytes = new byte[length];
            for (int index = 0; index < length; index++) {
               bytes[index] = GreenballMessagesUtility.getByte(ba, (offset + index) * 8);
            }
            metaModel1.getDatatype().add(new Datatype().unpack(bytes));
         }
         else if (id == MetaModel1Enum.INCLUDE.getId()) {
            byte[] bytes = new byte[length];
            for (int index = 0; index < length; index++) {
               bytes[index] = GreenballMessagesUtility.getByte(ba, (offset + index) * 8);
            }
            metaModel1.getInclude().add(new Include().unpack(bytes));
         }
         else if (id == MetaModel1Enum.META_MODEL_ELEMENT.getId()) {
            byte[] bytes = new byte[length];
            for (int index = 0; index < length; index++) {
               bytes[index] = GreenballMessagesUtility.getByte(ba, (offset + index) * 8);
            }
            metaModel1.getMetaModelElement().add(new MetaModelElement().unpack(bytes));
         }
      }

      log4j.debug("Leaving " + METHOD);
      return metaModel1;
   }
   // Leaving buildUnpackMethod()

   /**
    * This method sets the name attribute. Setting of this value is required.
    * @param name The name attribute.
    */
   public void setName(String name) {
      this.name = name;
   }

   /**
    * This method gets the name attribute. The name attribute is a required attribute.
    */
   public String getName() {
      return this.name;
   }

   /**
    * This method sets the datatype attribute. Setting of this value is required.
    * @param datatype The datatype.
    */
   public void setDatatype(List<Datatype> datatype) {
      this.datatype = datatype;
   }

   /**
    * This method sets the include attribute. Setting of this value is required.
    * @param include The include.
    */
   public void setInclude(List<Include> include) {
      this.include = include;
   }

   /**
    * This method sets the metaModelElement attribute. Setting of this value is required.
    * @param metaModelElement The metaModelElement.
    */
   public void setMetaModelElement(List<MetaModelElement> metaModelElement) {
      this.metaModelElement = metaModelElement;
   }

   /**
    * This method gets the datatype attribute. The datatype attribute is a required attribute.
    */
   public List<Datatype> getDatatype() {
      if (this.datatype == null) {
         this.datatype = new ArrayList<Datatype>();
      }
      return this.datatype;
   }

   /**
    * This method gets the include attribute. The include attribute is a required attribute.
    */
   public List<Include> getInclude() {
      if (this.include == null) {
         this.include = new ArrayList<Include>();
      }
      return this.include;
   }

   /**
    * This method gets the metaModelElement attribute. The metaModelElement attribute is a required attribute.
    */
   public List<MetaModelElement> getMetaModelElement() {
      if (this.metaModelElement == null) {
         this.metaModelElement = new ArrayList<MetaModelElement>();
      }
      return this.metaModelElement;
   }

   /**
    * This method gets the size of the directory.
    */
   private int getMetaModel1DirectorySize() {
      int directorySize = 0;

      // name
      directorySize++;
      // datatype
      directorySize += getDatatype().size();
      // include
      directorySize += getInclude().size();
      // metaModelElement
      directorySize += getMetaModelElement().size();

      return directorySize;
   }


   /**
    * This method gets the size of the MetaModel1 object.
    * @return The size in bytes.
    */
   public int getMetaModel1Size() {
      int size = 0;

      int directorySize = getMetaModel1DirectorySize();
      size += directorySize * GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      // Add size of name
      size += (getName() != null ? getName().length() : 0);
      // Add size of datatype
      for (Datatype datatype: getDatatype()) {
         size += datatype.getDatatypeSize();
      }
      // Add size of include
      for (Include include: getInclude()) {
         size += include.getIncludeSize();
      }
      // Add size of metaModelElement
      for (MetaModelElement metaModelElement: getMetaModelElement()) {
         size += metaModelElement.getMetaModelElementSize();
      }

      return size;
   }

   @Override
   public String toString() {
      StringBuilder result = new StringBuilder();
      String NEW_LINE = System.getProperty("line.separator");

      result.append(this.getClass().getSimpleName() + " Object {" + NEW_LINE);
      result.append(" name: " + name + NEW_LINE);

      if (datatype != null) {
         for (Datatype datatypeDatatype : datatype) {
            result.append(datatypeDatatype.toString());
         }
      }

      if (include != null) {
         for (Include includeInclude : include) {
            result.append(includeInclude.toString());
         }
      }

      if (metaModelElement != null) {
         for (MetaModelElement metaModelElementMetaModelElement : metaModelElement) {
            result.append(metaModelElementMetaModelElement.toString());
         }
      }

      result.append("} ");

      return result.toString();
   }

   /**
    * The hashCode method returns this object's hashCode.
    */
   @Override
   public int hashCode() {
      final int prime = 31;
      int result = 1;
      result = prime * result
         + ((String) name).hashCode();
      return result;
   }

   /**
    * The equals method checks for equality. 
    */
   public boolean equals(Object obj) {
      if (obj == this) return true;
      if (obj == null) return false;
      if (getClass() != obj.getClass()) return false;

      MetaModel1 metaModel1 = (MetaModel1) obj;
      if (!metaModel1.getName().equals(this.getName())) {
         return false;
      }

      return true;
   }
}
