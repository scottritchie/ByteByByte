/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateInstantiationFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

public class InstantiateAddOrganization {
   private static Logger log4j = Logger.getLogger(InstantiateAddOrganization.class);

   /*
    * The isUpdated flags. If an attribute is required by the grammar then a value
    * must be provided, and the isUpdated flag will be set when the value is
    * obtained during unpacking. After the object is constructed during unpacking, 
    * validation will be performed to make sure a value was provided for all attributes
    * that are not optional. 
    * See buildFlags() in JBitByBitGenerator.java.
    */
   private boolean isOrganizationUpdated = false;
   private boolean isUserNameUpdated = false;

   private Element element;
   private AddOrganization addOrganization;

   /**
    * The InstantiateAddOrganization class instantiates the AddOrganization object.
    *
    * @param element The root element returned by the parser after parsing the string
    *                representing the AddOrganization.
    */
   public InstantiateAddOrganization(Element element) {
      this.element = element;   
      this.addOrganization = new AddOrganization();
   }

   /**
    * This method instantiates the AddOrganization.
    *
    * @return The AddOrganization.
    */
   public AddOrganization instantiate() {
      final String METHOD = "instantiate()";
      log4j.debug("Entered " + METHOD);

      log4j.debug("AddOrganization: " + element.getName());
      log4j.debug("# of attributes: " + element.getAbstractAttributes().size());

      instantiateAddOrganizationAttributes(element);

      for (AbstractAttribute abstractAttribute : element
            .getAbstractAttributes()) {
         for (Element e : abstractAttribute.getElements()) {
            log4j.debug("element name: " + e.getName());
      instantiateAddOrganizationSubTypeRefs(e);
      }
      }

      log4j.debug("Leaving " + METHOD);
      return addOrganization;
      }

      /*
       * This method instantiates the AddOrganization attributes.
       * 
       * @param Element element
       */
      private void instantiateAddOrganizationAttributes(Element element) {
      final String METHOD = "instantiateAddOrganizationAttributes()";
      log4j.debug("Entered " + METHOD);

      log4j.debug("element name: " + element.getName());
      for (AbstractAttribute attr : element.getAbstractAttributes()) {
         for (KeyValuePair kvp : attr.getKeyValuePairs()) {
            log4j.debug("key: " + kvp.getKey());
            log4j.debug("value: " + kvp.getValue());
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("userName")) {
               log4j.debug("setting value of \"userName\" to: " + kvp.getValue());
               this.isUserNameUpdated = true;
               addOrganization.setUserName(kvp.getValue());
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("sessionId")) {
               log4j.debug("setting value of \"sessionId\" to: " + kvp.getValue());
               addOrganization.setSessionId(kvp.getValue());
            }
            // Leaving instantiateMsgAttribute()
         }
      }

      log4j.debug("Leaving " + METHOD);
   }

   /*
    * This method instantiates the AddOrganization SubType references.
    * 
    * @param Element element
    */
   private void instantiateAddOrganizationSubTypeRefs(Element element) {
      final String METHOD = "instantiateAddOrganizationSubTypeRefs()";
      log4j.debug("Entered " + METHOD);

            // Entered instantiateMessageSubTypeRef()
      if (element.getName().equals("organization")) {
         log4j.debug("found element: organization");
         this.isOrganizationUpdated = true;
         instantiateOrganization(element);
         return;
      }
      // Leaving instantiateMessageSubTypeRef()


      log4j.debug("Leaving " + METHOD);
   }

/*
 * This method instantiates the organization attribute.
 * @param Element element
 */
private void instantiateOrganization(Element element) {
      // Entered instantiateSubTypeRef()
   final String METHOD = "instantiateOrganization()";
   log4j.debug("Entered " + METHOD);

   InstantiateOrganizationSubType instantiateOrganizationSubType = new InstantiateOrganizationSubType(element);
   addOrganization.setOrganization(instantiateOrganizationSubType.instantiate());

   log4j.debug("Leaving " + METHOD);
   // Leaving instantiateSubTypeRef()
}

   /**
    * The validate method checks that a value was provided for all required 
    * attributes.
    *
    * @return The error message or null if no error occurred.
    */
   protected String validate() {
      final String METHOD = "validate()";
      log4j.debug("Entered " + METHOD);

      String result = null;

      // Entered buildValidationMethod()
      if (!this.isOrganizationUpdated) {
         String msg = "Organization is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
      }

      if (!this.isUserNameUpdated) {
         String msg = "UserName is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }


      if (result != null) {
         log4j.debug("result: " + result);
      }

      log4j.debug("Leaving " + METHOD);
      return result;
   }
}
