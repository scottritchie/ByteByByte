/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateClassFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
/**
 * The SubscriptionRequestSubType class is a SubType referenced by message objects defined
 * by the GreenballMessages grammar.
 */
public class SubscriptionRequestSubType {
   private static final int ID = GreenballMessagesEnum.SUBSCRIPTION_REQUEST_SUB_TYPE.getId();

   /**
    * The number of bits required to represent the SubscriptionRequestSubTypeEnum IDs.
    * # of attributes: 6
    * # of PEnumRefs: 0
    */
   private static final int ID_BITS = 3;

   private static GreenballMessagesDirectoryEntry[] theDirectory;
   private static final int DIRECTORY_OFFSET = 8;

   private static Logger log4j = Logger.getLogger(SubscriptionRequestSubType.class);

   // Entered buildClassEnum()
   private enum SubscriptionRequestSubTypeEnum {
      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      ORG_ID(0, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      ORG_NAME(1, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      REQUESTOR(2, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      MESSAGE(3, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      OWNER(4, -1, 0, true),

      // sizeInBits: 64
      TIMESTAMP(5, 3, 0, false);

      private final int id;
      private final int offsetInBits;
      private int length;
      private boolean isDirectoryEntry;

      SubscriptionRequestSubTypeEnum(int id, int offsetInBits, int length, boolean isDirectoryEntry) {
         this.id = id;
         this.offsetInBits = offsetInBits;
         this.length = length;
         this.isDirectoryEntry = isDirectoryEntry;
      }

      public int getId() {
         return this.id;
      }

      public int getOffsetInBits() {
         return this.offsetInBits;
      }

      public int getLength() {
         return this.length;
      }

      public void setLength(int length) {
         this.length = length;
      }
   } // Leaving buildClassEnum()

   /*
    * The instance variables.
    * See buildInstanceVariables() in JBitByBitGenerator.java.
    */
   private String orgId;
   private String orgName;
   private String requestor;
   private String message;
   private String owner;
   private long timestamp;

   private String theErrorMsg;

   /**
    * The SubscriptionRequestSubType no-arg constructor.
    */
   public SubscriptionRequestSubType() {}

   /**
    * The SubscriptionRequestSubType constructor.
    * See buildParameterAnnotations() in JBitByBitGenerator.java.
    *
    * @param orgId The orgId message attribute.
    * @param orgName The orgName message attribute.
    * @param requestor The requestor message attribute.
    * @param message The message message attribute.
    * @param owner The owner message attribute.
    * @param timestamp The timestamp message attribute.
    */
   public SubscriptionRequestSubType(String orgId,
                                     String orgName,
                                     String requestor,
                                     String message,
                                     String owner,
                                     Long timestamp) {
      // Entered buildParameterAssignments()
      this.setOrgId(orgId);
      this.setOrgName(orgName);
      this.setRequestor(requestor);
      this.setMessage(message);
      this.setOwner(owner);
      this.setTimestamp(timestamp);
      // Leaving buildParameterAssignments()
   }

   /**
    * The SubscriptionRequestSubType copy constructor.
    */
   public SubscriptionRequestSubType(SubscriptionRequestSubType subscriptionRequestSubType) {
      // Entered buildCopyConstructorParameterAssignments()
      this.setOrgId(subscriptionRequestSubType.getOrgId());
      this.setOrgName(subscriptionRequestSubType.getOrgName());
      this.setRequestor(subscriptionRequestSubType.getRequestor());
      this.setMessage(subscriptionRequestSubType.getMessage());
      this.setOwner(subscriptionRequestSubType.getOwner());
      this.setTimestamp(subscriptionRequestSubType.getTimestamp());
      // Leaving buildCopyConstructorParameterAssignments()
   }

   // Entered buildSetErrorMsgMethod()
   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }
   // Leaving buildSetErrorMsgMethod()

   // Entered buildGetErrorMsgMethod()
   /**
    * This method returns the error message or null if no error
    * occurred.
    */
   public String getErrorMsg() {
      return theErrorMsg;
   }
   // Leaving buildGetErrorMsgMethod()

   // Entered buildPackMethod()
   /**
    * This method packs a SubscriptionRequestSubType object into a byte array. If a required attribute is not
    * provided an exception will be thrown.
    *
    * @return A byte array which represents a SubscriptionRequestSubType message object.
    * @throws MissingAttributeException
    */
   public byte[] pack() throws MissingAttributeException {
      final String METHOD = "pack()";
      log4j.debug("Entered " + METHOD);

      int byteArraySize = getSubscriptionRequestSubTypeSize();
      log4j.debug("byteArraySize: " + byteArraySize);
      byte[] bb = new byte[byteArraySize];

      /*
       * Convert object to byte array.
       */
      int offset = 0;

      if (this.getTimestamp() != null) {
         bb = GreenballMessagesUtility.insertLong(bb, offset, this.getTimestamp());
         offset += 8;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"timestamp\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }


      SubscriptionRequestSubTypeEnum.ORG_ID.setLength(this.getOrgId().length());
      SubscriptionRequestSubTypeEnum.ORG_NAME.setLength(this.getOrgName().length());
      SubscriptionRequestSubTypeEnum.REQUESTOR.setLength(this.getRequestor().length());
      SubscriptionRequestSubTypeEnum.MESSAGE.setLength(this.getMessage().length());
      SubscriptionRequestSubTypeEnum.OWNER.setLength(this.getOwner().length());

      int directorySize = getSubscriptionRequestSubTypeDirectorySize();
      if (directorySize != 0) {
         // Create the directory
         theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
         for (int i = 0; i < directorySize; i++) {
            theDirectory[i] = new GreenballMessagesDirectoryEntry();
         }

         // Fill the directory
         int index = 0;
         offset = DIRECTORY_OFFSET
               + GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES
               * theDirectory.length;

         for (SubscriptionRequestSubTypeEnum subscriptionRequestSubTypeEnum : SubscriptionRequestSubTypeEnum.values()) {
            if (subscriptionRequestSubTypeEnum.isDirectoryEntry == true) {
               int id = subscriptionRequestSubTypeEnum.getId();
               int length = subscriptionRequestSubTypeEnum.getLength();

               theDirectory[index].setId(id);
               theDirectory[index].setLength(length);
               theDirectory[index].setOffset(offset);

               // Insert the data
               if (id == SubscriptionRequestSubTypeEnum.ORG_ID.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "orgId", offset));
                  bb = GreenballMessagesUtility.insertString(bb, offset, getOrgId());
                  offset += length * 1;
               }
               else if (id == SubscriptionRequestSubTypeEnum.ORG_NAME.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "orgName", offset));
                  bb = GreenballMessagesUtility.insertString(bb, offset, getOrgName());
                  offset += length * 1;
               }
               else if (id == SubscriptionRequestSubTypeEnum.REQUESTOR.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "requestor", offset));
                  bb = GreenballMessagesUtility.insertString(bb, offset, getRequestor());
                  offset += length * 1;
               }
               else if (id == SubscriptionRequestSubTypeEnum.MESSAGE.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "message", offset));
                  bb = GreenballMessagesUtility.insertString(bb, offset, getMessage());
                  offset += length * 1;
               }
               else if (id == SubscriptionRequestSubTypeEnum.OWNER.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "owner", offset));
                  bb = GreenballMessagesUtility.insertString(bb, offset, getOwner());
                  offset += length * 1;
               }
               index++;
            }
         }

         // Insert the directory
         offset = DIRECTORY_OFFSET;
         for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
            bb = GreenballMessagesUtility.insertInteger(bb, offset, directoryEntry.getId());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 4, directoryEntry.getLength());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 8, directoryEntry.getOffset());

            offset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
            index++;
         }

      }
      log4j.debug("Leaving " + METHOD);
      return bb;
   }
   // Leaving buildPackMethod()

   // Entered buildUnpackMethod()
   /**
    * This method unpacks a byte array containing a SubscriptionRequestSubType object.
    *
    * @return The byte array as a SubscriptionRequestSubType message object.
    */
   public SubscriptionRequestSubType unpack(byte[] ba) {
      final String METHOD = "unpack()";
      log4j.debug("Entered " + METHOD);

      SubscriptionRequestSubType subscriptionRequestSubType = new SubscriptionRequestSubType();

      subscriptionRequestSubType.setTimestamp(GreenballMessagesUtility.getLong(ba, SubscriptionRequestSubTypeEnum.TIMESTAMP.getOffsetInBits()));

      // Get the directory
      int directorySize = getSubscriptionRequestSubTypeDirectorySize();
      theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
      int dirOffset = DIRECTORY_OFFSET;

      for (int entry = 0 ; entry < directorySize; entry++) {
         GreenballMessagesDirectoryEntry directoryEntry = new GreenballMessagesDirectoryEntry();

         int id = GreenballMessagesUtility.getInteger(ba, dirOffset * 8);
         directoryEntry.setId(id);
         int length = GreenballMessagesUtility.getInteger(ba, (dirOffset + 4) * 8);
         directoryEntry.setLength(length);
         int offset = GreenballMessagesUtility.getInteger(ba, (dirOffset + 8) * 8);
         directoryEntry.setOffset(offset);

         theDirectory[entry] = directoryEntry;

         dirOffset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      }

      for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
         int id = directoryEntry.getId();
         int offset = directoryEntry.getOffset();
         int length = directoryEntry.getLength();

         if (id == SubscriptionRequestSubTypeEnum.ORG_ID.getId()) {
            subscriptionRequestSubType.setOrgId(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == SubscriptionRequestSubTypeEnum.ORG_NAME.getId()) {
            subscriptionRequestSubType.setOrgName(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == SubscriptionRequestSubTypeEnum.REQUESTOR.getId()) {
            subscriptionRequestSubType.setRequestor(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == SubscriptionRequestSubTypeEnum.MESSAGE.getId()) {
            subscriptionRequestSubType.setMessage(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == SubscriptionRequestSubTypeEnum.OWNER.getId()) {
            subscriptionRequestSubType.setOwner(GreenballMessagesUtility.getString(ba, offset, length));
         }
      }

      log4j.debug("Leaving " + METHOD);
      return subscriptionRequestSubType;
   }
   // Leaving buildUnpackMethod()

   /**
    * This method sets the orgId attribute. Setting of this value is required.
    * @param orgId The orgId attribute.
    */
   public void setOrgId(String orgId) {
      this.orgId = orgId;
   }

   /**
    * This method sets the orgName attribute. Setting of this value is required.
    * @param orgName The orgName attribute.
    */
   public void setOrgName(String orgName) {
      this.orgName = orgName;
   }

   /**
    * This method sets the requestor attribute. Setting of this value is required.
    * @param requestor The requestor attribute.
    */
   public void setRequestor(String requestor) {
      this.requestor = requestor;
   }

   /**
    * This method sets the message attribute. Setting of this value is required.
    * @param message The message attribute.
    */
   public void setMessage(String message) {
      this.message = message;
   }

   /**
    * This method sets the owner attribute. Setting of this value is required.
    * @param owner The owner attribute.
    */
   public void setOwner(String owner) {
      this.owner = owner;
   }

   /**
    * This method sets the timestamp attribute. Setting of this value is required.
    * @param timestamp The timestamp attribute.
    */
   public void setTimestamp(Long timestamp) {
      this.timestamp = timestamp;
   }

   /**
    * This method gets the orgId attribute. The orgId attribute is a required attribute.
    */
   public String getOrgId() {
      return this.orgId;
   }

   /**
    * This method gets the orgName attribute. The orgName attribute is a required attribute.
    */
   public String getOrgName() {
      return this.orgName;
   }

   /**
    * This method gets the requestor attribute. The requestor attribute is a required attribute.
    */
   public String getRequestor() {
      return this.requestor;
   }

   /**
    * This method gets the message attribute. The message attribute is a required attribute.
    */
   public String getMessage() {
      return this.message;
   }

   /**
    * This method gets the owner attribute. The owner attribute is a required attribute.
    */
   public String getOwner() {
      return this.owner;
   }

   /**
    * This method gets the timestamp attribute. The timestamp attribute is a required attribute.
    */
   public Long getTimestamp() {
      return this.timestamp;
   }

   /**
    * This method gets the size of the directory.
    */
   private int getSubscriptionRequestSubTypeDirectorySize() {
      int directorySize = 0;

      // orgId
      directorySize++;
      // orgName
      directorySize++;
      // requestor
      directorySize++;
      // message
      directorySize++;
      // owner
      directorySize++;

      return directorySize;
   }


   /**
    * This method gets the size of the SubscriptionRequestSubType object.
    * @return The size in bytes.
    */
   public int getSubscriptionRequestSubTypeSize() {
      int size = 0;

      int directorySize = getSubscriptionRequestSubTypeDirectorySize();
      size += directorySize * GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      // Add size of orgId
      size += (getOrgId() != null ? getOrgId().length() : 0);
      // Add size of orgName
      size += (getOrgName() != null ? getOrgName().length() : 0);
      // Add size of requestor
      size += (getRequestor() != null ? getRequestor().length() : 0);
      // Add size of message
      size += (getMessage() != null ? getMessage().length() : 0);
      // Add size of owner
      size += (getOwner() != null ? getOwner().length() : 0);
      // Add size of timestamp
      size += 8;

      return size;
   }

   @Override
   public String toString() {
      StringBuilder result = new StringBuilder();
      String NEW_LINE = System.getProperty("line.separator");

      result.append(this.getClass().getSimpleName() + " Object {" + NEW_LINE);
      result.append(" orgId: " + orgId + NEW_LINE);
      result.append(" orgName: " + orgName + NEW_LINE);
      result.append(" requestor: " + requestor + NEW_LINE);
      result.append(" message: " + message + NEW_LINE);
      result.append(" owner: " + owner + NEW_LINE);
      result.append(" timestamp: " + timestamp + NEW_LINE);

      result.append("} ");

      return result.toString();
   }

   /**
    * The hashCode method returns this object's hashCode.
    */
   @Override
   public int hashCode() {
      final int prime = 31;
      int result = 1;
      result = prime * result
         + ((String) orgId).hashCode();
      result = prime * result
         + ((String) orgName).hashCode();
      result = prime * result
         + ((String) requestor).hashCode();
      result = prime * result
         + ((String) message).hashCode();
      result = prime * result
         + ((String) owner).hashCode();
      result = prime * result
         + ((Long) timestamp).hashCode();
      return result;
   }

   /**
    * The equals method checks for equality. 
    */
   public boolean equals(Object obj) {
      if (obj == this) return true;
      if (obj == null) return false;
      if (getClass() != obj.getClass()) return false;

      SubscriptionRequestSubType subscriptionRequestSubType = (SubscriptionRequestSubType) obj;
      if (!subscriptionRequestSubType.getOrgId().equals(this.getOrgId())) {
         return false;
      }

      if (!subscriptionRequestSubType.getOrgName().equals(this.getOrgName())) {
         return false;
      }

      if (!subscriptionRequestSubType.getRequestor().equals(this.getRequestor())) {
         return false;
      }

      if (!subscriptionRequestSubType.getMessage().equals(this.getMessage())) {
         return false;
      }

      if (!subscriptionRequestSubType.getOwner().equals(this.getOwner())) {
         return false;
      }

      if (subscriptionRequestSubType.getTimestamp() != this.getTimestamp()) {
         return false;
      }

      return true;
   }
}
