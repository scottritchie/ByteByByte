/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateInstantiationFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

public class InstantiateChat {
   private static Logger log4j = Logger.getLogger(InstantiateChat.class);

   /*
    * The isUpdated flags. If an attribute is required by the grammar then a value
    * must be provided, and the isUpdated flag will be set when the value is
    * obtained during unpacking. After the object is constructed during unpacking, 
    * validation will be performed to make sure a value was provided for all attributes
    * that are not optional. 
    * See buildFlags() in JBitByBitGenerator.java.
    */
   private boolean isUserUpdated = false;
   private boolean isMsgUpdated = false;
   private boolean isDud1Updated = false;
   private boolean isDud2Updated = false;
   private boolean isDud3Updated = false;
   private boolean isDud4Updated = false;
   private boolean isDud5Updated = false;
   private boolean isDud6Updated = false;
   private boolean isDud7Updated = false;
   private boolean isTimestampUpdated = false;
   private boolean isSomeBooleansUpdated = false;
   private boolean isSomeBytesUpdated = false;
   private boolean isSomeCharsUpdated = false;
   private boolean isSomeIntsUpdated = false;
   private boolean isSomeFloatsUpdated = false;
   private boolean isSomeLongsUpdated = false;
   private boolean isSomeShortsUpdated = false;
   private boolean isSomeStringsUpdated = false;
   private boolean isSomeDoublesUpdated = false;
   private boolean isVariablesUpdated = false;
   private boolean isActionUpdated = false;

   private Element element;
   private Chat chat;

   /**
    * The InstantiateChat class instantiates the Chat object.
    *
    * @param element The root element returned by the parser after parsing the string
    *                representing the Chat.
    */
   public InstantiateChat(Element element) {
      this.element = element;   
      this.chat = new Chat();
   }

   /**
    * This method instantiates the Chat.
    *
    * @return The Chat.
    */
   public Chat instantiate() {
      final String METHOD = "instantiate()";
      log4j.debug("Entered " + METHOD);

      log4j.debug("Chat: " + element.getName());
      log4j.debug("# of attributes: " + element.getAbstractAttributes().size());

      instantiateChatAttributes(element);

      for (AbstractAttribute abstractAttribute : element
            .getAbstractAttributes()) {
         for (Element e : abstractAttribute.getElements()) {
            log4j.debug("element name: " + e.getName());
      instantiateChatSubTypeRefs(e);
      }
      }

      log4j.debug("Leaving " + METHOD);
      return chat;
      }

      /*
       * This method instantiates the Chat attributes.
       * 
       * @param Element element
       */
      private void instantiateChatAttributes(Element element) {
      final String METHOD = "instantiateChatAttributes()";
      log4j.debug("Entered " + METHOD);

      log4j.debug("element name: " + element.getName());
      for (AbstractAttribute attr : element.getAbstractAttributes()) {
         for (KeyValuePair kvp : attr.getKeyValuePairs()) {
            log4j.debug("key: " + kvp.getKey());
            log4j.debug("value: " + kvp.getValue());
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("user")) {
               log4j.debug("setting value of \"user\" to: " + kvp.getValue());
               this.isUserUpdated = true;
               chat.setUser(kvp.getValue());
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("msg")) {
               log4j.debug("setting value of \"msg\" to: " + kvp.getValue());
               this.isMsgUpdated = true;
               chat.setMsg(kvp.getValue());
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("dud1")) {
               log4j.debug("setting value of \"dud1\" to: " + kvp.getValue());
               this.isDud1Updated = true;
               chat.setDud1(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("dud2")) {
               log4j.debug("setting value of \"dud2\" to: " + kvp.getValue());
               this.isDud2Updated = true;
               chat.setDud2(Float.parseFloat(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("dud3")) {
               log4j.debug("setting value of \"dud3\" to: " + kvp.getValue());
               this.isDud3Updated = true;
               chat.setDud3(Double.parseDouble(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("dud4")) {
               log4j.debug("setting value of \"dud4\" to: " + kvp.getValue());
               this.isDud4Updated = true;
               chat.setDud4(kvp.getValue().charAt(0));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("dud5")) {
               log4j.debug("setting value of \"dud5\" to: " + kvp.getValue());
               this.isDud5Updated = true;
               chat.setDud5(kvp.getValue().equals("true"));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("dud6")) {
               log4j.debug("setting value of \"dud6\" to: " + kvp.getValue());
               this.isDud6Updated = true;
               chat.setDud6(Byte.parseByte(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("dud7")) {
               log4j.debug("setting value of \"dud7\" to: " + kvp.getValue());
               this.isDud7Updated = true;
               Date date;
               try {
                  SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
                  date = formatter.parse(kvp.getValue());
                  Calendar cal = Calendar.getInstance();
                  cal.setTime(date);
               chat.setDud7(cal);
               } catch (ParseException ex) {
                  log4j.error("Invalid date format: " + kvp.getValue());
               }
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttribute()
            if (kvp.getKey().equals("timestamp")) {
               log4j.debug("setting value of \"timestamp\" to: " + kvp.getValue());
               this.isTimestampUpdated = true;
               chat.setTimestamp(Long.parseLong(kvp.getValue()));
            }
            // Leaving instantiateMsgAttribute()
            // Entered instantiateMsgAttributeList()
            if (kvp.getKey().startsWith("someBooleans[")) {
               this.isSomeBooleansUpdated = true;
               if(chat.getSomeBooleans() == null) {
               chat.setSomeBooleans(new ArrayList<Boolean>());
               }
               chat.getSomeBooleans().add(kvp.getValue().equals("true"));
            }
            // Leaving instantiateMsgAttributeList()
            // Entered instantiateMsgAttributeList()
            if (kvp.getKey().startsWith("someBytes[")) {
               this.isSomeBytesUpdated = true;
               if(chat.getSomeBytes() == null) {
               chat.setSomeBytes(new ArrayList<Byte>());
               }
               chat.getSomeBytes().add(Byte.parseByte(kvp.getValue()));
            }
            // Leaving instantiateMsgAttributeList()
            // Entered instantiateMsgAttributeList()
            if (kvp.getKey().startsWith("someChars[")) {
               this.isSomeCharsUpdated = true;
               if(chat.getSomeChars() == null) {
               chat.setSomeChars(new ArrayList<Character>());
               }
               chat.getSomeChars().add(kvp.getValue().toCharArray()[0]);
            }
            // Leaving instantiateMsgAttributeList()
            // Entered instantiateMsgAttributeList()
            if (kvp.getKey().startsWith("someInts[")) {
               this.isSomeIntsUpdated = true;
               if(chat.getSomeInts() == null) {
               chat.setSomeInts(new ArrayList<Integer>());
               }
               chat.getSomeInts().add(Integer.parseInt(kvp.getValue()));
            }
            // Leaving instantiateMsgAttributeList()
            // Entered instantiateMsgAttributeList()
            if (kvp.getKey().startsWith("someFloats[")) {
               this.isSomeFloatsUpdated = true;
               if(chat.getSomeFloats() == null) {
               chat.setSomeFloats(new ArrayList<Float>());
               }
               chat.getSomeFloats().add(Float.parseFloat(kvp.getValue()));
            }
            // Leaving instantiateMsgAttributeList()
            // Entered instantiateMsgAttributeList()
            if (kvp.getKey().startsWith("someLongs[")) {
               this.isSomeLongsUpdated = true;
               if(chat.getSomeLongs() == null) {
               chat.setSomeLongs(new ArrayList<Long>());
               }
               chat.getSomeLongs().add(Long.parseLong(kvp.getValue()));
            }
            // Leaving instantiateMsgAttributeList()
            // Entered instantiateMsgAttributeList()
            if (kvp.getKey().startsWith("someShorts[")) {
               this.isSomeShortsUpdated = true;
               if(chat.getSomeShorts() == null) {
               chat.setSomeShorts(new ArrayList<Short>());
               }
               chat.getSomeShorts().add(Short.parseShort(kvp.getValue()));
            }
            // Leaving instantiateMsgAttributeList()
            // Entered instantiateMsgAttributeList()
            if (kvp.getKey().startsWith("someStrings[")) {
               this.isSomeStringsUpdated = true;
               if(chat.getSomeStrings() == null) {
               chat.setSomeStrings(new ArrayList<String>());
               }
               chat.getSomeStrings().add(kvp.getValue());
            }
            // Leaving instantiateMsgAttributeList()
            // Entered instantiateMsgAttributeList()
            if (kvp.getKey().startsWith("someDoubles[")) {
               this.isSomeDoublesUpdated = true;
               if(chat.getSomeDoubles() == null) {
               chat.setSomeDoubles(new ArrayList<Double>());
               }
               chat.getSomeDoubles().add(Double.parseDouble(kvp.getValue()));
            }
            // Leaving instantiateMsgAttributeList()
                        // Entered instantiatePEnumRef()
            if (kvp.getKey().equals("action")) {
            this.isActionUpdated = true;
            log4j.debug("setting value of \"action\" to: " + kvp.getValue());
            chat.setAction(ChatAction.valueOf(kvp.getValue()));
            //this.action = ChatAction.valueOf(kvp.getValue());
            }
            // Leaving instantiatePEnumRef()

         }
      }

      log4j.debug("Leaving " + METHOD);
   }

   /*
    * This method instantiates the Chat SubType references.
    * 
    * @param Element element
    */
   private void instantiateChatSubTypeRefs(Element element) {
      final String METHOD = "instantiateChatSubTypeRefs()";
      log4j.debug("Entered " + METHOD);

      // Entered instantiateMessageSubTypeRefList()
      if (element.getName().startsWith("variables[")) {
         log4j.debug("found element: variables");
         this.isVariablesUpdated = true;
         instantiateVariables(element);
         return;
      }
      // Leaving instantiateMessageSubTypeRefList()


      log4j.debug("Leaving " + METHOD);
   }

/*
 * This method instantiates the variables attribute which is a list of Variable
 * @param Element element
 */
private void instantiateVariables(Element element) {
      // Entered instantiateSubTypeRefList()
   final String METHOD = "instantiateVariables()";
   log4j.debug("Entered " + METHOD);

   if (chat.getVariables() == null) {
   chat.setVariables(new ArrayList<Variable>());
   }

   InstantiateVariable instantiateVariable = new InstantiateVariable(element);
   Variable variable = instantiateVariable.instantiate();
   chat.getVariables().add(variable);
   log4j.debug("Leaving " + METHOD);
   // Leaving instantiateSubTypeRefList()
}

   /**
    * The validate method checks that a value was provided for all required 
    * attributes.
    *
    * @return The error message or null if no error occurred.
    */
   protected String validate() {
      final String METHOD = "validate()";
      log4j.debug("Entered " + METHOD);

      String result = null;

      // Entered buildValidationMethod()
      if (!this.isUserUpdated) {
         String msg = "User is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
      }

      if (!this.isMsgUpdated) {
         String msg = "Msg is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isDud1Updated) {
         String msg = "Dud1 is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isDud2Updated) {
         String msg = "Dud2 is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isDud3Updated) {
         String msg = "Dud3 is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isDud4Updated) {
         String msg = "Dud4 is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isDud5Updated) {
         String msg = "Dud5 is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isDud6Updated) {
         String msg = "Dud6 is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isDud7Updated) {
         String msg = "Dud7 is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isTimestampUpdated) {
         String msg = "Timestamp is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isSomeBooleansUpdated) {
         String msg = "SomeBooleans is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isSomeBytesUpdated) {
         String msg = "SomeBytes is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isSomeCharsUpdated) {
         String msg = "SomeChars is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isSomeIntsUpdated) {
         String msg = "SomeInts is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isSomeFloatsUpdated) {
         String msg = "SomeFloats is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isSomeLongsUpdated) {
         String msg = "SomeLongs is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isSomeShortsUpdated) {
         String msg = "SomeShorts is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isSomeStringsUpdated) {
         String msg = "SomeStrings is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isSomeDoublesUpdated) {
         String msg = "SomeDoubles is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }

      if (!this.isVariablesUpdated) {
         String msg = "Variables is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }
      if (!this.isActionUpdated) {
         String msg = "Action is required, but no value was provided.";
         if (result == null) {
            result = msg;
         }
         else {
            result = result.concat("\n" + msg);
         }
      }


      if (result != null) {
         log4j.debug("result: " + result);
      }

      log4j.debug("Leaving " + METHOD);
      return result;
   }
}
