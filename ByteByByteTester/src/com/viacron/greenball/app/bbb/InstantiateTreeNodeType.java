/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInstantiationFile()).
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

public class InstantiateTreeNodeType {
private static Logger log4j = Logger.getLogger(InstantiateTreeNodeType.class);

private Element element;
private TreeNodeType treeNodeType;

/*
 * The isUpdated flags. If an attribute is required by the grammar then a value
 * must be provided, and the isUpdated flag will be set when the value is
 * obtained during unpacking. After the object is constructed during unpacking, 
 * validation will be performed to make sure a value was provided for all attributes
 * that are not optional. 
 * See buildFlags() in JBitByBitGenerator.java.
 */
private boolean isChildrenUpdated = false;
private boolean isPrefixUpdated = false;
private boolean isLabelUpdated = false;
private boolean isFieldNameUpdated = false;
private boolean isClassNameUpdated = false;
private boolean isSourceUpdated = false;
private boolean isUsageCounterUpdated = false;
private boolean isLevelUpdated = false;
private boolean isNodeStateUpdated = false;
private boolean isSnUpdated = false;
private boolean isXrefUpdated = false;
private boolean isMultiUpdated = false;
private boolean isLabelableUpdated = false;
private boolean isExpandedUpdated = false;
private boolean isIdUpdated = false;
private boolean isParentIdUpdated = false;

/**
 * This method constructs a InstantiateTreeNodeType object based on an Element
 * object.
 * 
 * @param element
 *            The Element.
 */
public InstantiateTreeNodeType(Element element) {
this.element = element;
this.treeNodeType = new TreeNodeType();
}

/**
 * The instantiate method instantiates a TreeNodeType object.
 * 
 * @return The TreeNodeType.
 */
protected TreeNodeType instantiate() {
final String METHOD = "instantiate()";
log4j.debug("Entered " + METHOD);

log4j.debug("element: " + element.getName());

for (AbstractAttribute abstractAttribute : element.getAbstractAttributes()) {
      // Entered instantiateSubTypeElements()
   for (Element e : abstractAttribute.getElements()) {
      // Recursive attribute detected...
         if (e.getName().startsWith("children[")) {
            this.isChildrenUpdated = true;
            log4j.debug("found element: children");
            if (treeNodeType.getChildren() == null) {
            List<TreeNodeType> children = new ArrayList<TreeNodeType>();
            treeNodeType.setChildren(children);
            }

            // Recursive list detected...
            InstantiateTreeNodeType instantiateTreeNodeType = new InstantiateTreeNodeType(e);
            TreeNodeType aTreeNodeType = instantiateTreeNodeType.instantiate();
            treeNodeType.getChildren().add(aTreeNodeType);
         }
      }
      // Leaving instantiateSubTypeElements()


      for (KeyValuePair kvp : abstractAttribute.getKeyValuePairs()) {
               // Entered instantiateSubTypeAttributes()
      if (kvp.getKey().equals("prefix")) {
       this.isPrefixUpdated = true;
      log4j.debug("setting value of \"prefix\" to: " + kvp.getValue());
      treeNodeType.setPrefix(kvp.getValue());
      }
      else if (kvp.getKey().equals("label")) {
       this.isLabelUpdated = true;
      log4j.debug("setting value of \"label\" to: " + kvp.getValue());
      treeNodeType.setLabel(kvp.getValue());
      }
      else if (kvp.getKey().equals("fieldName")) {
       this.isFieldNameUpdated = true;
      log4j.debug("setting value of \"fieldName\" to: " + kvp.getValue());
      treeNodeType.setFieldName(kvp.getValue());
      }
      else if (kvp.getKey().equals("className")) {
       this.isClassNameUpdated = true;
      log4j.debug("setting value of \"className\" to: " + kvp.getValue());
      treeNodeType.setClassName(kvp.getValue());
      }
      else if (kvp.getKey().equals("source")) {
       this.isSourceUpdated = true;
      log4j.debug("setting value of \"source\" to: " + kvp.getValue());
      treeNodeType.setSource(kvp.getValue());
      }
      else if (kvp.getKey().equals("crosslink")) {
      log4j.debug("setting value of \"crosslink\" to: " + kvp.getValue());
      treeNodeType.setCrosslink(kvp.getValue());
      }
      else if (kvp.getKey().equals("usageCounter")) {
       this.isUsageCounterUpdated = true;
      log4j.debug("setting value of \"usageCounter\" to: " + kvp.getValue());
      treeNodeType.setUsageCounter(Integer.parseInt(kvp.getValue()));
      }
      else if (kvp.getKey().equals("level")) {
       this.isLevelUpdated = true;
      log4j.debug("setting value of \"level\" to: " + kvp.getValue());
      treeNodeType.setLevel(Integer.parseInt(kvp.getValue()));
      }
      else if (kvp.getKey().equals("nodeState")) {
       this.isNodeStateUpdated = true;
      log4j.debug("setting value of \"nodeState\" to: " + kvp.getValue());
      treeNodeType.setNodeState(Integer.parseInt(kvp.getValue()));
      }
      else if (kvp.getKey().equals("sn")) {
       this.isSnUpdated = true;
      log4j.debug("setting value of \"sn\" to: " + kvp.getValue());
      treeNodeType.setSn(Long.parseLong(kvp.getValue()));
      }
      else if (kvp.getKey().equals("xref")) {
       this.isXrefUpdated = true;
      log4j.debug("setting value of \"xref\" to: " + kvp.getValue());
      treeNodeType.setXref(kvp.getValue().equals("true"));
      }
      else if (kvp.getKey().startsWith("ruleIds[")) {
         if(treeNodeType.getRuleIds() == null) {
         treeNodeType.setRuleIds(new ArrayList<String>());
         }
         treeNodeType.getRuleIds().add(kvp.getValue());
      }
      else if (kvp.getKey().equals("crossReference")) {
      log4j.debug("setting value of \"crossReference\" to: " + kvp.getValue());
      treeNodeType.setCrossReference(kvp.getValue());
      }
      else if (kvp.getKey().equals("multi")) {
       this.isMultiUpdated = true;
      log4j.debug("setting value of \"multi\" to: " + kvp.getValue());
      treeNodeType.setMulti(kvp.getValue().equals("true"));
      }
      else if (kvp.getKey().equals("labelable")) {
       this.isLabelableUpdated = true;
      log4j.debug("setting value of \"labelable\" to: " + kvp.getValue());
      treeNodeType.setLabelable(kvp.getValue().equals("true"));
      }
      else if (kvp.getKey().equals("expanded")) {
       this.isExpandedUpdated = true;
      log4j.debug("setting value of \"expanded\" to: " + kvp.getValue());
      treeNodeType.setExpanded(kvp.getValue().equals("true"));
      }
      else if (kvp.getKey().equals("id")) {
       this.isIdUpdated = true;
      log4j.debug("setting value of \"id\" to: " + kvp.getValue());
      treeNodeType.setId(kvp.getValue());
      }
      else if (kvp.getKey().equals("parentId")) {
       this.isParentIdUpdated = true;
      log4j.debug("setting value of \"parentId\" to: " + kvp.getValue());
      treeNodeType.setParentId(kvp.getValue());
      }
      // Leaving instantiateSubTypeAttributes()

      }
   }

   log4j.debug("Leaving " + METHOD);
   return treeNodeType;
}

/**
 * The validate method checks that a value was provided for all required 
 * attributes.
 *
 * @return The error message or null if no error occurred.
 */
protected String validate() {
   final String METHOD = "validate()";
   log4j.debug("Entered " + METHOD);

   String result = null;

   // Entered buildValidationMethod()
   if (!this.isChildrenUpdated) {
      String msg = "Children is required, but no value was provided.";
      if (result == null) {
         result = msg;
      }
   }

   if (!this.isPrefixUpdated) {
      String msg = "Prefix is required, but no value was provided.";
      if (result == null) {
         result = msg;
      }
      else {
         result = result.concat("\n" + msg);
      }
   }

   if (!this.isLabelUpdated) {
      String msg = "Label is required, but no value was provided.";
      if (result == null) {
         result = msg;
      }
      else {
         result = result.concat("\n" + msg);
      }
   }

   if (!this.isFieldNameUpdated) {
      String msg = "FieldName is required, but no value was provided.";
      if (result == null) {
         result = msg;
      }
      else {
         result = result.concat("\n" + msg);
      }
   }

   if (!this.isClassNameUpdated) {
      String msg = "ClassName is required, but no value was provided.";
      if (result == null) {
         result = msg;
      }
      else {
         result = result.concat("\n" + msg);
      }
   }

   if (!this.isSourceUpdated) {
      String msg = "Source is required, but no value was provided.";
      if (result == null) {
         result = msg;
      }
      else {
         result = result.concat("\n" + msg);
      }
   }

   if (!this.isUsageCounterUpdated) {
      String msg = "UsageCounter is required, but no value was provided.";
      if (result == null) {
         result = msg;
      }
      else {
         result = result.concat("\n" + msg);
      }
   }

   if (!this.isLevelUpdated) {
      String msg = "Level is required, but no value was provided.";
      if (result == null) {
         result = msg;
      }
      else {
         result = result.concat("\n" + msg);
      }
   }

   if (!this.isNodeStateUpdated) {
      String msg = "NodeState is required, but no value was provided.";
      if (result == null) {
         result = msg;
      }
      else {
         result = result.concat("\n" + msg);
      }
   }

   if (!this.isSnUpdated) {
      String msg = "Sn is required, but no value was provided.";
      if (result == null) {
         result = msg;
      }
      else {
         result = result.concat("\n" + msg);
      }
   }

   if (!this.isXrefUpdated) {
      String msg = "Xref is required, but no value was provided.";
      if (result == null) {
         result = msg;
      }
      else {
         result = result.concat("\n" + msg);
      }
   }

   if (!this.isMultiUpdated) {
      String msg = "Multi is required, but no value was provided.";
      if (result == null) {
         result = msg;
      }
      else {
         result = result.concat("\n" + msg);
      }
   }

   if (!this.isLabelableUpdated) {
      String msg = "Labelable is required, but no value was provided.";
      if (result == null) {
         result = msg;
      }
      else {
         result = result.concat("\n" + msg);
      }
   }

   if (!this.isExpandedUpdated) {
      String msg = "Expanded is required, but no value was provided.";
      if (result == null) {
         result = msg;
      }
      else {
         result = result.concat("\n" + msg);
      }
   }

   if (!this.isIdUpdated) {
      String msg = "Id is required, but no value was provided.";
      if (result == null) {
         result = msg;
      }
      else {
         result = result.concat("\n" + msg);
      }
   }

   if (!this.isParentIdUpdated) {
      String msg = "ParentId is required, but no value was provided.";
      if (result == null) {
         result = msg;
      }
      else {
         result = result.concat("\n" + msg);
      }
   }


   if (result != null) {
      log4j.debug("result: " + result);
   }

   log4j.debug("Leaving " + METHOD);
   return result;
}
}
