/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateClassFile()). 
 * Do not edit.
 */
package com.bbb.example;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
/**
 * The Details class is a SubType referenced by message objects defined
 * by the Example grammar.
 */
public class Details {
   private static final int ID = ExampleMessagesEnum.DETAILS.getId();

   /**
    * The number of bits required to represent the DetailsEnum IDs.
    * # of attributes: 4
    * # of PEnumRefs: 1
    */
   private static final int ID_BITS = 3;

   private static ExampleMessagesDirectoryEntry[] theDirectory;
   private static final int DIRECTORY_OFFSET = 9;

   private static Logger log4j = Logger.getLogger(Details.class);

   // Entered buildClassEnum()
   private enum DetailsEnum {
      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      APP(0, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      MODULE(1, -1, 0, true),

      // sizeInBits: 32
      LINE_NUMBER(2, 0, 0, false),

      // sizeInBits: 32
      FACILITY(3, 32, 0, false),

      // sizeInBits: 4
      // sizeInBytes: 1
      SEVERITY(4, 64, 0, false);

      private final int id;
      private final int offsetInBits;
      private int length;
      private boolean isDirectoryEntry;

      DetailsEnum(int id, int offsetInBits, int length, boolean isDirectoryEntry) {
         this.id = id;
         this.offsetInBits = offsetInBits;
         this.length = length;
         this.isDirectoryEntry = isDirectoryEntry;
      }

      public int getId() {
         return this.id;
      }

      public int getOffsetInBits() {
         return this.offsetInBits;
      }

      public int getLength() {
         return this.length;
      }

      public void setLength(int length) {
         this.length = length;
      }
   } // Leaving buildClassEnum()

   /*
    * The instance variables.
    * See buildInstanceVariables() in JBitByBitGenerator.java.
    */
   private String app;
   private String module;
   private int lineNumber;
   private int facility;
   private Severity severity;


   private String theErrorMsg;

   /**
    * The Details no-arg constructor.
    */
   public Details() {}

   /**
    * The Details constructor.
    * See buildParameterAnnotations() in JBitByBitGenerator.java.
    *
    * @param app The app message attribute.
    * @param module The module message attribute.
    * @param lineNumber The lineNumber message attribute.
    * @param facility The facility message attribute.
    * @param severity The Severity message attribute.
    */
   public Details(String app,
                  String module,
                  Integer lineNumber,
                  Integer facility, Severity severity) {
      // Entered buildParameterAssignments()
      this.setApp(app);
      this.setModule(module);
      this.setLineNumber(lineNumber);
      this.setFacility(facility);
      this.setSeverity(severity);
      // Leaving buildParameterAssignments()
   }

   /**
    * The Details copy constructor.
    */
   public Details(Details details) {
      // Entered buildCopyConstructorParameterAssignments()
      this.setApp(details.getApp());
      this.setModule(details.getModule());
      this.setLineNumber(details.getLineNumber());
      this.setFacility(details.getFacility());
      this.setSeverity(details.getSeverity());
      // Leaving buildCopyConstructorParameterAssignments()
   }

   // Entered buildSetErrorMsgMethod()
   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }
   // Leaving buildSetErrorMsgMethod()

   // Entered buildGetErrorMsgMethod()
   /**
    * This method returns the error message or null if no error
    * occurred.
    */
   public String getErrorMsg() {
      return theErrorMsg;
   }
   // Leaving buildGetErrorMsgMethod()

   // Entered buildPackMethod()
   /**
    * This method packs a Details object into a byte array. If a required attribute is not
    * provided an exception will be thrown.
    *
    * @return A byte array which represents a Details message object.
    * @throws MissingAttributeException
    */
   public byte[] pack() throws MissingAttributeException {
      final String METHOD = "pack()";
      log4j.debug("Entered " + METHOD);

      int byteArraySize = getDetailsSize();
      log4j.debug("byteArraySize: " + byteArraySize);
      byte[] bb = new byte[byteArraySize];

      /*
       * Convert object to byte array.
       */
      int offset = 0;

      if (this.getLineNumber() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "lineNumber", offset));
         bb = ExampleMessagesUtility.insertInteger(bb, offset, this.getLineNumber());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"lineNumber\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getFacility() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "facility", offset));
         bb = ExampleMessagesUtility.insertInteger(bb, offset, this.getFacility());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"facility\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      log4j.debug(String.format("inserting %s at offset %d", "severity", offset));
      bb = ExampleMessagesUtility.insertByte(bb, offset, (byte) this.getSeverity().getId());
      offset += 1;

      DetailsEnum.APP.setLength(this.getApp() != null ? this.getApp().length() : 0);
      DetailsEnum.MODULE.setLength(this.getModule() != null ? this.getModule().length() : 0);

      int directorySize = getDetailsDirectorySize();
      if (directorySize != 0) {
         // Create the directory
         theDirectory = new ExampleMessagesDirectoryEntry[directorySize];
         for (int i = 0; i < directorySize; i++) {
            theDirectory[i] = new ExampleMessagesDirectoryEntry();
         }

         // Fill the directory
         int index = 0;
         offset = DIRECTORY_OFFSET
               + ExampleMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES
               * theDirectory.length;

         for (DetailsEnum detailsEnum : DetailsEnum.values()) {
            if (detailsEnum.isDirectoryEntry == true) {
               int id = detailsEnum.getId();
               int length = detailsEnum.getLength();

               theDirectory[index].setId(id);
               theDirectory[index].setLength(length);
               theDirectory[index].setOffset(offset);

               // Insert the data
               if (id == DetailsEnum.APP.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "app", offset));
                  if (getApp() != null) {
                     bb = ExampleMessagesUtility.insertString(bb, offset, getApp());
                     offset += length * 1;
                  }
               }
               else if (id == DetailsEnum.MODULE.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "module", offset));
                  if (getModule() != null) {
                     bb = ExampleMessagesUtility.insertString(bb, offset, getModule());
                     offset += length * 1;
                  }
               }
               index++;
            }
         }

         // Insert the directory
         log4j.debug(String.format("inserting the directory at offset %d", DIRECTORY_OFFSET));
         offset = DIRECTORY_OFFSET;
         index = 0;
         for (ExampleMessagesDirectoryEntry directoryEntry : theDirectory) {
            log4j.debug(String.format("index[%d]: ", index));
            log4j.debug(String.format("  ID:     %d", directoryEntry.getId()));
            log4j.debug(String.format("  length: %d", directoryEntry.getLength()));
            log4j.debug(String.format("  offset: %d", directoryEntry.getOffset()));
            bb = ExampleMessagesUtility.insertInteger(bb, offset, directoryEntry.getId());
            bb = ExampleMessagesUtility.insertInteger(bb, offset + 4, directoryEntry.getLength());
            bb = ExampleMessagesUtility.insertInteger(bb, offset + 8, directoryEntry.getOffset());

            offset += ExampleMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
            index++;
         }

      }
      log4j.debug("Leaving " + METHOD);
      return bb;
   }
   // Leaving buildPackMethod()

   // Entered buildUnpackMethod()
   /**
    * This method unpacks a byte array containing a Details object.
    *
    * @return The byte array as a Details message object.
    */
   public Details unpack(byte[] ba) {
      final String METHOD = "unpack()";
      log4j.debug("Entered " + METHOD);

      Details details = new Details();

      details.setLineNumber(ExampleMessagesUtility.getInteger(ba, DetailsEnum.LINE_NUMBER.getOffsetInBits()));
      details.setFacility(ExampleMessagesUtility.getInteger(ba, DetailsEnum.FACILITY.getOffsetInBits()));
      details.setSeverity(Severity.toEnum(ExampleMessagesUtility.getByte(ba, DetailsEnum.SEVERITY.getOffsetInBits())));

      // Get the directory
      int directorySize = getDetailsDirectorySize();
      theDirectory = new ExampleMessagesDirectoryEntry[directorySize];
      int dirOffset = DIRECTORY_OFFSET;

      for (int entry = 0 ; entry < directorySize; entry++) {
         ExampleMessagesDirectoryEntry directoryEntry = new ExampleMessagesDirectoryEntry();

         int id = ExampleMessagesUtility.getInteger(ba, dirOffset * 8);
         directoryEntry.setId(id);
         int length = ExampleMessagesUtility.getInteger(ba, (dirOffset + 4) * 8);
         directoryEntry.setLength(length);
         int offset = ExampleMessagesUtility.getInteger(ba, (dirOffset + 8) * 8);
         directoryEntry.setOffset(offset);

         theDirectory[entry] = directoryEntry;

         dirOffset += ExampleMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      }

      for (ExampleMessagesDirectoryEntry directoryEntry : theDirectory) {
         int id = directoryEntry.getId();
         int offset = directoryEntry.getOffset();
         int length = directoryEntry.getLength();

         if (id == DetailsEnum.APP.getId()) {
            details.setApp(ExampleMessagesUtility.getString(ba, offset, length));
         }
         else if (id == DetailsEnum.MODULE.getId()) {
            details.setModule(ExampleMessagesUtility.getString(ba, offset, length));
         }
      }

      log4j.debug("Leaving " + METHOD);
      return details;
   }
   // Leaving buildUnpackMethod()

   /**
    * This method sets the app attribute. Setting of this value is required.
    * @param app The app attribute.
    */
   public void setApp(String app) {
      this.app = app;
   }

   /**
    * This method sets the module attribute. Setting of this value is required.
    * @param module The module attribute.
    */
   public void setModule(String module) {
      this.module = module;
   }

   /**
    * This method sets the lineNumber attribute. Setting of this value is required.
    * @param lineNumber The lineNumber attribute.
    */
   public void setLineNumber(Integer lineNumber) {
      this.lineNumber = lineNumber;
   }

   /**
    * This method sets the facility attribute. Setting of this value is required.
    * @param facility The facility attribute.
    */
   public void setFacility(Integer facility) {
      this.facility = facility;
   }

   /**
    * This method gets the app attribute. The app attribute is a required attribute.
    */
   public String getApp() {
      return this.app;
   }

   /**
    * This method gets the module attribute. The module attribute is a required attribute.
    */
   public String getModule() {
      return this.module;
   }

   /**
    * This method gets the lineNumber attribute. The lineNumber attribute is a required attribute.
    */
   public Integer getLineNumber() {
      return this.lineNumber;
   }

   /**
    * This method gets the facility attribute. The facility attribute is a required attribute.
    */
   public Integer getFacility() {
      return this.facility;
   }

   /**
    * This method sets the severity attribute. Setting of this value is required.
    * @param severity The severity.
    */
   public void setSeverity(Severity severity) {
      this.severity = severity;
   }

   /**
    * This method gets the severity attribute. The severity attribute is a required attribute.
    * @return The severity attribute.
    */
   public Severity getSeverity() {
      return this.severity;
   }

   /**
    * This method gets the size of the directory.
    */
   private int getDetailsDirectorySize() {
      int directorySize = 0;

      // app
      directorySize++;
      // module
      directorySize++;

      return directorySize;
   }


   /**
    * This method gets the size of the Details object.
    * @return The size in bytes.
    */
   public int getDetailsSize() {
      int size = 0;

      int directorySize = getDetailsDirectorySize();
      size += directorySize * ExampleMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      // Add size of app
      size += (getApp() != null ? getApp().length() : 0);
      // Add size of module
      size += (getModule() != null ? getModule().length() : 0);
      // Add size of lineNumber
      size += 4;
      // Add size of facility
      size += 4;
      // Add size of severity
      size += 1;

      return size;
   }

   @Override
   public String toString() {
      StringBuilder result = new StringBuilder();
      String NEW_LINE = System.getProperty("line.separator");

      result.append(this.getClass().getSimpleName() + " Object {" + NEW_LINE);
      result.append(" app: " + app + NEW_LINE);
      result.append(" module: " + module + NEW_LINE);
      result.append(" lineNumber: " + lineNumber + NEW_LINE);
      result.append(" facility: " + facility + NEW_LINE);

      result.append(" severity: " + severity + NEW_LINE);
      result.append("} ");

      return result.toString();
   }

   /**
    * The hashCode method returns this object's hashCode.
    */
   @Override
   public int hashCode() {
      final int prime = 31;
      int result = 1;
      result = prime * result
         + ((String) app).hashCode();
      result = prime * result
         + ((String) module).hashCode();
      result = prime * result
         + ((Integer) lineNumber).hashCode();
      result = prime * result
         + ((Integer) facility).hashCode();
      return result;
   }

   /**
    * The equals method checks for equality. 
    */
   public boolean equals(Object obj) {
      if (obj == this) return true;
      if (obj == null) return false;
      if (getClass() != obj.getClass()) return false;

      Details details = (Details) obj;
      if (!details.getApp().equals(this.getApp())) {
         return false;
      }

      if (!details.getModule().equals(this.getModule())) {
         return false;
      }

      if (details.getLineNumber() != this.getLineNumber()) {
         return false;
      }

      if (details.getFacility() != this.getFacility()) {
         return false;
      }
      
      if (details.getSeverity() != this.getSeverity()) {
    	  return false;
      }

      return true;
   }
}
