/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInitializationFile()).
 * Do not edit.
 */
package com.bbb.example;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializeDetails class initializes an Element object with a Details object.
 */
public class InitializeDetails {
private static Logger log4j = Logger.getLogger(InitializeDetails.class);

private String theErrorMsg;
private Details details;

public InitializeDetails(Details details) {
this.details = details;
}

/**
 * The initialize method returns an Element object initialized with data from a
 * Details object.
 * @param elementName The name of the element.
 * @return The element.
 * @throws MissingAttributeException
 */
protected Element initialize(String elementName) 
    throws MissingAttributeException {
final String METHOD = "initialize()";
log4j.debug("Entered " + METHOD);
Element element = null;

if (details != null) {
log4j.debug("Creating new element: " + elementName);
element = new Element(elementName);

if (details.getApp() != null) {
AbstractAttribute abstractAttribute = initializeApp(details.getApp());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"app\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (details.getModule() != null) {
AbstractAttribute abstractAttribute = initializeModule(details.getModule());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"module\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (details.getLineNumber() != null) {
AbstractAttribute abstractAttribute = initializeLineNumber(details.getLineNumber());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"lineNumber\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (details.getFacility() != null) {
AbstractAttribute abstractAttribute = initializeFacility(details.getFacility());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"facility\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (details.getSeverity() != null) {
AbstractAttribute abstractAttribute = initializeSeverity(details.getSeverity());
element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"severity\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

}

log4j.debug("Leaving " + METHOD);
return element;
}

/*
 * This method initializes the app attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeApp(String app)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (app != null) {
      log4j.debug("Creating new KeyValuePair: app");
      KeyValuePair kvp = new KeyValuePair("app", "<STRING_BEGIN>" + app + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"app\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the module attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeModule(String module)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (module != null) {
      log4j.debug("Creating new KeyValuePair: module");
      KeyValuePair kvp = new KeyValuePair("module", "<STRING_BEGIN>" + module + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"module\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the lineNumber attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeLineNumber(Integer lineNumber)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (lineNumber != null) {
      log4j.debug("Creating new KeyValuePair: lineNumber");
      KeyValuePair kvp = new KeyValuePair("lineNumber", Integer.toString(lineNumber));
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"lineNumber\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the facility attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeFacility(Integer facility)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (facility != null) {
      log4j.debug("Creating new KeyValuePair: facility");
      KeyValuePair kvp = new KeyValuePair("facility", Integer.toString(facility));
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"facility\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

private AbstractAttribute initializeSeverity(Severity severity)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initPEnumRefValue()
   if (severity != null) {
      log4j.debug("Creating new Key/Value pair: severity");
      KeyValuePair kvp = new KeyValuePair("severity", "<ENUM_BEGIN>" + severity + "<ENUM_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"severity\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }
   // Leaving initPEnumRefValue()
   return abstractAttribute;
}

/**
* This method returns the error message or null if no error occurred.
*/
public String getErrorMsg() {
   return theErrorMsg;
}

private void setErrorMsg(String errorMsg) {
   theErrorMsg = errorMsg;
}


}
