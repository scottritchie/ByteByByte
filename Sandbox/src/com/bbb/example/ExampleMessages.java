/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateRootClassFile()).
 * Do not edit.
 */
package com.bbb.example;

import org.apache.log4j.Logger;

/**
 * The ExampleMessages class is the root class of the messaging system defined
 * by the Example grammar.
 */
public class ExampleMessages {

   private static Logger log4j = Logger.getLogger(ExampleMessages.class);
   private String theErrorMsg = null;

   /**
    * The ExampleMessages constructor.
    */
   public ExampleMessages() {}

   /**
    * The number of bits required to represent the message and sub-type IDs.
    */
   public static final int ID_BITS = 2;

   // The messages available in ExampleMessages:
   public static final String HELLO_WORLD = "HelloWorld";
   public static final String LOG_MON_MESSAGE = "LogMonMessage";

   /**
    * The pack() method packs an object into a byte array. The byte array will be in
    * BitByBit format. The object must be one of the following classes:
    *   HelloWorld
    *   LogMonMessage
    *
    * @param obj The object.
    * @return A byte array which represents the message object in BitByBit
    *         format.
    * @throws MissingAttributeException
    */
   public byte[] pack(Object obj) throws MissingAttributeException {
      final String METHOD = "pack()";
      log4j.debug("Entered " + METHOD);

      byte[] result = null;
      setErrorMsg(null);

      if (obj != null) {
         log4j.debug("Searching for class: " + obj.getClass().getSimpleName());
         if (obj instanceof HelloWorld) {
            log4j.debug("Found it");
            result = ((HelloWorld) obj).pack();
         }
         else if (obj instanceof LogMonMessage) {
            log4j.debug("Found it");
            result = ((LogMonMessage) obj).pack();
         }
         else {
            setErrorMsg("Unknown/unsupported class: " + obj.getClass().getSimpleName());
            log4j.error(getErrorMsg());
         }
      }
      else {
         setErrorMsg("The object to be packed is null"); 
         log4j.error(getErrorMsg());
      }

      log4j.debug("Leaving " + METHOD);
      return result;
   }

   /**
    * The packStr() method packs an object into a String. The String will be in
    * BitByBit format. The object must be one of the following classes:
    *   HelloWorld
    *   LogMonMessage
    *
    * @param obj The object.
    * @return A String which represents the message object in BitByBit
    *         format.
    * @throws MissingAttributeException
    */
   public String packStr(Object obj) throws MissingAttributeException {
      final String METHOD = "packStr()";
      log4j.debug("Entered " + METHOD);

      String result = null;
      setErrorMsg(null);

      if (obj != null) {
         log4j.debug("Searching for class: " + obj.getClass().getSimpleName());
         if (obj instanceof HelloWorld) {
            log4j.debug("Found it");
            result = ((HelloWorld) obj).packStr();
         }
         else if (obj instanceof LogMonMessage) {
            log4j.debug("Found it");
            result = ((LogMonMessage) obj).packStr();
         }
         else {
            setErrorMsg("Unknown/unsupported class: " + obj.getClass().getSimpleName());
            log4j.error(getErrorMsg());
         }
      }
      else {
         setErrorMsg("The object to be packed is null"); 
         log4j.error(getErrorMsg());
      }

      log4j.debug("Leaving " + METHOD);
      return result;
   }

   /**
    * The unpack() method unpacks a byte array into an object. The byte array must be in 
    * BitByBit format. The returned object will be one of the following
    * classes:
    * HelloWorld
    * LogMonMessage
    *
    * @return The byte array as an object.
    */
   public Object unpack(byte[] buffer) {
      final String METHOD = "unpack()";
      log4j.debug("Entered " + METHOD);

      ExampleMessagesEnum gme = ExampleMessages.peek(buffer);
      Object result = null;

      if (gme != null) {
         log4j.debug("Searching for ID: " + gme.getId());
         if (gme.getId() == ExampleMessagesEnum.HELLO_WORLD.getId()) {
            log4j.debug("Found it");
            HelloWorld helloWorld = new HelloWorld();
            result = helloWorld.unpack(buffer);
         }
         else if (gme.getId() == ExampleMessagesEnum.LOG_MON_MESSAGE.getId()) {
            log4j.debug("Found it");
            LogMonMessage logMonMessage = new LogMonMessage();
            result = logMonMessage.unpack(buffer);
         }
         else {
            log4j.error("Error unpacking byte array.");
         }
      }

      log4j.debug("Leaving " + METHOD);
      return result;
   }

   /**
    * The unpackStr() method unpacks a String into an object. The String must be in 
    * BitByBit format. The returned object will be one of the following
    * classes:
    * HelloWorld
    * LogMonMessage
    *
    * @return The message string as an object.
    */
   public Object unpackStr(String buffer) {
      final String METHOD = "unpackStr()";
      log4j.debug("Entered " + METHOD);

      String className = null;
      Object result = null;
      setErrorMsg(null);

      if (buffer == null) {
         setErrorMsg("No string was provided to unpack");
         log4j.error(getErrorMsg());
      }
      else if (buffer.startsWith("{") == false) {
         setErrorMsg("Invalid string format");
         log4j.error(getErrorMsg());
      }
      else {
         String tokens[] = buffer.split(" ");
         log4j.debug("# of tokens: " + tokens.length);
         log4j.debug("tokens[0]: " + tokens[0]);

         if (tokens.length == 1) {
            className = tokens[0].substring(1, tokens[0].length() - 1);
         }
         else {
            className = tokens[0].substring(1);
         }

         log4j.debug("Searching for class: " + className);
         if (className.equals("HelloWorld")) {
            log4j.debug("Found it");
         HelloWorld helloWorld = new HelloWorld();
            result = helloWorld.unpack(buffer);
         }
         else if (className.equals("LogMonMessage")) {
            log4j.debug("Found it");
         LogMonMessage logMonMessage = new LogMonMessage();
            result = logMonMessage.unpack(buffer);
         }
         else {
            setErrorMsg("Unknown/unsupported class name: " + className);
            log4j.error(getErrorMsg());
         }
      }

      log4j.debug("Leaving " + METHOD);
      return result;
   }

   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }

   /**
    * This method returns the error message or null if no error occurred.
    */
   public String getErrorMsg() {
      return theErrorMsg;
   }

   /**
   * This method takes a "peek" at the message buffer without fully parsing
   * it. It returns the enum of the message.
   *
   * @param buffer
   *            The byte array containing the message.
   * @return The enum of the object within the message buffer.
   */
   public static ExampleMessagesEnum peek(byte[] buffer) {
      final String METHOD = "peek()";
      log4j.debug("Entered " + METHOD);

      ExampleMessagesEnum exampleMessagesEnum = null;

      if (buffer != null) {
         short id = ExampleMessagesUtility.getShort(buffer, 0);
         exampleMessagesEnum = ExampleMessagesEnum.toEnum(id);

         log4j.debug(String.format("ID: %d (%s)", exampleMessagesEnum.getId(),
         exampleMessagesEnum.getName()));
      }

      log4j.debug("Leaving " + METHOD);
      return exampleMessagesEnum;
   }

   /**
    * This method takes a "peek" at the message buffer without fully parsing
    * it. It returns the class name of the message buffer.
    *
    * @param buffer The string message buffer.
    * @return The class name of the object within the message buffer.
    */
   public static String peek(String buffer) {
      final String METHOD = "peek()";
      log4j.debug("Entered " + METHOD);

      String className = null;

      if (buffer != null) {
         if (buffer.startsWith("{")) {
            String tokens[] = buffer.split(" ");
            log4j.debug("# of tokens: " + tokens.length);
            log4j.debug("tokens[0]: " + tokens[0]);

            if (tokens.length == 1) {
               className = tokens[0].substring(1, tokens[0].length() - 1);
            } else {
               className = tokens[0].substring(1);
            }
         }
      }

      log4j.debug("className: " + className);

      log4j.debug("Leaving " + METHOD);
      return className;
   }
}
