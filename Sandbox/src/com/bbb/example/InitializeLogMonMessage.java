/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateInitializationFile()). 
 * Do not edit.
 */
package com.bbb.example;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializeLogMonMessage class initializes the element object with the LogMonMessage object.
 *
 */
public class InitializeLogMonMessage {
   private static Logger log4j = Logger.getLogger(InitializeLogMonMessage.class);
   private String theErrorMsg;
   private Element element;
   private LogMonMessage logMonMessage;

   /**
    * The InitializeLogMonMessage class initializes the element object with the LogMonMessage object.
    *
    * @param logMonMessage The object which will be used to initialize the element object.
    */
   public InitializeLogMonMessage(LogMonMessage logMonMessage) {
      this.logMonMessage = logMonMessage;

      this.element = new Element("LogMonMessage");
   }

   /**
    * This method initializes the element.
    */
   public Element initialize() throws MissingAttributeException {
      final String METHOD = "initialize()";
      log4j.debug("Entered " + METHOD);

      log4j.debug("element.getName(): LogMonMessage");

      if (logMonMessage.getTimestamp() != null) {
         AbstractAttribute abstractAttribute = initializeTimestamp(logMonMessage.getTimestamp());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"timestamp\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (logMonMessage.getMsg() != null) {
         AbstractAttribute abstractAttribute = initializeMsg(logMonMessage.getMsg());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"msg\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (logMonMessage.getDetails() != null) {
         AbstractAttribute abstractAttribute = initializeDetails(logMonMessage.getDetails());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"details\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }


      log4j.debug("Leaving " + METHOD);
      return element;
   }

   /*
    * This method initializes the timestamp attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeTimestamp(Calendar timestamp)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (timestamp != null) {
         log4j.debug("Creating new KeyValuePair: timestamp");
         SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
         KeyValuePair kvp = new KeyValuePair("timestamp",  "<DATE_TIME_BEGIN>" + formatter.format(timestamp.getTime()) + "<DATE_TIME_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"timestamp\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the msg attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeMsg(String msg)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (msg != null) {
         log4j.debug("Creating new KeyValuePair: msg");
         KeyValuePair kvp = new KeyValuePair("msg", "<STRING_BEGIN>" + msg + "<STRING_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"msg\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the details attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeDetails(Details details)
             throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      if (details != null) {
         InitializeDetails initializeDetails = new InitializeDetails(details);
         Element detailsElement = initializeDetails.initialize("details");
         abstractAttribute.getElements().add(detailsElement);
      }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"details\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }
      return abstractAttribute;
   }

   /**
   * This method returns the error message or null if no error occurred.
   */
   public String getErrorMsg() {
      return theErrorMsg;
   }

   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }

}
