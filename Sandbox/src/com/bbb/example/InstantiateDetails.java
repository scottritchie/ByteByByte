/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInstantiationFile()).
 * Do not edit.
 */
package com.bbb.example;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

public class InstantiateDetails {
private static Logger log4j = Logger.getLogger(InstantiateDetails.class);

private Element element;
private Details details;

/*
 * The isUpdated flags. If an attribute is required by the grammar then a value
 * must be provided, and the isUpdated flag will be set when the value is
 * obtained during unpacking. After the object is constructed during unpacking, 
 * validation will be performed to make sure a value was provided for all attributes
 * that are not optional. 
 * See buildFlags() in JBitByBitGenerator.java.
 */
private boolean isAppUpdated = false;
private boolean isModuleUpdated = false;
private boolean isLineNumberUpdated = false;
private boolean isFacilityUpdated = false;
private boolean isSeverityUpdated = false;

/**
 * This method constructs a InstantiateDetails object based on an Element
 * object.
 * 
 * @param element
 *            The Element.
 */
public InstantiateDetails(Element element) {
this.element = element;
this.details = new Details();
}

/**
 * The instantiate method instantiates a Details object.
 * 
 * @return The Details.
 */
protected Details instantiate() {
final String METHOD = "instantiate()";
log4j.debug("Entered " + METHOD);

log4j.debug("element: " + element.getName());

for (AbstractAttribute abstractAttribute : element.getAbstractAttributes()) {
      // Entered instantiateSubTypeElements()
   // Leaving instantiateSubTypeElements()


   for (KeyValuePair kvp : abstractAttribute.getKeyValuePairs()) {
         // Entered instantiateSubTypeAttributes()
   if (kvp.getKey().equals("app")) {
    this.isAppUpdated = true;
   log4j.debug("setting value of \"app\" to: " + kvp.getValue());
   details.setApp(kvp.getValue());
   }
   else if (kvp.getKey().equals("module")) {
    this.isModuleUpdated = true;
   log4j.debug("setting value of \"module\" to: " + kvp.getValue());
   details.setModule(kvp.getValue());
   }
   else if (kvp.getKey().equals("lineNumber")) {
    this.isLineNumberUpdated = true;
   log4j.debug("setting value of \"lineNumber\" to: " + kvp.getValue());
   details.setLineNumber(Integer.parseInt(kvp.getValue()));
   }
   else if (kvp.getKey().equals("facility")) {
    this.isFacilityUpdated = true;
   log4j.debug("setting value of \"facility\" to: " + kvp.getValue());
   details.setFacility(Integer.parseInt(kvp.getValue()));
   }
   // Entered instantiatePEnumRef()
   if (kvp.getKey().equals("severity")) {
   this.isSeverityUpdated = true;
   log4j.debug("setting value of \"severity\" to: " + kvp.getValue());
   details.setSeverity(Severity.valueOf(kvp.getValue()));
   //this.severity = Severity.valueOf(kvp.getValue());
   }
   // Leaving instantiatePEnumRef()
   // Leaving instantiateSubTypeAttributes()

   }
}

log4j.debug("Leaving " + METHOD);
return details;
}

/**
 * The validate method checks that a value was provided for all required 
 * attributes.
 *
 * @return The error message or null if no error occurred.
 */
protected String validate() {
final String METHOD = "validate()";
log4j.debug("Entered " + METHOD);

String result = null;

// Entered buildValidationMethod()
if (!this.isAppUpdated) {
   String msg = "App is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
}

if (!this.isModuleUpdated) {
   String msg = "Module is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isLineNumberUpdated) {
   String msg = "LineNumber is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isFacilityUpdated) {
   String msg = "Facility is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}
if (!this.isSeverityUpdated) {
   String msg = "Severity is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}


if (result != null) {
   log4j.debug("result: " + result);
}

log4j.debug("Leaving " + METHOD);
return result;
}
}
