/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateClassFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;


import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.Date;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;
import com.viacron.utils.StringMessageBuffer.parser.SMBGLexer;
import com.viacron.utils.StringMessageBuffer.parser.SMBGParser;

/**
 * The ATestMessage class defines a message of the messaging system defined
 * by the GreenballMessages grammar. It provides methods for packing a ATestMessage object
 * into a byte array or string, and for unpacking a byte array or string
 * back into a ATestMessage object.
 */
public class ATestMessage {
   private static final int ID = GreenballMessagesEnum.A_TEST_MESSAGE.getId();

   /**
    * The number of bits required to represent the ATestMessageEnum IDs.
    * # of attributes: 20
    * # of PEnumRefs: 5
    */
   private static final int ID_BITS = 5;

   private static GreenballMessagesDirectoryEntry[] theDirectory;
   private static final int DIRECTORY_OFFSET = 37;

   private static Logger log4j = Logger.getLogger(ATestMessage.class);

   SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");

   // Entered buildClassEnum()
   private enum ATestMessageEnum {
      // sizeInBits: 8
      A_BOOLEAN(0, 16, 0, false),

      // sizeInBits: 8
      A_BYTE(1, 24, 0, false),

      // sizeInBits: 16
      A_CHAR(2, 32, 0, false),

      // sizeInBits: 64
      A_CALENDAR(3, 48, 0, false),

      // sizeInBits: 64
      A_DOUBLE(4, 112, 0, false),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      A_FLOAT(5, -1, 0, true),

      // sizeInBits: 32
      AN_INT(6, 176, 0, false),

      // sizeInBits: 64
      A_LONG(7, 208, 0, false),

      // sizeInBits: 16
      A_SHORT(8, 272, 0, false),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      A_STRING(9, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_BOOLEANS(10, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_BYTES(11, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_CHARS(12, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_CALENDARS(13, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_DOUBLES(14, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_FLOATS(15, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_INTS(16, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_LONGS(17, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_SHORTS(18, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SOME_STRINGS(19, -1, 0, true),

      // sizeInBits: 1
      // sizeInBytes: 1
      ACTION(20, 288, 0, false),

      // sizeInBits: 3
      // sizeInBytes: 1
      APP_STATE(21, 296, 0, false),

      // sizeInBits: 4
      // sizeInBytes: 1
      A_TEN_BIT_ENUM(22, 304, 0, false),

      // sizeInBits: 4
      // sizeInBytes: 1
      USER_STATUS(23, 312, 0, false),

      // sizeInBits: 8
      // sizeInBytes: 2
      Z_BIG_ONE(24, 320, 0, false);

      private final int id;
      private final int offsetInBits;
      private int length;
      private boolean isDirectoryEntry;

      ATestMessageEnum(int id, int offsetInBits, int length, boolean isDirectoryEntry) {
         this.id = id;
         this.offsetInBits = offsetInBits;
         this.length = length;
         this.isDirectoryEntry = isDirectoryEntry;
      }

      public int getId() {
         return this.id;
      }

      public int getOffsetInBits() {
         return this.offsetInBits;
      }

      public int getLength() {
         return this.length;
      }

      public void setLength(int length) {
         this.length = length;
      }
   } // Leaving buildClassEnum()

   /*
    * The instance variables.
    * See buildInstanceVariables() in JBitByBitGenerator.java.
    */
   private boolean aBoolean;
   private byte aByte;
   private char aChar;
   private Calendar aCalendar;
   private double aDouble;
   private float aFloat;
   private int anInt;
   private long aLong;
   private short aShort;
   private String aString;
   private List<Boolean> someBooleans;
   private List<Byte> someBytes;
   private List<Character> someChars;
   private List<Calendar> someCalendars;
   private List<Double> someDoubles;
   private List<Float> someFloats;
   private List<Integer> someInts;
   private List<Long> someLongs;
   private List<Short> someShorts;
   private List<String> someStrings;
   private ChatAction action;

   private AppState appState;

   private TenBitEnum aTenBitEnum;

   private UserStatusEnum userStatus;

   private ZbigOne zBigOne;


   private String theErrorMsg;

   /**
    * The ATestMessage no-arg constructor.
    */
   public ATestMessage() {}

   /**
    * The ATestMessage constructor.
    * See buildParameterAnnotations() in JBitByBitGenerator.java.
    *
    * @param aBoolean The aBoolean message attribute.
    * @param aByte The aByte message attribute.
    * @param aChar The aChar message attribute.
    * @param aCalendar The aCalendar message attribute.
    * @param aDouble The aDouble message attribute.
    * @param aFloat The aFloat message attribute.
    * @param anInt The anInt message attribute.
    * @param aLong The aLong message attribute.
    * @param aShort The aShort message attribute.
    * @param aString The aString message attribute.
    * @param someBooleans The someBooleans message attribute.
    * @param someBytes The someBytes message attribute.
    * @param someChars The someChars message attribute.
    * @param someCalendars The someCalendars message attribute.
    * @param someDoubles The someDoubles message attribute.
    * @param someFloats The someFloats message attribute.
    * @param someInts The someInts message attribute.
    * @param someLongs The someLongs message attribute.
    * @param someShorts The someShorts message attribute.
    * @param someStrings The someStrings message attribute.
    * @param action The ChatAction message attribute.
    * @param appState The AppState message attribute.
    * @param aTenBitEnum The TenBitEnum message attribute.
    * @param userStatus The UserStatusEnum message attribute.
    * @param zBigOne The ZbigOne message attribute.
    */
   public ATestMessage(Boolean aBoolean,
                       Byte aByte,
                       Character aChar,
                       Calendar aCalendar,
                       Double aDouble,
                       Float aFloat,
                       Integer anInt,
                       Long aLong,
                       Short aShort,
                       String aString,
                       List<Boolean> someBooleans,
                       List<Byte> someBytes,
                       List<Character>someChars,
                       List<Calendar> someCalendars,
                       List<Double> someDoubles,
                       List<Float> someFloats,
                       List<Integer> someInts,
                       List<Long> someLongs,
                       List<Short> someShorts,
                       List<String> someStrings, ChatAction action, AppState appState, TenBitEnum aTenBitEnum, UserStatusEnum userStatus, ZbigOne zBigOne) {
      // Entered buildParameterAssignments()
      this.setABoolean(aBoolean);
      this.setAByte(aByte);
      this.setAChar(aChar);
      this.setACalendar(aCalendar);
      this.setADouble(aDouble);
      this.setAFloat(aFloat);
      this.setAnInt(anInt);
      this.setALong(aLong);
      this.setAShort(aShort);
      this.setAString(aString);
      this.setSomeBooleans(someBooleans);
      this.setSomeBytes(someBytes);
      this.setSomeChars(someChars);
      this.setSomeCalendars(someCalendars);
      this.setSomeDoubles(someDoubles);
      this.setSomeFloats(someFloats);
      this.setSomeInts(someInts);
      this.setSomeLongs(someLongs);
      this.setSomeShorts(someShorts);
      this.setSomeStrings(someStrings);
      this.setAction(action);
      this.setAppState(appState);
      this.setATenBitEnum(aTenBitEnum);
      this.setUserStatus(userStatus);
      this.setZBigOne(zBigOne);
      // Leaving buildParameterAssignments()
   }


   // Entered buildSetErrorMsgMethod()
   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }
   // Leaving buildSetErrorMsgMethod()

   // Entered buildGetErrorMsgMethod()
   /**
    * This method returns the error message or null if no error
    * occurred.
    */
   public String getErrorMsg() {
      return theErrorMsg;
   }
   // Leaving buildGetErrorMsgMethod()

   // Entered buildPackMethod()
   /**
    * This method packs a ATestMessage object into a byte array. If a required attribute is not
    * provided an exception will be thrown.
    *
    * @return A byte array which represents a ATestMessage message object.
    * @throws MissingAttributeException
    */
   public byte[] pack() throws MissingAttributeException {
      final String METHOD = "pack()";
      log4j.debug("Entered " + METHOD);

      int byteArraySize = getATestMessageSize();
      log4j.debug("byteArraySize: " + byteArraySize);
      byte[] bb = new byte[byteArraySize];

      /*
       * Convert object to byte array.
       */
      int offset = 0;

      bb = GreenballMessagesUtility.insertShort(bb, offset, (short) ID);
      offset += 2;

      if (this.getABoolean() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "aBoolean", offset));
         bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 1, this.getABoolean() == true ? 1 : 0);
         offset += 1;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"aBoolean\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getAByte() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "aByte", offset));
         bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 8, this.getAByte());
         offset += 1;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"aByte\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getAChar() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "aChar", offset));
         bb = GreenballMessagesUtility.insertCharacter(bb, offset, this.getAChar());
         offset += 2;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"aChar\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getACalendar() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "aCalendar", offset));
         bb = GreenballMessagesUtility.insertCalendar(bb, offset, this.getACalendar());
         offset += 8;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"aCalendar\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getADouble() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "aDouble", offset));
         bb = GreenballMessagesUtility.insertDouble(bb, offset, this.getADouble());
         offset += 8;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"aDouble\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getAnInt() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "anInt", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getAnInt());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"anInt\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getALong() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "aLong", offset));
         bb = GreenballMessagesUtility.insertLong(bb, offset, this.getALong());
         offset += 8;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"aLong\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getAShort() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "aShort", offset));
         bb = GreenballMessagesUtility.insertShort(bb, offset, this.getAShort());
         offset += 2;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"aShort\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      log4j.debug(String.format("inserting %s at offset %d", "action", offset));
      bb = GreenballMessagesUtility.insertByte(bb, offset, (byte) this.getAction().getId());
      offset += 1;
      log4j.debug(String.format("inserting %s at offset %d", "appState", offset));
      bb = GreenballMessagesUtility.insertByte(bb, offset, (byte) this.getAppState().getId());
      offset += 1;
      log4j.debug(String.format("inserting %s at offset %d", "aTenBitEnum", offset));
      bb = GreenballMessagesUtility.insertByte(bb, offset, (byte) this.getATenBitEnum().getId());
      offset += 1;
      log4j.debug(String.format("inserting %s at offset %d", "userStatus", offset));
      bb = GreenballMessagesUtility.insertByte(bb, offset, (byte) this.getUserStatus().getId());
      offset += 1;
      log4j.debug(String.format("inserting %s at offset %d", "zBigOne", offset));
      bb = GreenballMessagesUtility.insertShort(bb, offset, (short) this.getZBigOne().getId());
      offset += 2;

      ATestMessageEnum.A_FLOAT.setLength(4);
      ATestMessageEnum.A_STRING.setLength(this.getAString() != null ? this.getAString().length() : 0);
      ATestMessageEnum.SOME_BOOLEANS.setLength(this.getSomeBooleans() != null ? this.getSomeBooleans().size() : 0);
      ATestMessageEnum.SOME_BYTES.setLength(this.getSomeBytes() != null ? this.getSomeBytes().size() : 0);
      ATestMessageEnum.SOME_CHARS.setLength(this.getSomeChars() != null ? this.getSomeChars().size() : 0);
      ATestMessageEnum.SOME_CALENDARS.setLength(this.getSomeCalendars() != null ? this.getSomeCalendars().size() : 0);
      ATestMessageEnum.SOME_DOUBLES.setLength(this.getSomeDoubles() != null ? this.getSomeDoubles().size() : 0);
      ATestMessageEnum.SOME_FLOATS.setLength(this.getSomeFloats() != null ? this.getSomeFloats().size() : 0);
      ATestMessageEnum.SOME_INTS.setLength(this.getSomeInts() != null ? this.getSomeInts().size() : 0);
      ATestMessageEnum.SOME_LONGS.setLength(this.getSomeLongs() != null ? this.getSomeLongs().size() : 0);
      ATestMessageEnum.SOME_SHORTS.setLength(this.getSomeShorts() != null ? this.getSomeShorts().size() : 0);
      ATestMessageEnum.SOME_STRINGS.setLength(this.getSomeStrings() != null ? this.getSomeStrings().size() : 0);

      int directorySize = getATestMessageDirectorySize();
      if (directorySize != 0) {
         // Create the directory
         theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
         for (int i = 0; i < directorySize; i++) {
            theDirectory[i] = new GreenballMessagesDirectoryEntry();
         }

         // Fill the directory
         int index = 0;
         offset = DIRECTORY_OFFSET
               + GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES
               * theDirectory.length;

         for (ATestMessageEnum aTestMessageEnum : ATestMessageEnum.values()) {
            if (aTestMessageEnum.isDirectoryEntry == true) {
               int id = aTestMessageEnum.getId();
               int length = aTestMessageEnum.getLength();

               theDirectory[index].setId(id);
               theDirectory[index].setLength(length);
               theDirectory[index].setOffset(offset);

               // Insert the data
               if (id == ATestMessageEnum.A_FLOAT.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "aFloat", offset));
                  bb = GreenballMessagesUtility.insertFloat(bb, offset, getAFloat());
                  offset += length * 4;
               }
               else if (id == ATestMessageEnum.A_STRING.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "aString", offset));
                  if (getAString() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getAString());
                     offset += length * 1;
                  }
               }
               else if (id == ATestMessageEnum.SOME_BOOLEANS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someBooleans", offset));
                  log4j.debug(String.format("inserting %s at offset %d", "someBooleans", offset));
                  bb = GreenballMessagesUtility.insertBooleans(bb, offset, getSomeBooleans());
                  offset += length * 1;
               }
               else if (id == ATestMessageEnum.SOME_BYTES.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someBytes", offset));
                  log4j.debug(String.format("inserting %s at offset %d", "someBytes", offset));
                  bb = GreenballMessagesUtility.insertBytes(bb, offset, getSomeBytes());
                  offset += length * 1;
               }
               else if (id == ATestMessageEnum.SOME_CHARS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someChars", offset));
                  log4j.debug(String.format("inserting %s at offset %d", "someChars", offset));
                  bb = GreenballMessagesUtility.insertCharacters(bb, offset, getSomeChars());
                  offset += length * 2;
               }
               else if (id == ATestMessageEnum.SOME_CALENDARS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someCalendars", offset));
                  log4j.debug(String.format("inserting %s at offset %d", "someCalendars", offset));
                  bb = GreenballMessagesUtility.insertCalendars(bb, offset, getSomeCalendars());
                  offset += length * 8;
               }
               else if (id == ATestMessageEnum.SOME_DOUBLES.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someDoubles", offset));
                  log4j.debug(String.format("inserting %s at offset %d", "someDoubles", offset));
                  bb = GreenballMessagesUtility.insertDoubles(bb, offset, getSomeDoubles());
                  offset += length * 8;
               }
               else if (id == ATestMessageEnum.SOME_FLOATS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someFloats", offset));
                  log4j.debug(String.format("inserting %s at offset %d", "someFloats", offset));
                  bb = GreenballMessagesUtility.insertFloats(bb, offset, getSomeFloats());
                  offset += length * 4;
               }
               else if (id == ATestMessageEnum.SOME_INTS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someInts", offset));
                  log4j.debug(String.format("inserting %s at offset %d", "someInts", offset));
                  bb = GreenballMessagesUtility.insertIntegers(bb, offset, getSomeInts());
                  offset += length * 4;
               }
               else if (id == ATestMessageEnum.SOME_LONGS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someLongs", offset));
                  log4j.debug(String.format("inserting %s at offset %d", "someLongs", offset));
                  bb = GreenballMessagesUtility.insertLongs(bb, offset, getSomeLongs());
                  offset += length * 8;
               }
               else if (id == ATestMessageEnum.SOME_SHORTS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someShorts", offset));
                  log4j.debug(String.format("inserting %s at offset %d", "someShorts", offset));
                  bb = GreenballMessagesUtility.insertShorts(bb, offset, getSomeShorts());
                  offset += length * 2;
               }
               else if (id == ATestMessageEnum.SOME_STRINGS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "someStrings", offset));
                  for (String s : getSomeStrings()) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, s);
                     int strLen = s.getBytes(Charset
                           .forName("UTF-8")).length;

                     theDirectory[index].setId(id);
                     theDirectory[index].setLength(strLen);
                     theDirectory[index].setOffset(offset);

                     offset += strLen;
                     index++;
                  }
                  index--;
               }
               index++;
            }
         }

         // Insert the directory
         log4j.debug(String.format("inserting the directory at offset %d", DIRECTORY_OFFSET));
         offset = DIRECTORY_OFFSET;
         index = 0;
         for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
            log4j.debug(String.format("index[%d]: ", index));
            log4j.debug(String.format("  ID:     %d", directoryEntry.getId()));
            log4j.debug(String.format("  length: %d", directoryEntry.getLength()));
            log4j.debug(String.format("  offset: %d", directoryEntry.getOffset()));
            bb = GreenballMessagesUtility.insertInteger(bb, offset, directoryEntry.getId());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 4, directoryEntry.getLength());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 8, directoryEntry.getOffset());

            offset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
            index++;
         }

         // Calculate and insert the checksum
         long checksum = GreenballMessagesUtility.getChecksum(bb, bb.length - 8);
         bb = GreenballMessagesUtility.insertLong(bb, bb.length - 8, checksum);
      }
      log4j.debug("Leaving " + METHOD);
      return bb;
   }
   // Leaving buildPackMethod()

   // Entered buildUnpackMethod()
   /**
    * This method unpacks a byte array containing a ATestMessage object.
    *
    * @return The byte array as a ATestMessage message object.
    */
   public ATestMessage unpack(byte[] ba) {
      final String METHOD = "unpack()";
      log4j.debug("Entered " + METHOD);

      ATestMessage aTestMessage = new ATestMessage();

      aTestMessage.setABoolean(GreenballMessagesUtility.getBoolean(ba, ATestMessageEnum.A_BOOLEAN.getOffsetInBits()));
      aTestMessage.setAByte(GreenballMessagesUtility.getByte(ba, ATestMessageEnum.A_BYTE.getOffsetInBits()));
      aTestMessage.setAChar(GreenballMessagesUtility.getCharacter(ba, ATestMessageEnum.A_CHAR.getOffsetInBits()));
      aTestMessage.setACalendar(GreenballMessagesUtility.getCalendar(ba, ATestMessageEnum.A_CALENDAR.getOffsetInBits()));
      aTestMessage.setADouble(GreenballMessagesUtility.getDouble(ba, ATestMessageEnum.A_DOUBLE.getOffsetInBits()));
      aTestMessage.setAnInt(GreenballMessagesUtility.getInteger(ba, ATestMessageEnum.AN_INT.getOffsetInBits()));
      aTestMessage.setALong(GreenballMessagesUtility.getLong(ba, ATestMessageEnum.A_LONG.getOffsetInBits()));
      aTestMessage.setAShort(GreenballMessagesUtility.getShort(ba, ATestMessageEnum.A_SHORT.getOffsetInBits()));
      aTestMessage.setAction(ChatAction.toEnum(GreenballMessagesUtility.getByte(ba, ATestMessageEnum.ACTION.getOffsetInBits())));
      aTestMessage.setAppState(AppState.toEnum(GreenballMessagesUtility.getByte(ba, ATestMessageEnum.APP_STATE.getOffsetInBits())));
      aTestMessage.setATenBitEnum(TenBitEnum.toEnum(GreenballMessagesUtility.getByte(ba, ATestMessageEnum.A_TEN_BIT_ENUM.getOffsetInBits())));
      aTestMessage.setUserStatus(UserStatusEnum.toEnum(GreenballMessagesUtility.getByte(ba, ATestMessageEnum.USER_STATUS.getOffsetInBits())));
      aTestMessage.setZBigOne(ZbigOne.toEnum(GreenballMessagesUtility.getShort(ba, ATestMessageEnum.Z_BIG_ONE.getOffsetInBits())));

      // Get the directory
      int directorySize = getATestMessageDirectorySize();
      theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
      int dirOffset = DIRECTORY_OFFSET;

      for (int entry = 0 ; entry < directorySize; entry++) {
         GreenballMessagesDirectoryEntry directoryEntry = new GreenballMessagesDirectoryEntry();

         int id = GreenballMessagesUtility.getInteger(ba, dirOffset * 8);
         directoryEntry.setId(id);
         int length = GreenballMessagesUtility.getInteger(ba, (dirOffset + 4) * 8);
         directoryEntry.setLength(length);
         int offset = GreenballMessagesUtility.getInteger(ba, (dirOffset + 8) * 8);
         directoryEntry.setOffset(offset);

         theDirectory[entry] = directoryEntry;

         dirOffset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      }

      for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
         int id = directoryEntry.getId();
         int offset = directoryEntry.getOffset();
         int length = directoryEntry.getLength();

         if (id == ATestMessageEnum.A_FLOAT.getId()) {
            aTestMessage.setAFloat(GreenballMessagesUtility.getFloat(ba, offset));
         }
         else if (id == ATestMessageEnum.A_STRING.getId()) {
            aTestMessage.setAString(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == ATestMessageEnum.SOME_BOOLEANS.getId()) {
            for (int index = 0; index < length; index++) {
               boolean b = GreenballMessagesUtility.getBoolean(ba, offset * 8 + index * 8);
               aTestMessage.getSomeBooleans().add(b);
            }
         }
         else if (id == ATestMessageEnum.SOME_BYTES.getId()) {
            for (int index = 0; index < length; index++) {
               byte b = GreenballMessagesUtility.getByte(ba, offset * 8 + index * 8);
               aTestMessage.getSomeBytes().add(b);
            }
         }
         else if (id == ATestMessageEnum.SOME_CHARS.getId()) {
            for (int index = 0; index < length; index++) {
               char c = GreenballMessagesUtility.getCharacter(ba, offset * 8 + index * 16);
               aTestMessage.getSomeChars().add(c);
            }
         }
         else if (id == ATestMessageEnum.SOME_CALENDARS.getId()) {
            for (int index = 0; index < length; index++) {
               Calendar c = GreenballMessagesUtility.getCalendar(ba, offset * 8 + index * 64);
               aTestMessage.getSomeCalendars().add(c);
            }
         }
         else if (id == ATestMessageEnum.SOME_DOUBLES.getId()) {
            for (int index = 0; index < length; index++) {
               double d = GreenballMessagesUtility.getDouble(ba, offset * 8 + index * 64);
               aTestMessage.getSomeDoubles().add(d);
            }
         }
         else if (id == ATestMessageEnum.SOME_FLOATS.getId()) {
            for (int index = 0; index < length; index++) {
               float f = GreenballMessagesUtility.getFloat(ba, offset * 8 + index * 32);
               aTestMessage.getSomeFloats().add(f);
            }
         }
         else if (id == ATestMessageEnum.SOME_INTS.getId()) {
            for (int index = 0; index < length; index++) {
               int i = GreenballMessagesUtility.getInteger(ba, offset * 8 + index * 32);
               aTestMessage.getSomeInts().add(i);
            }
         }
         else if (id == ATestMessageEnum.SOME_LONGS.getId()) {
            for (int index = 0; index < length; index++) {
               long l = GreenballMessagesUtility.getLong(ba, offset * 8 + index * 64);
               aTestMessage.getSomeLongs().add(l);
            }
         }
         else if (id == ATestMessageEnum.SOME_SHORTS.getId()) {
            for (int index = 0; index < length; index++) {
               short s = GreenballMessagesUtility.getShort(ba, offset * 8 + index * 16);
               aTestMessage.getSomeShorts().add(s);
            }
         }
         else if (id == ATestMessageEnum.SOME_STRINGS.getId()) {
            String s = GreenballMessagesUtility.getString(ba, offset, length);
            aTestMessage.getSomeStrings().add(s);
         }
      }

      log4j.debug("Leaving " + METHOD);
      return aTestMessage;
   }
   // Leaving buildUnpackMethod()

   // Entered buildPackStrMethod()
   /**
    * This method packs a ATestMessage object into a String. If a required attribute is not
    * provided an exception will be thrown.
    *
    * @return A String which represents a ATestMessage message object.
    * @throws MissingAttributeException
    */
   public String packStr() throws MissingAttributeException {
      final String METHOD = "packStr()";
      log4j.debug("Entered " + METHOD);

      String msg = null;
      setErrorMsg(null);
       
      /*
       * Initialize attribute values.
       */
      InitializeATestMessage initializeATestMessage = new InitializeATestMessage(this);
      Element element = initializeATestMessage.initialize();

      if (getErrorMsg() == null) {
         /*
          * Convert object to String.
          * See convertObjectToString() in JBitByBitGenerator.java.
          */
         msg = "{" + element.getName();
         for (AbstractAttribute attr : element.getAbstractAttributes()) {
            msg = buildString(attr, msg);
         }
         msg = msg.concat("}");

         log4j.debug("msg: " + msg);
      }

      log4j.debug("Leaving " + METHOD);
      return msg;
   }
   // Leaving buildPackStrMethod()

   // Entered buildUnpackStrMethod()
   /**
    * The unpack() method unpacks a String into an object. The String must conform to the
    * SMBG grammar.
    *
     * @return The message string as an object.
    */
   public ATestMessage unpack(String buffer) {
      final String METHOD = "unpack()";
      log4j.debug("Entered " + METHOD);

      setErrorMsg(null);

      // Create the lexer
      log4j.debug("lexing...");
      SMBGLexer lexer = new SMBGLexer(new ANTLRStringStream(buffer));

      int nbrOfSyntaxErrors = lexer.getNumberOfSyntaxErrors();
      log4j.debug("# of lexer errors: " + nbrOfSyntaxErrors);

      // Check for errors
      if (nbrOfSyntaxErrors != 0) {
         for (String error : lexer.getErrors()) {
            log4j.error(error);
         }

         return null;
      }

      // Wrap a token-stream around the lexer
      CommonTokenStream tokenStream = new CommonTokenStream(lexer);

      // Create the parser
      log4j.debug("parsing...");
      SMBGParser parser = new SMBGParser(tokenStream);

      // Check for errors
      nbrOfSyntaxErrors = parser.getNumberOfSyntaxErrors();
      log4j.debug("# of parse errors: " + nbrOfSyntaxErrors);

      if (nbrOfSyntaxErrors != 0) {
         for (String error : parser.getErrors()) {
               log4j.error(error);
         }

         return null;
      }

      // Unpack the string into objects
      log4j.debug("unpacking...");
      try {
         parser.unpack();
      } catch (RecognitionException e) {
         log4j.error("Error: " + e.getMessage());
         setErrorMsg(e.getMessage());
         return null;
      }
      
      Element element = parser.getElement();
      element.dump();

      /*
       * Instantiate the ATestMessage object.
       */
       InstantiateATestMessage instantiateATestMessage = new InstantiateATestMessage(element);
       ATestMessage aTestMessage = instantiateATestMessage.instantiate();

      /*
       * Verify that a value was provided for all mandatory attributes.
       */
      String result = instantiateATestMessage.validate();
      if (result != null) {
         log4j.error("Error: " + result);
         setErrorMsg(result);
         return null;
      }

      log4j.debug("Leaving " + METHOD);
      return aTestMessage;
   }
   // Leaving buildUnpackStrMethod()

   private String buildString(AbstractAttribute attr, String msg) {
      for (KeyValuePair kvp : attr.getKeyValuePairs()) {
         msg = msg.concat(" " + kvp.getKey() + ":" + kvp.getValue());
      }

      for (Element element : attr.getElements()) {
         msg = msg.concat(" {" + element.getName());
         for (AbstractAttribute abstractAttribute : element.getAbstractAttributes()) {
            msg = buildString(abstractAttribute, msg);
         }
         msg = msg.concat("}");
      }

      return msg;
   }

   /**
    * This method sets the aBoolean attribute. Setting of this value is required.
    * @param aBoolean The aBoolean attribute.
    */
   public void setABoolean(Boolean aBoolean) {
      this.aBoolean = aBoolean;
   }

   /**
    * This method sets the aByte attribute. Setting of this value is required.
    * @param aByte The aByte attribute.
    */
   public void setAByte(Byte aByte) {
      this.aByte = aByte;
   }

   /**
    * This method sets the aChar attribute. Setting of this value is required.
    * @param aChar The aChar attribute.
    */
   public void setAChar(Character aChar) {
      this.aChar = aChar;
   }

   /**
    * This method sets the aCalendar attribute. Setting of this value is required.
    * @param aCalendar The aCalendar attribute.
    */
   public void setACalendar(Calendar aCalendar) {
      this.aCalendar = aCalendar;
   }

   /**
    * This method sets the aDouble attribute. Setting of this value is required.
    * @param aDouble The aDouble attribute.
    */
   public void setADouble(Double aDouble) {
      this.aDouble = aDouble;
   }

   /**
    * This method sets the aFloat attribute. Setting of this value is optional.
    * @param aFloat The aFloat attribute.
    */
   public void setAFloat(Float aFloat) {
      this.aFloat = aFloat;
   }

   /**
    * This method sets the anInt attribute. Setting of this value is required.
    * @param anInt The anInt attribute.
    */
   public void setAnInt(Integer anInt) {
      this.anInt = anInt;
   }

   /**
    * This method sets the aLong attribute. Setting of this value is required.
    * @param aLong The aLong attribute.
    */
   public void setALong(Long aLong) {
      this.aLong = aLong;
   }

   /**
    * This method sets the aShort attribute. Setting of this value is required.
    * @param aShort The aShort attribute.
    */
   public void setAShort(Short aShort) {
      this.aShort = aShort;
   }

   /**
    * This method sets the aString attribute. Setting of this value is required.
    * @param aString The aString attribute.
    */
   public void setAString(String aString) {
      this.aString = aString;
   }

   /**
    * This method sets the someBooleans attribute. Setting of this value is required.
    * @param someBooleans The someBooleans attribute.
    */
   public void setSomeBooleans(List<Boolean> someBooleans) {
      this.someBooleans = someBooleans;
   }

   /**
    * This method sets the someBytes attribute. Setting of this value is required.
    * @param someBytes The someBytes attribute.
    */
   public void setSomeBytes(List<Byte> someBytes) {
      this.someBytes = someBytes;
   }

   /**
    * This method sets the someChars attribute. Setting of this value is required.
    * @param someChars The someChars attribute.
    */
   public void setSomeChars(List<Character> someChars) {
      this.someChars = someChars;
   }

   /**
    * This method sets the someCalendars attribute. Setting of this value is required.
    * @param someCalendars The someCalendars attribute.
    */
   public void setSomeCalendars(List<Calendar> someCalendars) {
      this.someCalendars = someCalendars;
   }

   /**
    * This method sets the someDoubles attribute. Setting of this value is required.
    * @param someDoubles The someDoubles attribute.
    */
   public void setSomeDoubles(List<Double> someDoubles) {
      this.someDoubles = someDoubles;
   }

   /**
    * This method sets the someFloats attribute. Setting of this value is required.
    * @param someFloats The someFloats attribute.
    */
   public void setSomeFloats(List<Float> someFloats) {
      this.someFloats = someFloats;
   }

   /**
    * This method sets the someInts attribute. Setting of this value is required.
    * @param someInts The someInts attribute.
    */
   public void setSomeInts(List<Integer> someInts) {
      this.someInts = someInts;
   }

   /**
    * This method sets the someLongs attribute. Setting of this value is required.
    * @param someLongs The someLongs attribute.
    */
   public void setSomeLongs(List<Long> someLongs) {
      this.someLongs = someLongs;
   }

   /**
    * This method sets the someShorts attribute. Setting of this value is required.
    * @param someShorts The someShorts attribute.
    */
   public void setSomeShorts(List<Short> someShorts) {
      this.someShorts = someShorts;
   }

   /**
    * This method sets the someStrings attribute. Setting of this value is required.
    * @param someStrings The someStrings attribute.
    */
   public void setSomeStrings(List<String> someStrings) {
      this.someStrings = someStrings;
   }

   /**
    * This method gets the aBoolean attribute. The aBoolean attribute is a required attribute.
    */
   public Boolean getABoolean() {
      return this.aBoolean;
   }

   /**
    * This method gets the aByte attribute. The aByte attribute is a required attribute.
    */
   public Byte getAByte() {
      return this.aByte;
   }

   /**
    * This method gets the aChar attribute. The aChar attribute is a required attribute.
    */
   public Character getAChar() {
      return this.aChar;
   }

   /**
    * This method gets the aCalendar attribute. The aCalendar attribute is a required attribute.
    */
   public Calendar getACalendar() {
      return this.aCalendar;
   }

   /**
    * This method gets the aDouble attribute. The aDouble attribute is a required attribute.
    */
   public Double getADouble() {
      return this.aDouble;
   }

   /**
    * This method gets the aFloat attribute. The aFloat attribute is an optional attribute.
    */
   public Float getAFloat() {
      return this.aFloat;
   }

   /**
    * This method gets the anInt attribute. The anInt attribute is a required attribute.
    */
   public Integer getAnInt() {
      return this.anInt;
   }

   /**
    * This method gets the aLong attribute. The aLong attribute is a required attribute.
    */
   public Long getALong() {
      return this.aLong;
   }

   /**
    * This method gets the aShort attribute. The aShort attribute is a required attribute.
    */
   public Short getAShort() {
      return this.aShort;
   }

   /**
    * This method gets the aString attribute. The aString attribute is a required attribute.
    */
   public String getAString() {
      return this.aString;
   }

   /**
    * This method gets the someBooleans attribute. The someBooleans attribute is a required attribute.
    */
   public List<Boolean> getSomeBooleans() {
      if (this.someBooleans == null) {
         this.someBooleans = new ArrayList<Boolean>();
      }
      return this.someBooleans;
   }

   /**
    * This method gets the someBytes attribute. The someBytes attribute is a required attribute.
    */
   public List<Byte> getSomeBytes() {
      if (this.someBytes == null) {
         this.someBytes = new ArrayList<Byte>();
      }
      return this.someBytes;
   }

   /**
    * This method gets the someChars attribute. The someChars attribute is a required attribute.
    */
   public List<Character> getSomeChars() {
      if (this.someChars == null) {
         this.someChars = new ArrayList<Character>();
      }
      return this.someChars;
   }

   /**
    * This method gets the someCalendars attribute. The someCalendars attribute is a required attribute.
    */
   public List<Calendar> getSomeCalendars() {
      if (this.someCalendars == null) {
         this.someCalendars = new ArrayList<Calendar>();
      }
      return this.someCalendars;
   }

   /**
    * This method gets the someDoubles attribute. The someDoubles attribute is a required attribute.
    */
   public List<Double> getSomeDoubles() {
      if (this.someDoubles == null) {
         this.someDoubles = new ArrayList<Double>();
      }
      return this.someDoubles;
   }

   /**
    * This method gets the someFloats attribute. The someFloats attribute is a required attribute.
    */
   public List<Float> getSomeFloats() {
      if (this.someFloats == null) {
         this.someFloats = new ArrayList<Float>();
      }
      return this.someFloats;
   }

   /**
    * This method gets the someInts attribute. The someInts attribute is a required attribute.
    */
   public List<Integer> getSomeInts() {
      if (this.someInts == null) {
         this.someInts = new ArrayList<Integer>();
      }
      return this.someInts;
   }

   /**
    * This method gets the someLongs attribute. The someLongs attribute is a required attribute.
    */
   public List<Long> getSomeLongs() {
      if (this.someLongs == null) {
         this.someLongs = new ArrayList<Long>();
      }
      return this.someLongs;
   }

   /**
    * This method gets the someShorts attribute. The someShorts attribute is a required attribute.
    */
   public List<Short> getSomeShorts() {
      if (this.someShorts == null) {
         this.someShorts = new ArrayList<Short>();
      }
      return this.someShorts;
   }

   /**
    * This method gets the someStrings attribute. The someStrings attribute is a required attribute.
    */
   public List<String> getSomeStrings() {
      if (this.someStrings == null) {
         this.someStrings = new ArrayList<String>();
      }
      return this.someStrings;
   }

   /**
    * This method sets the action attribute. Setting of this value is required.
    * @param action The action.
    */
   public void setAction(ChatAction action) {
      this.action = action;
   }

   /**
    * This method sets the appState attribute. Setting of this value is required.
    * @param appState The appState.
    */
   public void setAppState(AppState appState) {
      this.appState = appState;
   }

   /**
    * This method sets the aTenBitEnum attribute. Setting of this value is required.
    * @param aTenBitEnum The aTenBitEnum.
    */
   public void setATenBitEnum(TenBitEnum aTenBitEnum) {
      this.aTenBitEnum = aTenBitEnum;
   }

   /**
    * This method sets the userStatus attribute. Setting of this value is required.
    * @param userStatus The userStatus.
    */
   public void setUserStatus(UserStatusEnum userStatus) {
      this.userStatus = userStatus;
   }

   /**
    * This method sets the zBigOne attribute. Setting of this value is required.
    * @param zBigOne The zBigOne.
    */
   public void setZBigOne(ZbigOne zBigOne) {
      this.zBigOne = zBigOne;
   }

   /**
    * This method gets the action attribute. The action attribute is a required attribute.
    * @return The action attribute.
    */
   public ChatAction getAction() {
      return this.action;
   }

   /**
    * This method gets the appState attribute. The appState attribute is a required attribute.
    * @return The appState attribute.
    */
   public AppState getAppState() {
      return this.appState;
   }

   /**
    * This method gets the aTenBitEnum attribute. The aTenBitEnum attribute is a required attribute.
    * @return The aTenBitEnum attribute.
    */
   public TenBitEnum getATenBitEnum() {
      return this.aTenBitEnum;
   }

   /**
    * This method gets the userStatus attribute. The userStatus attribute is a required attribute.
    * @return The userStatus attribute.
    */
   public UserStatusEnum getUserStatus() {
      return this.userStatus;
   }

   /**
    * This method gets the zBigOne attribute. The zBigOne attribute is a required attribute.
    * @return The zBigOne attribute.
    */
   public ZbigOne getZBigOne() {
      return this.zBigOne;
   }

   /**
    * This method gets the size of the directory.
    */
   private int getATestMessageDirectorySize() {
      int directorySize = 0;

      // aFloat
      directorySize++;
      // aString
      directorySize++;
      // someBooleans
      directorySize++;
      // someBytes
      directorySize++;
      // someChars
      directorySize++;
      // someCalendars
      directorySize++;
      // someDoubles
      directorySize++;
      // someFloats
      directorySize++;
      // someInts
      directorySize++;
      // someLongs
      directorySize++;
      // someShorts
      directorySize++;
      // someStrings
      directorySize += getSomeStrings().size();

      return directorySize;
   }


   /**
    * This method gets the size of the ATestMessage object.
    * @return The size in bytes.
    */
   public int getATestMessageSize() {
      int size = 0;

      int directorySize = getATestMessageDirectorySize();
      size += directorySize * GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      // Add two bytes for the ID
      size += 2;
      // Add eight bytes for the CRC
      size += 8;
      // Add size of aBoolean
      size += 1;
      // Add size of aByte
      size += 1;
      // Add size of aChar
      size += 2;
      // Add size of aCalendar
      size += 8;
      // Add size of aDouble
      size += 8;
      // Add size of aFloat
      size += 4;
      // Add size of anInt
      size += 4;
      // Add size of aLong
      size += 8;
      // Add size of aShort
      size += 2;
      // Add size of aString
      size += (getAString() != null ? getAString().length() : 0);
      // Add size of someBooleans
      size += 1 * getSomeBooleans().size();
      // Add size of someBytes
      size += 1 * getSomeBytes().size();
      // Add size of someChars
      size += 2 * getSomeChars().size();
      // Add size of someCalendars
      size += 8 * getSomeCalendars().size();
      // Add size of someDoubles
      size += 8 * getSomeDoubles().size();
      // Add size of someFloats
      size += 4 * getSomeFloats().size();
      // Add size of someInts
      size += 4 * getSomeInts().size();
      // Add size of someLongs
      size += 8 * getSomeLongs().size();
      // Add size of someShorts
      size += 2 * getSomeShorts().size();
      // Add size of someStrings
      for (String s : getSomeStrings()) {
         size += s.getBytes(Charset.forName("UTF-8")).length;
      }
      // Add size of action
      size += 1;
      // Add size of appState
      size += 1;
      // Add size of aTenBitEnum
      size += 1;
      // Add size of userStatus
      size += 1;
      // Add size of zBigOne
      size += 2;

      return size;
   }

   @Override
   public String toString() {
      StringBuilder result = new StringBuilder();
      String NEW_LINE = System.getProperty("line.separator");

      result.append(this.getClass().getSimpleName() + " Object {" + NEW_LINE);
      result.append(" aBoolean: " + aBoolean + NEW_LINE);
      result.append(" aByte: " + aByte + NEW_LINE);
      result.append(" aChar: " + aChar + NEW_LINE);
      result.append(" aCalendar: " + aCalendar + NEW_LINE);
      result.append(" aDouble: " + aDouble + NEW_LINE);
      result.append(" aFloat: " + aFloat + NEW_LINE);
      result.append(" anInt: " + anInt + NEW_LINE);
      result.append(" aLong: " + aLong + NEW_LINE);
      result.append(" aShort: " + aShort + NEW_LINE);
      result.append(" aString: " + aString + NEW_LINE);

      if (someBooleans != null) {
         int i = 0;
         for (Boolean someBooleansBoolean : someBooleans) {
            result.append(" someBooleans[" + i + "]: " + someBooleansBoolean.toString() + NEW_LINE);
            i++;
         }
      }

      if (someBytes != null) {
         int i = 0;
         for (Byte someBytesByte : someBytes) {
            result.append(" someBytes[" + i + "]: " + someBytesByte.toString() + NEW_LINE);
            i++;
         }
      }

      if (someChars != null) {
         int i = 0;
         for (Character someCharsChar : someChars) {
            result.append(" someChars[" + i + "]: " + someCharsChar.toString() + NEW_LINE);
            i++;
         }
      }

      if (someCalendars != null) {
         int i = 0;
         for (Calendar someCalendarsCalendar : someCalendars) {
            result.append(" someCalendars[" + i + "]: " + someCalendarsCalendar.toString() + NEW_LINE);
            i++;
         }
      }

      if (someDoubles != null) {
         int i = 0;
         for (Double someDoublesDouble : someDoubles) {
            result.append(" someDoubles[" + i + "]: " + someDoublesDouble.toString() + NEW_LINE);
            i++;
         }
      }

      if (someFloats != null) {
         int i = 0;
         for (Float someFloatsFloat : someFloats) {
            result.append(" someFloats[" + i + "]: " + someFloatsFloat.toString() + NEW_LINE);
            i++;
         }
      }

      if (someInts != null) {
         int i = 0;
         for (Integer someIntsInteger : someInts) {
            result.append(" someInts[" + i + "]: " + someIntsInteger.toString() + NEW_LINE);
            i++;
         }
      }

      if (someLongs != null) {
         int i = 0;
         for (Long someLongsLong : someLongs) {
            result.append(" someLongs[" + i + "]: " + someLongsLong.toString() + NEW_LINE);
            i++;
         }
      }

      if (someShorts != null) {
         int i = 0;
         for (Short someShortsShort : someShorts) {
            result.append(" someShorts[" + i + "]: " + someShortsShort.toString() + NEW_LINE);
            i++;
         }
      }

      if (someStrings != null) {
         int i = 0;
         for (String someStringsString : someStrings) {
            result.append(" someStrings[" + i + "]: " + someStringsString.toString() + NEW_LINE);
            i++;
         }
      }

      result.append(" action: " + action + NEW_LINE);
      result.append(" appState: " + appState + NEW_LINE);
      result.append(" aTenBitEnum: " + aTenBitEnum + NEW_LINE);
      result.append(" userStatus: " + userStatus + NEW_LINE);
      result.append(" zBigOne: " + zBigOne + NEW_LINE);
      result.append("} ");

      return result.toString();
   }

   /**
    * The hashCode method returns this object's hashCode.
    */
   @Override
   public int hashCode() {
      final int prime = 31;
      int result = 1;
      result = prime * result
         + ((Boolean) aBoolean).hashCode();
      result = prime * result
         + ((Byte) aByte).hashCode();
      result = prime * result
         + ((Character) aChar).hashCode();
      result = prime * result
         + ((Calendar) aCalendar).hashCode();
      result = prime * result
         + ((Double) aDouble).hashCode();
      result = prime * result
         + ((Float) aFloat).hashCode();
      result = prime * result
         + ((Integer) anInt).hashCode();
      result = prime * result
         + ((Long) aLong).hashCode();
      result = prime * result
         + ((Short) aShort).hashCode();
      result = prime * result
         + ((String) aString).hashCode();
      for (Boolean b : someBooleans) {
         result = prime * result + b.hashCode();
      }
      for (Byte b : someBytes) {
         result = prime * result + b.hashCode();
      }
      for (Character c : someChars) {
         result = prime * result + c.hashCode();
      }
      for (Calendar c : someCalendars) {
         result = prime * result + c.hashCode();
      }
      for (Double d : someDoubles) {
         result = prime * result + d.hashCode();
      }
      for (Float f : someFloats) {
         result = prime * result + f.hashCode();
      }
      for (Integer i : someInts) {
         result = prime * result + i.hashCode();
      }
      for (Long l : someLongs) {
         result = prime * result + l.hashCode();
      }
      for (Short s : someShorts) {
         result = prime * result + s.hashCode();
      }
      for (String s : someStrings) {
         result = prime * result + s.hashCode();
      }
      return result;
   }

   /**
    * The equals method checks for equality. 
    */
   public boolean equals(Object obj) {
      if (obj == this) return true;
      if (obj == null) return false;
      if (getClass() != obj.getClass()) return false;

      ATestMessage aTestMessage = (ATestMessage) obj;
      if (aTestMessage.getABoolean() != this.getABoolean()) {
         return false;
      }

      if (aTestMessage.getAByte() != this.getAByte()) {
         return false;
      }

      if (aTestMessage.getAChar() != this.getAChar()) {
         return false;
      }

      if (aTestMessage.getACalendar() != this.getACalendar()) {
         return false;
      }

      if (aTestMessage.getADouble() != this.getADouble()) {
         return false;
      }

      if (aTestMessage.getAFloat() != this.getAFloat()) {
         return false;
      }

      if (aTestMessage.getAnInt() != this.getAnInt()) {
         return false;
      }

      if (aTestMessage.getALong() != this.getALong()) {
         return false;
      }

      if (aTestMessage.getAShort() != this.getAShort()) {
         return false;
      }

      if (!aTestMessage.getAString().equals(this.getAString())) {
         return false;
      }

      if (aTestMessage.getSomeBooleans() != this.getSomeBooleans()) {
         return false;
      }

      if (aTestMessage.getSomeBytes() != this.getSomeBytes()) {
         return false;
      }

      if (aTestMessage.getSomeChars() != this.getSomeChars()) {
         return false;
      }

      if (aTestMessage.getSomeCalendars() != this.getSomeCalendars()) {
         return false;
      }

      if (aTestMessage.getSomeDoubles() != this.getSomeDoubles()) {
         return false;
      }

      if (aTestMessage.getSomeFloats() != this.getSomeFloats()) {
         return false;
      }

      if (aTestMessage.getSomeInts() != this.getSomeInts()) {
         return false;
      }

      if (aTestMessage.getSomeLongs() != this.getSomeLongs()) {
         return false;
      }

      if (aTestMessage.getSomeShorts() != this.getSomeShorts()) {
         return false;
      }

      if (!aTestMessage.getSomeStrings().equals(this.getSomeStrings())) {
         return false;
      }

      if (aTestMessage.getAction() != this.getAction()) {
         return false;
      }

      if (aTestMessage.getAppState() != this.getAppState()) {
         return false;
      }

      if (aTestMessage.getATenBitEnum() != this.getATenBitEnum()) {
         return false;
      }

      if (aTestMessage.getUserStatus() != this.getUserStatus()) {
         return false;
      }

      if (aTestMessage.getZBigOne() != this.getZBigOne()) {
         return false;
      }

      return true;
   }
}
