/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInitializationFile()).
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializeScopeIdType class initializes an Element object with a ScopeIdType object.
 */
public class InitializeScopeIdType {
private static Logger log4j = Logger.getLogger(InitializeScopeIdType.class);

private String theErrorMsg;
private ScopeIdType scopeIdType;

public InitializeScopeIdType(ScopeIdType scopeIdType) {
this.scopeIdType = scopeIdType;
}

/**
 * The initialize method returns an Element object initialized with data from a
 * ScopeIdType object.
 * @param elementName The name of the element.
 * @return The element.
 * @throws MissingAttributeException
 */
protected Element initialize(String elementName) 
    throws MissingAttributeException {
final String METHOD = "initialize()";
log4j.debug("Entered " + METHOD);
Element element = null;

if (scopeIdType != null) {
log4j.debug("Creating new element: " + elementName);
element = new Element(elementName);

if (scopeIdType.getId() != null) {
   AbstractAttribute abstractAttribute = initializeId(scopeIdType.getId());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"id\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (scopeIdType.getSmsMessageSent() != null) {
   AbstractAttribute abstractAttribute = initializeSmsMessageSent(scopeIdType.getSmsMessageSent());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"smsMessageSent\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (scopeIdType.getEmailMessageSent() != null) {
   AbstractAttribute abstractAttribute = initializeEmailMessageSent(scopeIdType.getEmailMessageSent());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"emailMessageSent\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

}

log4j.debug("Leaving " + METHOD);
return element;
}

/*
 * This method initializes the id attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeId(String id)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (id != null) {
      log4j.debug("Creating new KeyValuePair: id");
      KeyValuePair kvp = new KeyValuePair("id", "<STRING_BEGIN>" + id + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"id\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the smsMessageSent attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeSmsMessageSent(Boolean smsMessageSent)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (smsMessageSent != null) {
      log4j.debug("Creating new KeyValuePair: smsMessageSent");
      KeyValuePair kvp = new KeyValuePair("smsMessageSent", smsMessageSent.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"smsMessageSent\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the emailMessageSent attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeEmailMessageSent(Boolean emailMessageSent)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (emailMessageSent != null) {
      log4j.debug("Creating new KeyValuePair: emailMessageSent");
      KeyValuePair kvp = new KeyValuePair("emailMessageSent", emailMessageSent.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"emailMessageSent\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/**
* This method returns the error message or null if no error occurred.
*/
public String getErrorMsg() {
   return theErrorMsg;
}

private void setErrorMsg(String errorMsg) {
   theErrorMsg = errorMsg;
}


}
