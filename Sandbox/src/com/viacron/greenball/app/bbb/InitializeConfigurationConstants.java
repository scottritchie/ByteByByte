/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateInitializationFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializeConfigurationConstants class initializes the element object with the ConfigurationConstants object.
 *
 */
public class InitializeConfigurationConstants {
   private static Logger log4j = Logger.getLogger(InitializeConfigurationConstants.class);
   private String theErrorMsg;
   private Element element;
   private ConfigurationConstants configurationConstants;

   /**
    * The InitializeConfigurationConstants class initializes the element object with the ConfigurationConstants object.
    *
    * @param configurationConstants The object which will be used to initialize the element object.
    */
   public InitializeConfigurationConstants(ConfigurationConstants configurationConstants) {
      this.configurationConstants = configurationConstants;

      this.element = new Element("ConfigurationConstants");
   }

   /**
    * This method initializes the element.
    */
   public Element initialize() throws MissingAttributeException {
      final String METHOD = "initialize()";
      log4j.debug("Entered " + METHOD);

      log4j.debug("element.getName(): ConfigurationConstants");

      if (configurationConstants.getConfigurationConstantNameMaxLength() != null) {
         AbstractAttribute abstractAttribute = initializeConfigurationConstantNameMaxLength(configurationConstants.getConfigurationConstantNameMaxLength());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"configurationConstantNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (configurationConstants.getFirstNameMaxLength() != null) {
         AbstractAttribute abstractAttribute = initializeFirstNameMaxLength(configurationConstants.getFirstNameMaxLength());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"firstNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (configurationConstants.getLastNameMaxLength() != null) {
         AbstractAttribute abstractAttribute = initializeLastNameMaxLength(configurationConstants.getLastNameMaxLength());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"lastNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (configurationConstants.getMiddleNameMaxLength() != null) {
         AbstractAttribute abstractAttribute = initializeMiddleNameMaxLength(configurationConstants.getMiddleNameMaxLength());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"middleNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (configurationConstants.getMetaModelNameMaxLength() != null) {
         AbstractAttribute abstractAttribute = initializeMetaModelNameMaxLength(configurationConstants.getMetaModelNameMaxLength());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"metaModelNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (configurationConstants.getMetaModelDescriptionMaxLength() != null) {
         AbstractAttribute abstractAttribute = initializeMetaModelDescriptionMaxLength(configurationConstants.getMetaModelDescriptionMaxLength());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"metaModelDescriptionMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (configurationConstants.getMetaModelOwnerMaxLength() != null) {
         AbstractAttribute abstractAttribute = initializeMetaModelOwnerMaxLength(configurationConstants.getMetaModelOwnerMaxLength());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"metaModelOwnerMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (configurationConstants.getOrgDisplayNameMaxLength() != null) {
         AbstractAttribute abstractAttribute = initializeOrgDisplayNameMaxLength(configurationConstants.getOrgDisplayNameMaxLength());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"orgDisplayNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (configurationConstants.getPasswordMaxLength() != null) {
         AbstractAttribute abstractAttribute = initializePasswordMaxLength(configurationConstants.getPasswordMaxLength());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"passwordMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (configurationConstants.getPasswordMinLength() != null) {
         AbstractAttribute abstractAttribute = initializePasswordMinLength(configurationConstants.getPasswordMinLength());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"passwordMinLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (configurationConstants.getPathMaxLength() != null) {
         AbstractAttribute abstractAttribute = initializePathMaxLength(configurationConstants.getPathMaxLength());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"pathMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (configurationConstants.getSubscriptionRequestMessageMaxLength() != null) {
         AbstractAttribute abstractAttribute = initializeSubscriptionRequestMessageMaxLength(configurationConstants.getSubscriptionRequestMessageMaxLength());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"subscriptionRequestMessageMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (configurationConstants.getUserNameMaxLength() != null) {
         AbstractAttribute abstractAttribute = initializeUserNameMaxLength(configurationConstants.getUserNameMaxLength());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"userNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (configurationConstants.getUserRoleMaxLength() != null) {
         AbstractAttribute abstractAttribute = initializeUserRoleMaxLength(configurationConstants.getUserRoleMaxLength());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"userRoleMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (configurationConstants.getUserStatusMaxLength() != null) {
         AbstractAttribute abstractAttribute = initializeUserStatusMaxLength(configurationConstants.getUserStatusMaxLength());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"userStatusMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (configurationConstants.getPaymentStatusMaxLength() != null) {
         AbstractAttribute abstractAttribute = initializePaymentStatusMaxLength(configurationConstants.getPaymentStatusMaxLength());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"paymentStatusMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (configurationConstants.getSessionId() != null) {
         AbstractAttribute abstractAttribute = initializeSessionId(configurationConstants.getSessionId());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"sessionId\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }


      log4j.debug("Leaving " + METHOD);
      return element;
   }

   /*
    * This method initializes the configurationConstantNameMaxLength attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeConfigurationConstantNameMaxLength(Integer configurationConstantNameMaxLength)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (configurationConstantNameMaxLength != null) {
         log4j.debug("Creating new KeyValuePair: configurationConstantNameMaxLength");
         KeyValuePair kvp = new KeyValuePair("configurationConstantNameMaxLength", Integer.toString(configurationConstantNameMaxLength));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"configurationConstantNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the firstNameMaxLength attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeFirstNameMaxLength(Integer firstNameMaxLength)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (firstNameMaxLength != null) {
         log4j.debug("Creating new KeyValuePair: firstNameMaxLength");
         KeyValuePair kvp = new KeyValuePair("firstNameMaxLength", Integer.toString(firstNameMaxLength));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"firstNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the lastNameMaxLength attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeLastNameMaxLength(Integer lastNameMaxLength)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (lastNameMaxLength != null) {
         log4j.debug("Creating new KeyValuePair: lastNameMaxLength");
         KeyValuePair kvp = new KeyValuePair("lastNameMaxLength", Integer.toString(lastNameMaxLength));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"lastNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the middleNameMaxLength attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeMiddleNameMaxLength(Integer middleNameMaxLength)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (middleNameMaxLength != null) {
         log4j.debug("Creating new KeyValuePair: middleNameMaxLength");
         KeyValuePair kvp = new KeyValuePair("middleNameMaxLength", Integer.toString(middleNameMaxLength));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"middleNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the metaModelNameMaxLength attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeMetaModelNameMaxLength(Integer metaModelNameMaxLength)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (metaModelNameMaxLength != null) {
         log4j.debug("Creating new KeyValuePair: metaModelNameMaxLength");
         KeyValuePair kvp = new KeyValuePair("metaModelNameMaxLength", Integer.toString(metaModelNameMaxLength));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"metaModelNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the metaModelDescriptionMaxLength attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeMetaModelDescriptionMaxLength(Integer metaModelDescriptionMaxLength)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (metaModelDescriptionMaxLength != null) {
         log4j.debug("Creating new KeyValuePair: metaModelDescriptionMaxLength");
         KeyValuePair kvp = new KeyValuePair("metaModelDescriptionMaxLength", Integer.toString(metaModelDescriptionMaxLength));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"metaModelDescriptionMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the metaModelOwnerMaxLength attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeMetaModelOwnerMaxLength(Integer metaModelOwnerMaxLength)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (metaModelOwnerMaxLength != null) {
         log4j.debug("Creating new KeyValuePair: metaModelOwnerMaxLength");
         KeyValuePair kvp = new KeyValuePair("metaModelOwnerMaxLength", Integer.toString(metaModelOwnerMaxLength));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"metaModelOwnerMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the orgDisplayNameMaxLength attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeOrgDisplayNameMaxLength(Integer orgDisplayNameMaxLength)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (orgDisplayNameMaxLength != null) {
         log4j.debug("Creating new KeyValuePair: orgDisplayNameMaxLength");
         KeyValuePair kvp = new KeyValuePair("orgDisplayNameMaxLength", Integer.toString(orgDisplayNameMaxLength));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"orgDisplayNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the passwordMaxLength attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializePasswordMaxLength(Integer passwordMaxLength)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (passwordMaxLength != null) {
         log4j.debug("Creating new KeyValuePair: passwordMaxLength");
         KeyValuePair kvp = new KeyValuePair("passwordMaxLength", Integer.toString(passwordMaxLength));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"passwordMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the passwordMinLength attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializePasswordMinLength(Integer passwordMinLength)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (passwordMinLength != null) {
         log4j.debug("Creating new KeyValuePair: passwordMinLength");
         KeyValuePair kvp = new KeyValuePair("passwordMinLength", Integer.toString(passwordMinLength));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"passwordMinLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the pathMaxLength attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializePathMaxLength(Integer pathMaxLength)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (pathMaxLength != null) {
         log4j.debug("Creating new KeyValuePair: pathMaxLength");
         KeyValuePair kvp = new KeyValuePair("pathMaxLength", Integer.toString(pathMaxLength));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"pathMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the subscriptionRequestMessageMaxLength attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSubscriptionRequestMessageMaxLength(Integer subscriptionRequestMessageMaxLength)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (subscriptionRequestMessageMaxLength != null) {
         log4j.debug("Creating new KeyValuePair: subscriptionRequestMessageMaxLength");
         KeyValuePair kvp = new KeyValuePair("subscriptionRequestMessageMaxLength", Integer.toString(subscriptionRequestMessageMaxLength));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"subscriptionRequestMessageMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the userNameMaxLength attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeUserNameMaxLength(Integer userNameMaxLength)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (userNameMaxLength != null) {
         log4j.debug("Creating new KeyValuePair: userNameMaxLength");
         KeyValuePair kvp = new KeyValuePair("userNameMaxLength", Integer.toString(userNameMaxLength));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"userNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the userRoleMaxLength attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeUserRoleMaxLength(Integer userRoleMaxLength)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (userRoleMaxLength != null) {
         log4j.debug("Creating new KeyValuePair: userRoleMaxLength");
         KeyValuePair kvp = new KeyValuePair("userRoleMaxLength", Integer.toString(userRoleMaxLength));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"userRoleMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the userStatusMaxLength attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeUserStatusMaxLength(Integer userStatusMaxLength)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (userStatusMaxLength != null) {
         log4j.debug("Creating new KeyValuePair: userStatusMaxLength");
         KeyValuePair kvp = new KeyValuePair("userStatusMaxLength", Integer.toString(userStatusMaxLength));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"userStatusMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the paymentStatusMaxLength attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializePaymentStatusMaxLength(Integer paymentStatusMaxLength)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (paymentStatusMaxLength != null) {
         log4j.debug("Creating new KeyValuePair: paymentStatusMaxLength");
         KeyValuePair kvp = new KeyValuePair("paymentStatusMaxLength", Integer.toString(paymentStatusMaxLength));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"paymentStatusMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the sessionId attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeSessionId(String sessionId)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (sessionId != null) {
         log4j.debug("Creating new KeyValuePair: sessionId");
         KeyValuePair kvp = new KeyValuePair("sessionId", "<STRING_BEGIN>" + sessionId + "<STRING_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"sessionId\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /**
   * This method returns the error message or null if no error occurred.
   */
   public String getErrorMsg() {
      return theErrorMsg;
   }

   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }

}
