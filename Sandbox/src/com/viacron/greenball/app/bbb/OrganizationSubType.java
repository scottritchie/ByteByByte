/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateClassFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
/**
 * The OrganizationSubType class is a SubType referenced by message objects defined
 * by the GreenballMessages grammar.
 */
public class OrganizationSubType {
   private static final int ID = GreenballMessagesEnum.ORGANIZATION_SUB_TYPE.getId();

   /**
    * The number of bits required to represent the OrganizationSubTypeEnum IDs.
    * # of attributes: 16
    * # of PEnumRefs: 0
    */
   private static final int ID_BITS = 4;

   private static GreenballMessagesDirectoryEntry[] theDirectory;
   private static final int DIRECTORY_OFFSET = 12;

   private static Logger log4j = Logger.getLogger(OrganizationSubType.class);

   // Entered buildClassEnum()
   private enum OrganizationSubTypeEnum {
      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      ID(0, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      USER(1, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      PASSWORD(2, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      ADDITIONAL_PASSWORD(3, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      DISPLAY_NAME(4, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      DESCRIPTION(5, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      OWNER(6, -1, 0, true),

      // sizeInBits: 64
      CREATION_TIME(7, 0, 0, false),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SEND_SUBSCRIPTION_REQUESTS_TO(8, -1, 0, true),

      // sizeInBits: 8
      IS_PRIVATE(9, 64, 0, false),

      // sizeInBits: 8
      IS_TWO_FACTOR_AUTHENTICATION_REQUIRED(10, 72, 0, false),

      // sizeInBits: 8
      IS_LIST_IN_DIRECTORY(11, 80, 0, false),

      // sizeInBits: 8
      IS_LOCKED(12, 88, 0, false),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      LOCKED_BY(13, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      LOCK_TIMESTAMP(14, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      TEMPLATE(15, -1, 0, true);

      private final int id;
      private final int offsetInBits;
      private int length;
      private boolean isDirectoryEntry;

      OrganizationSubTypeEnum(int id, int offsetInBits, int length, boolean isDirectoryEntry) {
         this.id = id;
         this.offsetInBits = offsetInBits;
         this.length = length;
         this.isDirectoryEntry = isDirectoryEntry;
      }

      public int getId() {
         return this.id;
      }

      public int getOffsetInBits() {
         return this.offsetInBits;
      }

      public int getLength() {
         return this.length;
      }

      public void setLength(int length) {
         this.length = length;
      }
   } // Leaving buildClassEnum()

   /*
    * The instance variables.
    * See buildInstanceVariables() in JBitByBitGenerator.java.
    */
   private String id;
   private String user;
   private String password;
   private String additional_password;
   private String displayName;
   private String description;
   private String owner;
   private long creationTime;
   private String sendSubscriptionRequestsTo;
   private boolean isPrivate;
   private boolean isTwoFactorAuthenticationRequired;
   private boolean isListInDirectory;
   private boolean isLocked;
   private String lockedBy;
   private String lockTimestamp;
   private String template;

   private String theErrorMsg;

   /**
    * The OrganizationSubType no-arg constructor.
    */
   public OrganizationSubType() {}

   /**
    * The OrganizationSubType constructor.
    * See buildParameterAnnotations() in JBitByBitGenerator.java.
    *
    * @param id The id message attribute.
    * @param user The user message attribute.
    * @param password The password message attribute.
    * @param additional_password The additional_password message attribute.
    * @param displayName The displayName message attribute.
    * @param description The description message attribute.
    * @param owner The owner message attribute.
    * @param creationTime The creationTime message attribute.
    * @param sendSubscriptionRequestsTo The sendSubscriptionRequestsTo message attribute.
    * @param isPrivate The isPrivate message attribute.
    * @param isTwoFactorAuthenticationRequired The isTwoFactorAuthenticationRequired message attribute.
    * @param isListInDirectory The isListInDirectory message attribute.
    * @param isLocked The isLocked message attribute.
    * @param lockedBy The lockedBy message attribute.
    * @param lockTimestamp The lockTimestamp message attribute.
    * @param template The template message attribute.
    */
   public OrganizationSubType(String id,
                              String user,
                              String password,
                              String additional_password,
                              String displayName,
                              String description,
                              String owner,
                              Long creationTime,
                              String sendSubscriptionRequestsTo,
                              Boolean isPrivate,
                              Boolean isTwoFactorAuthenticationRequired,
                              Boolean isListInDirectory,
                              Boolean isLocked,
                              String lockedBy,
                              String lockTimestamp,
                              String template) {
      // Entered buildParameterAssignments()
      this.setId(id);
      this.setUser(user);
      this.setPassword(password);
      this.setAdditional_password(additional_password);
      this.setDisplayName(displayName);
      this.setDescription(description);
      this.setOwner(owner);
      this.setCreationTime(creationTime);
      this.setSendSubscriptionRequestsTo(sendSubscriptionRequestsTo);
      this.setIsPrivate(isPrivate);
      this.setIsTwoFactorAuthenticationRequired(isTwoFactorAuthenticationRequired);
      this.setIsListInDirectory(isListInDirectory);
      this.setIsLocked(isLocked);
      this.setLockedBy(lockedBy);
      this.setLockTimestamp(lockTimestamp);
      this.setTemplate(template);
      // Leaving buildParameterAssignments()
   }

   /**
    * The OrganizationSubType copy constructor.
    */
   public OrganizationSubType(OrganizationSubType organizationSubType) {
      // Entered buildCopyConstructorParameterAssignments()
      this.setId(organizationSubType.getId());
      this.setUser(organizationSubType.getUser());
      this.setPassword(organizationSubType.getPassword());
      this.setAdditional_password(organizationSubType.getAdditional_password());
      this.setDisplayName(organizationSubType.getDisplayName());
      this.setDescription(organizationSubType.getDescription());
      this.setOwner(organizationSubType.getOwner());
      this.setCreationTime(organizationSubType.getCreationTime());
      this.setSendSubscriptionRequestsTo(organizationSubType.getSendSubscriptionRequestsTo());
      this.setIsPrivate(organizationSubType.getIsPrivate());
      this.setIsTwoFactorAuthenticationRequired(organizationSubType.getIsTwoFactorAuthenticationRequired());
      this.setIsListInDirectory(organizationSubType.getIsListInDirectory());
      this.setIsLocked(organizationSubType.getIsLocked());
      this.setLockedBy(organizationSubType.getLockedBy());
      this.setLockTimestamp(organizationSubType.getLockTimestamp());
      this.setTemplate(organizationSubType.getTemplate());
      // Leaving buildCopyConstructorParameterAssignments()
   }

   // Entered buildSetErrorMsgMethod()
   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }
   // Leaving buildSetErrorMsgMethod()

   // Entered buildGetErrorMsgMethod()
   /**
    * This method returns the error message or null if no error
    * occurred.
    */
   public String getErrorMsg() {
      return theErrorMsg;
   }
   // Leaving buildGetErrorMsgMethod()

   // Entered buildPackMethod()
   /**
    * This method packs a OrganizationSubType object into a byte array. If a required attribute is not
    * provided an exception will be thrown.
    *
    * @return A byte array which represents a OrganizationSubType message object.
    * @throws MissingAttributeException
    */
   public byte[] pack() throws MissingAttributeException {
      final String METHOD = "pack()";
      log4j.debug("Entered " + METHOD);

      int byteArraySize = getOrganizationSubTypeSize();
      log4j.debug("byteArraySize: " + byteArraySize);
      byte[] bb = new byte[byteArraySize];

      /*
       * Convert object to byte array.
       */
      int offset = 0;

      if (this.getCreationTime() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "creationTime", offset));
         bb = GreenballMessagesUtility.insertLong(bb, offset, this.getCreationTime());
         offset += 8;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"creationTime\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getIsPrivate() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "isPrivate", offset));
         bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 1, this.getIsPrivate() == true ? 1 : 0);
         offset += 1;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"isPrivate\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getIsTwoFactorAuthenticationRequired() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "isTwoFactorAuthenticationRequired", offset));
         bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 1, this.getIsTwoFactorAuthenticationRequired() == true ? 1 : 0);
         offset += 1;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"isTwoFactorAuthenticationRequired\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getIsListInDirectory() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "isListInDirectory", offset));
         bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 1, this.getIsListInDirectory() == true ? 1 : 0);
         offset += 1;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"isListInDirectory\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getIsLocked() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "isLocked", offset));
         bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 1, this.getIsLocked() == true ? 1 : 0);
         offset += 1;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"isLocked\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }


      OrganizationSubTypeEnum.ID.setLength(this.getId() != null ? this.getId().length() : 0);
      OrganizationSubTypeEnum.USER.setLength(this.getUser() != null ? this.getUser().length() : 0);
      OrganizationSubTypeEnum.PASSWORD.setLength(this.getPassword() != null ? this.getPassword().length() : 0);
      OrganizationSubTypeEnum.ADDITIONAL_PASSWORD.setLength(this.getAdditional_password() != null ? this.getAdditional_password().length() : 0);
      OrganizationSubTypeEnum.DISPLAY_NAME.setLength(this.getDisplayName() != null ? this.getDisplayName().length() : 0);
      OrganizationSubTypeEnum.DESCRIPTION.setLength(this.getDescription() != null ? this.getDescription().length() : 0);
      OrganizationSubTypeEnum.OWNER.setLength(this.getOwner() != null ? this.getOwner().length() : 0);
      OrganizationSubTypeEnum.SEND_SUBSCRIPTION_REQUESTS_TO.setLength(this.getSendSubscriptionRequestsTo() != null ? this.getSendSubscriptionRequestsTo().length() : 0);
      OrganizationSubTypeEnum.LOCKED_BY.setLength(this.getLockedBy() != null ? this.getLockedBy().length() : 0);
      OrganizationSubTypeEnum.LOCK_TIMESTAMP.setLength(this.getLockTimestamp() != null ? this.getLockTimestamp().length() : 0);
      OrganizationSubTypeEnum.TEMPLATE.setLength(this.getTemplate() != null ? this.getTemplate().length() : 0);

      int directorySize = getOrganizationSubTypeDirectorySize();
      if (directorySize != 0) {
         // Create the directory
         theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
         for (int i = 0; i < directorySize; i++) {
            theDirectory[i] = new GreenballMessagesDirectoryEntry();
         }

         // Fill the directory
         int index = 0;
         offset = DIRECTORY_OFFSET
               + GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES
               * theDirectory.length;

         for (OrganizationSubTypeEnum organizationSubTypeEnum : OrganizationSubTypeEnum.values()) {
            if (organizationSubTypeEnum.isDirectoryEntry == true) {
               int id = organizationSubTypeEnum.getId();
               int length = organizationSubTypeEnum.getLength();

               theDirectory[index].setId(id);
               theDirectory[index].setLength(length);
               theDirectory[index].setOffset(offset);

               // Insert the data
               if (id == OrganizationSubTypeEnum.ID.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "id", offset));
                  if (getId() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getId());
                     offset += length * 1;
                  }
               }
               else if (id == OrganizationSubTypeEnum.USER.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "user", offset));
                  if (getUser() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getUser());
                     offset += length * 1;
                  }
               }
               else if (id == OrganizationSubTypeEnum.PASSWORD.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "password", offset));
                  if (getPassword() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getPassword());
                     offset += length * 1;
                  }
               }
               else if (id == OrganizationSubTypeEnum.ADDITIONAL_PASSWORD.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "additional_password", offset));
                  if (getAdditional_password() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getAdditional_password());
                     offset += length * 1;
                  }
               }
               else if (id == OrganizationSubTypeEnum.DISPLAY_NAME.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "displayName", offset));
                  if (getDisplayName() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getDisplayName());
                     offset += length * 1;
                  }
               }
               else if (id == OrganizationSubTypeEnum.DESCRIPTION.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "description", offset));
                  if (getDescription() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getDescription());
                     offset += length * 1;
                  }
               }
               else if (id == OrganizationSubTypeEnum.OWNER.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "owner", offset));
                  if (getOwner() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getOwner());
                     offset += length * 1;
                  }
               }
               else if (id == OrganizationSubTypeEnum.SEND_SUBSCRIPTION_REQUESTS_TO.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "sendSubscriptionRequestsTo", offset));
                  if (getSendSubscriptionRequestsTo() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getSendSubscriptionRequestsTo());
                     offset += length * 1;
                  }
               }
               else if (id == OrganizationSubTypeEnum.LOCKED_BY.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "lockedBy", offset));
                  if (getLockedBy() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getLockedBy());
                     offset += length * 1;
                  }
               }
               else if (id == OrganizationSubTypeEnum.LOCK_TIMESTAMP.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "lockTimestamp", offset));
                  if (getLockTimestamp() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getLockTimestamp());
                     offset += length * 1;
                  }
               }
               else if (id == OrganizationSubTypeEnum.TEMPLATE.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "template", offset));
                  if (getTemplate() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getTemplate());
                     offset += length * 1;
                  }
               }
               index++;
            }
         }

         // Insert the directory
         log4j.debug(String.format("inserting the directory at offset %d", DIRECTORY_OFFSET));
         offset = DIRECTORY_OFFSET;
         index = 0;
         for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
            log4j.debug(String.format("index[%d]: ", index));
            log4j.debug(String.format("  ID:     %d", directoryEntry.getId()));
            log4j.debug(String.format("  length: %d", directoryEntry.getLength()));
            log4j.debug(String.format("  offset: %d", directoryEntry.getOffset()));
            bb = GreenballMessagesUtility.insertInteger(bb, offset, directoryEntry.getId());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 4, directoryEntry.getLength());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 8, directoryEntry.getOffset());

            offset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
            index++;
         }

      }
      log4j.debug("Leaving " + METHOD);
      return bb;
   }
   // Leaving buildPackMethod()

   // Entered buildUnpackMethod()
   /**
    * This method unpacks a byte array containing a OrganizationSubType object.
    *
    * @return The byte array as a OrganizationSubType message object.
    */
   public OrganizationSubType unpack(byte[] ba) {
      final String METHOD = "unpack()";
      log4j.debug("Entered " + METHOD);

      OrganizationSubType organizationSubType = new OrganizationSubType();

      organizationSubType.setCreationTime(GreenballMessagesUtility.getLong(ba, OrganizationSubTypeEnum.CREATION_TIME.getOffsetInBits()));
      organizationSubType.setIsPrivate(GreenballMessagesUtility.getBoolean(ba, OrganizationSubTypeEnum.IS_PRIVATE.getOffsetInBits()));
      organizationSubType.setIsTwoFactorAuthenticationRequired(GreenballMessagesUtility.getBoolean(ba, OrganizationSubTypeEnum.IS_TWO_FACTOR_AUTHENTICATION_REQUIRED.getOffsetInBits()));
      organizationSubType.setIsListInDirectory(GreenballMessagesUtility.getBoolean(ba, OrganizationSubTypeEnum.IS_LIST_IN_DIRECTORY.getOffsetInBits()));
      organizationSubType.setIsLocked(GreenballMessagesUtility.getBoolean(ba, OrganizationSubTypeEnum.IS_LOCKED.getOffsetInBits()));

      // Get the directory
      int directorySize = getOrganizationSubTypeDirectorySize();
      theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
      int dirOffset = DIRECTORY_OFFSET;

      for (int entry = 0 ; entry < directorySize; entry++) {
         GreenballMessagesDirectoryEntry directoryEntry = new GreenballMessagesDirectoryEntry();

         int id = GreenballMessagesUtility.getInteger(ba, dirOffset * 8);
         directoryEntry.setId(id);
         int length = GreenballMessagesUtility.getInteger(ba, (dirOffset + 4) * 8);
         directoryEntry.setLength(length);
         int offset = GreenballMessagesUtility.getInteger(ba, (dirOffset + 8) * 8);
         directoryEntry.setOffset(offset);

         theDirectory[entry] = directoryEntry;

         dirOffset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      }

      for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
         int id = directoryEntry.getId();
         int offset = directoryEntry.getOffset();
         int length = directoryEntry.getLength();

         if (id == OrganizationSubTypeEnum.ID.getId()) {
            organizationSubType.setId(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == OrganizationSubTypeEnum.USER.getId()) {
            organizationSubType.setUser(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == OrganizationSubTypeEnum.PASSWORD.getId()) {
            organizationSubType.setPassword(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == OrganizationSubTypeEnum.ADDITIONAL_PASSWORD.getId()) {
            organizationSubType.setAdditional_password(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == OrganizationSubTypeEnum.DISPLAY_NAME.getId()) {
            organizationSubType.setDisplayName(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == OrganizationSubTypeEnum.DESCRIPTION.getId()) {
            organizationSubType.setDescription(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == OrganizationSubTypeEnum.OWNER.getId()) {
            organizationSubType.setOwner(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == OrganizationSubTypeEnum.SEND_SUBSCRIPTION_REQUESTS_TO.getId()) {
            organizationSubType.setSendSubscriptionRequestsTo(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == OrganizationSubTypeEnum.LOCKED_BY.getId()) {
            organizationSubType.setLockedBy(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == OrganizationSubTypeEnum.LOCK_TIMESTAMP.getId()) {
            organizationSubType.setLockTimestamp(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == OrganizationSubTypeEnum.TEMPLATE.getId()) {
            organizationSubType.setTemplate(GreenballMessagesUtility.getString(ba, offset, length));
         }
      }

      log4j.debug("Leaving " + METHOD);
      return organizationSubType;
   }
   // Leaving buildUnpackMethod()

   /**
    * This method sets the id attribute. Setting of this value is required.
    * @param id The id attribute.
    */
   public void setId(String id) {
      this.id = id;
   }

   /**
    * This method sets the user attribute. Setting of this value is optional.
    * @param user The user attribute.
    */
   public void setUser(String user) {
      this.user = user;
   }

   /**
    * This method sets the password attribute. Setting of this value is optional.
    * @param password The password attribute.
    */
   public void setPassword(String password) {
      this.password = password;
   }

   /**
    * This method sets the additional_password attribute. Setting of this value is optional.
    * @param additional_password The additional_password attribute.
    */
   public void setAdditional_password(String additional_password) {
      this.additional_password = additional_password;
   }

   /**
    * This method sets the displayName attribute. Setting of this value is required.
    * @param displayName The displayName attribute.
    */
   public void setDisplayName(String displayName) {
      this.displayName = displayName;
   }

   /**
    * This method sets the description attribute. Setting of this value is required.
    * @param description The description attribute.
    */
   public void setDescription(String description) {
      this.description = description;
   }

   /**
    * This method sets the owner attribute. Setting of this value is required.
    * @param owner The owner attribute.
    */
   public void setOwner(String owner) {
      this.owner = owner;
   }

   /**
    * This method sets the creationTime attribute. Setting of this value is required.
    * @param creationTime The creationTime attribute.
    */
   public void setCreationTime(Long creationTime) {
      this.creationTime = creationTime;
   }

   /**
    * This method sets the sendSubscriptionRequestsTo attribute. Setting of this value is required.
    * @param sendSubscriptionRequestsTo The sendSubscriptionRequestsTo attribute.
    */
   public void setSendSubscriptionRequestsTo(String sendSubscriptionRequestsTo) {
      this.sendSubscriptionRequestsTo = sendSubscriptionRequestsTo;
   }

   /**
    * This method sets the isPrivate attribute. Setting of this value is required.
    * @param isPrivate The isPrivate attribute.
    */
   public void setIsPrivate(Boolean isPrivate) {
      this.isPrivate = isPrivate;
   }

   /**
    * This method sets the isTwoFactorAuthenticationRequired attribute. Setting of this value is required.
    * @param isTwoFactorAuthenticationRequired The isTwoFactorAuthenticationRequired attribute.
    */
   public void setIsTwoFactorAuthenticationRequired(Boolean isTwoFactorAuthenticationRequired) {
      this.isTwoFactorAuthenticationRequired = isTwoFactorAuthenticationRequired;
   }

   /**
    * This method sets the isListInDirectory attribute. Setting of this value is required.
    * @param isListInDirectory The isListInDirectory attribute.
    */
   public void setIsListInDirectory(Boolean isListInDirectory) {
      this.isListInDirectory = isListInDirectory;
   }

   /**
    * This method sets the isLocked attribute. Setting of this value is required.
    * @param isLocked The isLocked attribute.
    */
   public void setIsLocked(Boolean isLocked) {
      this.isLocked = isLocked;
   }

   /**
    * This method sets the lockedBy attribute. Setting of this value is required.
    * @param lockedBy The lockedBy attribute.
    */
   public void setLockedBy(String lockedBy) {
      this.lockedBy = lockedBy;
   }

   /**
    * This method sets the lockTimestamp attribute. Setting of this value is required.
    * @param lockTimestamp The lockTimestamp attribute.
    */
   public void setLockTimestamp(String lockTimestamp) {
      this.lockTimestamp = lockTimestamp;
   }

   /**
    * This method sets the template attribute. Setting of this value is optional.
    * @param template The template attribute.
    */
   public void setTemplate(String template) {
      this.template = template;
   }

   /**
    * This method gets the id attribute. The id attribute is a required attribute.
    */
   public String getId() {
      return this.id;
   }

   /**
    * This method gets the user attribute. The user attribute is an optional attribute.
    */
   public String getUser() {
      return this.user;
   }

   /**
    * This method gets the password attribute. The password attribute is an optional attribute.
    */
   public String getPassword() {
      return this.password;
   }

   /**
    * This method gets the additional_password attribute. The additional_password attribute is an optional attribute.
    */
   public String getAdditional_password() {
      return this.additional_password;
   }

   /**
    * This method gets the displayName attribute. The displayName attribute is a required attribute.
    */
   public String getDisplayName() {
      return this.displayName;
   }

   /**
    * This method gets the description attribute. The description attribute is a required attribute.
    */
   public String getDescription() {
      return this.description;
   }

   /**
    * This method gets the owner attribute. The owner attribute is a required attribute.
    */
   public String getOwner() {
      return this.owner;
   }

   /**
    * This method gets the creationTime attribute. The creationTime attribute is a required attribute.
    */
   public Long getCreationTime() {
      return this.creationTime;
   }

   /**
    * This method gets the sendSubscriptionRequestsTo attribute. The sendSubscriptionRequestsTo attribute is a required attribute.
    */
   public String getSendSubscriptionRequestsTo() {
      return this.sendSubscriptionRequestsTo;
   }

   /**
    * This method gets the isPrivate attribute. The isPrivate attribute is a required attribute.
    */
   public Boolean getIsPrivate() {
      return this.isPrivate;
   }

   /**
    * This method gets the isTwoFactorAuthenticationRequired attribute. The isTwoFactorAuthenticationRequired attribute is a required attribute.
    */
   public Boolean getIsTwoFactorAuthenticationRequired() {
      return this.isTwoFactorAuthenticationRequired;
   }

   /**
    * This method gets the isListInDirectory attribute. The isListInDirectory attribute is a required attribute.
    */
   public Boolean getIsListInDirectory() {
      return this.isListInDirectory;
   }

   /**
    * This method gets the isLocked attribute. The isLocked attribute is a required attribute.
    */
   public Boolean getIsLocked() {
      return this.isLocked;
   }

   /**
    * This method gets the lockedBy attribute. The lockedBy attribute is a required attribute.
    */
   public String getLockedBy() {
      return this.lockedBy;
   }

   /**
    * This method gets the lockTimestamp attribute. The lockTimestamp attribute is a required attribute.
    */
   public String getLockTimestamp() {
      return this.lockTimestamp;
   }

   /**
    * This method gets the template attribute. The template attribute is an optional attribute.
    */
   public String getTemplate() {
      return this.template;
   }

   /**
    * This method gets the size of the directory.
    */
   private int getOrganizationSubTypeDirectorySize() {
      int directorySize = 0;

      // id
      directorySize++;
      // user
      directorySize++;
      // password
      directorySize++;
      // additional_password
      directorySize++;
      // displayName
      directorySize++;
      // description
      directorySize++;
      // owner
      directorySize++;
      // sendSubscriptionRequestsTo
      directorySize++;
      // lockedBy
      directorySize++;
      // lockTimestamp
      directorySize++;
      // template
      directorySize++;

      return directorySize;
   }


   /**
    * This method gets the size of the OrganizationSubType object.
    * @return The size in bytes.
    */
   public int getOrganizationSubTypeSize() {
      int size = 0;

      int directorySize = getOrganizationSubTypeDirectorySize();
      size += directorySize * GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      // Add size of id
      size += (getId() != null ? getId().length() : 0);
      // Add size of user
      size += (getUser() != null ? getUser().length() : 0);
      // Add size of password
      size += (getPassword() != null ? getPassword().length() : 0);
      // Add size of additional_password
      size += (getAdditional_password() != null ? getAdditional_password().length() : 0);
      // Add size of displayName
      size += (getDisplayName() != null ? getDisplayName().length() : 0);
      // Add size of description
      size += (getDescription() != null ? getDescription().length() : 0);
      // Add size of owner
      size += (getOwner() != null ? getOwner().length() : 0);
      // Add size of creationTime
      size += 8;
      // Add size of sendSubscriptionRequestsTo
      size += (getSendSubscriptionRequestsTo() != null ? getSendSubscriptionRequestsTo().length() : 0);
      // Add size of isPrivate
      size += 1;
      // Add size of isTwoFactorAuthenticationRequired
      size += 1;
      // Add size of isListInDirectory
      size += 1;
      // Add size of isLocked
      size += 1;
      // Add size of lockedBy
      size += (getLockedBy() != null ? getLockedBy().length() : 0);
      // Add size of lockTimestamp
      size += (getLockTimestamp() != null ? getLockTimestamp().length() : 0);
      // Add size of template
      size += (getTemplate() != null ? getTemplate().length() : 0);

      return size;
   }

   @Override
   public String toString() {
      StringBuilder result = new StringBuilder();
      String NEW_LINE = System.getProperty("line.separator");

      result.append(this.getClass().getSimpleName() + " Object {" + NEW_LINE);
      result.append(" id: " + id + NEW_LINE);
      result.append(" user: " + user + NEW_LINE);
      result.append(" password: " + password + NEW_LINE);
      result.append(" additional_password: " + additional_password + NEW_LINE);
      result.append(" displayName: " + displayName + NEW_LINE);
      result.append(" description: " + description + NEW_LINE);
      result.append(" owner: " + owner + NEW_LINE);
      result.append(" creationTime: " + creationTime + NEW_LINE);
      result.append(" sendSubscriptionRequestsTo: " + sendSubscriptionRequestsTo + NEW_LINE);
      result.append(" isPrivate: " + isPrivate + NEW_LINE);
      result.append(" isTwoFactorAuthenticationRequired: " + isTwoFactorAuthenticationRequired + NEW_LINE);
      result.append(" isListInDirectory: " + isListInDirectory + NEW_LINE);
      result.append(" isLocked: " + isLocked + NEW_LINE);
      result.append(" lockedBy: " + lockedBy + NEW_LINE);
      result.append(" lockTimestamp: " + lockTimestamp + NEW_LINE);
      result.append(" template: " + template + NEW_LINE);

      result.append("} ");

      return result.toString();
   }

   /**
    * The hashCode method returns this object's hashCode.
    */
   @Override
   public int hashCode() {
      final int prime = 31;
      int result = 1;
      result = prime * result
         + ((String) id).hashCode();
      result = prime * result
         + ((String) user).hashCode();
      result = prime * result
         + ((String) password).hashCode();
      result = prime * result
         + ((String) additional_password).hashCode();
      result = prime * result
         + ((String) displayName).hashCode();
      result = prime * result
         + ((String) description).hashCode();
      result = prime * result
         + ((String) owner).hashCode();
      result = prime * result
         + ((Long) creationTime).hashCode();
      result = prime * result
         + ((String) sendSubscriptionRequestsTo).hashCode();
      result = prime * result
         + ((Boolean) isPrivate).hashCode();
      result = prime * result
         + ((Boolean) isTwoFactorAuthenticationRequired).hashCode();
      result = prime * result
         + ((Boolean) isListInDirectory).hashCode();
      result = prime * result
         + ((Boolean) isLocked).hashCode();
      result = prime * result
         + ((String) lockedBy).hashCode();
      result = prime * result
         + ((String) lockTimestamp).hashCode();
      result = prime * result
         + ((String) template).hashCode();
      return result;
   }

   /**
    * The equals method checks for equality. 
    */
   public boolean equals(Object obj) {
      if (obj == this) return true;
      if (obj == null) return false;
      if (getClass() != obj.getClass()) return false;

      OrganizationSubType organizationSubType = (OrganizationSubType) obj;
      if (!organizationSubType.getId().equals(this.getId())) {
         return false;
      }

      if (organizationSubType.getUser() == null && this.getUser() != null) {
         return false;
      }
      else if (organizationSubType.getUser() != null && this.getUser() == null) {
         return false;
      }
      else if (organizationSubType.getUser() != null && 
      !organizationSubType.getUser().equals(this.getUser())) {
         return false;
      }

      if (organizationSubType.getPassword() == null && this.getPassword() != null) {
         return false;
      }
      else if (organizationSubType.getPassword() != null && this.getPassword() == null) {
         return false;
      }
      else if (organizationSubType.getPassword() != null && 
      !organizationSubType.getPassword().equals(this.getPassword())) {
         return false;
      }

      if (organizationSubType.getAdditional_password() == null && this.getAdditional_password() != null) {
         return false;
      }
      else if (organizationSubType.getAdditional_password() != null && this.getAdditional_password() == null) {
         return false;
      }
      else if (organizationSubType.getAdditional_password() != null && 
      !organizationSubType.getAdditional_password().equals(this.getAdditional_password())) {
         return false;
      }

      if (!organizationSubType.getDisplayName().equals(this.getDisplayName())) {
         return false;
      }

      if (!organizationSubType.getDescription().equals(this.getDescription())) {
         return false;
      }

      if (!organizationSubType.getOwner().equals(this.getOwner())) {
         return false;
      }

      if (organizationSubType.getCreationTime() != this.getCreationTime()) {
         return false;
      }

      if (!organizationSubType.getSendSubscriptionRequestsTo().equals(this.getSendSubscriptionRequestsTo())) {
         return false;
      }

      if (organizationSubType.getIsPrivate() != this.getIsPrivate()) {
         return false;
      }

      if (organizationSubType.getIsTwoFactorAuthenticationRequired() != this.getIsTwoFactorAuthenticationRequired()) {
         return false;
      }

      if (organizationSubType.getIsListInDirectory() != this.getIsListInDirectory()) {
         return false;
      }

      if (organizationSubType.getIsLocked() != this.getIsLocked()) {
         return false;
      }

      if (!organizationSubType.getLockedBy().equals(this.getLockedBy())) {
         return false;
      }

      if (!organizationSubType.getLockTimestamp().equals(this.getLockTimestamp())) {
         return false;
      }

      if (organizationSubType.getTemplate() == null && this.getTemplate() != null) {
         return false;
      }
      else if (organizationSubType.getTemplate() != null && this.getTemplate() == null) {
         return false;
      }
      else if (organizationSubType.getTemplate() != null && 
      !organizationSubType.getTemplate().equals(this.getTemplate())) {
         return false;
      }

      return true;
   }
}
