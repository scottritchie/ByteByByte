/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInstantiationFile()).
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

public class InstantiateSubscriptionRequestSubType {
private static Logger log4j = Logger.getLogger(InstantiateSubscriptionRequestSubType.class);

private Element element;
private SubscriptionRequestSubType subscriptionRequestSubType;

/*
 * The isUpdated flags. If an attribute is required by the grammar then a value
 * must be provided, and the isUpdated flag will be set when the value is
 * obtained during unpacking. After the object is constructed during unpacking, 
 * validation will be performed to make sure a value was provided for all attributes
 * that are not optional. 
 * See buildFlags() in JBitByBitGenerator.java.
 */
private boolean isOrgIdUpdated = false;
private boolean isOrgNameUpdated = false;
private boolean isRequestorUpdated = false;
private boolean isMessageUpdated = false;
private boolean isOwnerUpdated = false;
private boolean isTimestampUpdated = false;

/**
 * This method constructs a InstantiateSubscriptionRequestSubType object based on an Element
 * object.
 * 
 * @param element
 *            The Element.
 */
public InstantiateSubscriptionRequestSubType(Element element) {
this.element = element;
this.subscriptionRequestSubType = new SubscriptionRequestSubType();
}

/**
 * The instantiate method instantiates a SubscriptionRequestSubType object.
 * 
 * @return The SubscriptionRequestSubType.
 */
protected SubscriptionRequestSubType instantiate() {
final String METHOD = "instantiate()";
log4j.debug("Entered " + METHOD);

log4j.debug("element: " + element.getName());

for (AbstractAttribute abstractAttribute : element.getAbstractAttributes()) {
      // Entered instantiateSubTypeElements()
   // Leaving instantiateSubTypeElements()


   for (KeyValuePair kvp : abstractAttribute.getKeyValuePairs()) {
         // Entered instantiateSubTypeAttributes()
   if (kvp.getKey().equals("orgId")) {
    this.isOrgIdUpdated = true;
   log4j.debug("setting value of \"orgId\" to: " + kvp.getValue());
   subscriptionRequestSubType.setOrgId(kvp.getValue());
   }
   else if (kvp.getKey().equals("orgName")) {
    this.isOrgNameUpdated = true;
   log4j.debug("setting value of \"orgName\" to: " + kvp.getValue());
   subscriptionRequestSubType.setOrgName(kvp.getValue());
   }
   else if (kvp.getKey().equals("requestor")) {
    this.isRequestorUpdated = true;
   log4j.debug("setting value of \"requestor\" to: " + kvp.getValue());
   subscriptionRequestSubType.setRequestor(kvp.getValue());
   }
   else if (kvp.getKey().equals("message")) {
    this.isMessageUpdated = true;
   log4j.debug("setting value of \"message\" to: " + kvp.getValue());
   subscriptionRequestSubType.setMessage(kvp.getValue());
   }
   else if (kvp.getKey().equals("owner")) {
    this.isOwnerUpdated = true;
   log4j.debug("setting value of \"owner\" to: " + kvp.getValue());
   subscriptionRequestSubType.setOwner(kvp.getValue());
   }
   else if (kvp.getKey().equals("timestamp")) {
    this.isTimestampUpdated = true;
   log4j.debug("setting value of \"timestamp\" to: " + kvp.getValue());
   subscriptionRequestSubType.setTimestamp(Long.parseLong(kvp.getValue()));
   }
   // Leaving instantiateSubTypeAttributes()

   }
}

log4j.debug("Leaving " + METHOD);
return subscriptionRequestSubType;
}

/**
 * The validate method checks that a value was provided for all required 
 * attributes.
 *
 * @return The error message or null if no error occurred.
 */
protected String validate() {
final String METHOD = "validate()";
log4j.debug("Entered " + METHOD);

String result = null;

// Entered buildValidationMethod()
if (!this.isOrgIdUpdated) {
   String msg = "OrgId is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
}

if (!this.isOrgNameUpdated) {
   String msg = "OrgName is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isRequestorUpdated) {
   String msg = "Requestor is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isMessageUpdated) {
   String msg = "Message is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isOwnerUpdated) {
   String msg = "Owner is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isTimestampUpdated) {
   String msg = "Timestamp is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}


if (result != null) {
   log4j.debug("result: " + result);
}

log4j.debug("Leaving " + METHOD);
return result;
}
}
