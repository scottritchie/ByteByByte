/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateInitializationFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializeJournalEntry class initializes the element object with the JournalEntry object.
 *
 */
public class InitializeJournalEntry {
   private static Logger log4j = Logger.getLogger(InitializeJournalEntry.class);
   private String theErrorMsg;
   private Element element;
   private JournalEntry journalEntry;

   /**
    * The InitializeJournalEntry class initializes the element object with the JournalEntry object.
    *
    * @param journalEntry The object which will be used to initialize the element object.
    */
   public InitializeJournalEntry(JournalEntry journalEntry) {
      this.journalEntry = journalEntry;

      this.element = new Element("JournalEntry");
   }

   /**
    * This method initializes the element.
    */
   public Element initialize() throws MissingAttributeException {
      final String METHOD = "initialize()";
      log4j.debug("Entered " + METHOD);

      log4j.debug("element.getName(): JournalEntry");

      if (journalEntry.getUser() != null) {
         AbstractAttribute abstractAttribute = initializeUser(journalEntry.getUser());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"user\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (journalEntry.getMetaModelId() != null) {
         AbstractAttribute abstractAttribute = initializeMetaModelId(journalEntry.getMetaModelId());
         element.getAbstractAttributes().add(abstractAttribute);
      }


      if (journalEntry.getTimestamp() != null) {
         AbstractAttribute abstractAttribute = initializeTimestamp(journalEntry.getTimestamp());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"timestamp\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (journalEntry.getAction() != null) {
         AbstractAttribute abstractAttribute = initializeAction(journalEntry.getAction());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"action\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (journalEntry.getDescription() != null) {
         AbstractAttribute abstractAttribute = initializeDescription(journalEntry.getDescription());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"description\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }


      log4j.debug("Leaving " + METHOD);
      return element;
   }

   /*
    * This method initializes the user attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeUser(String user)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (user != null) {
         log4j.debug("Creating new KeyValuePair: user");
         KeyValuePair kvp = new KeyValuePair("user", "<STRING_BEGIN>" + user + "<STRING_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"user\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the metaModelId attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeMetaModelId(String metaModelId)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (metaModelId != null) {
         log4j.debug("Creating new KeyValuePair: metaModelId");
         KeyValuePair kvp = new KeyValuePair("metaModelId", "<STRING_BEGIN>" + metaModelId + "<STRING_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the timestamp attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeTimestamp(Long timestamp)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (timestamp != null) {
         log4j.debug("Creating new KeyValuePair: timestamp");
         KeyValuePair kvp = new KeyValuePair("timestamp", Long.toString(timestamp));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"timestamp\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the action attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeAction(String action)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (action != null) {
         log4j.debug("Creating new KeyValuePair: action");
         KeyValuePair kvp = new KeyValuePair("action", "<STRING_BEGIN>" + action + "<STRING_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"action\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the description attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeDescription(String description)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (description != null) {
         log4j.debug("Creating new KeyValuePair: description");
         KeyValuePair kvp = new KeyValuePair("description", "<STRING_BEGIN>" + description + "<STRING_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"description\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /**
   * This method returns the error message or null if no error occurred.
   */
   public String getErrorMsg() {
      return theErrorMsg;
   }

   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }

}
