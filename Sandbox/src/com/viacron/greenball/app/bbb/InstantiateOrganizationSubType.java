/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInstantiationFile()).
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

public class InstantiateOrganizationSubType {
private static Logger log4j = Logger.getLogger(InstantiateOrganizationSubType.class);

private Element element;
private OrganizationSubType organizationSubType;

/*
 * The isUpdated flags. If an attribute is required by the grammar then a value
 * must be provided, and the isUpdated flag will be set when the value is
 * obtained during unpacking. After the object is constructed during unpacking, 
 * validation will be performed to make sure a value was provided for all attributes
 * that are not optional. 
 * See buildFlags() in JBitByBitGenerator.java.
 */
private boolean isIdUpdated = false;
private boolean isDisplayNameUpdated = false;
private boolean isDescriptionUpdated = false;
private boolean isOwnerUpdated = false;
private boolean isCreationTimeUpdated = false;
private boolean isSendSubscriptionRequestsToUpdated = false;
private boolean isIsPrivateUpdated = false;
private boolean isIsTwoFactorAuthenticationRequiredUpdated = false;
private boolean isIsListInDirectoryUpdated = false;
private boolean isIsLockedUpdated = false;
private boolean isLockedByUpdated = false;
private boolean isLockTimestampUpdated = false;

/**
 * This method constructs a InstantiateOrganizationSubType object based on an Element
 * object.
 * 
 * @param element
 *            The Element.
 */
public InstantiateOrganizationSubType(Element element) {
this.element = element;
this.organizationSubType = new OrganizationSubType();
}

/**
 * The instantiate method instantiates a OrganizationSubType object.
 * 
 * @return The OrganizationSubType.
 */
protected OrganizationSubType instantiate() {
final String METHOD = "instantiate()";
log4j.debug("Entered " + METHOD);

log4j.debug("element: " + element.getName());

for (AbstractAttribute abstractAttribute : element.getAbstractAttributes()) {
      // Entered instantiateSubTypeElements()
   // Leaving instantiateSubTypeElements()


   for (KeyValuePair kvp : abstractAttribute.getKeyValuePairs()) {
         // Entered instantiateSubTypeAttributes()
   if (kvp.getKey().equals("id")) {
    this.isIdUpdated = true;
   log4j.debug("setting value of \"id\" to: " + kvp.getValue());
   organizationSubType.setId(kvp.getValue());
   }
   else if (kvp.getKey().equals("user")) {
   log4j.debug("setting value of \"user\" to: " + kvp.getValue());
   organizationSubType.setUser(kvp.getValue());
   }
   else if (kvp.getKey().equals("password")) {
   log4j.debug("setting value of \"password\" to: " + kvp.getValue());
   organizationSubType.setPassword(kvp.getValue());
   }
   else if (kvp.getKey().equals("additional_password")) {
   log4j.debug("setting value of \"additional_password\" to: " + kvp.getValue());
   organizationSubType.setAdditional_password(kvp.getValue());
   }
   else if (kvp.getKey().equals("displayName")) {
    this.isDisplayNameUpdated = true;
   log4j.debug("setting value of \"displayName\" to: " + kvp.getValue());
   organizationSubType.setDisplayName(kvp.getValue());
   }
   else if (kvp.getKey().equals("description")) {
    this.isDescriptionUpdated = true;
   log4j.debug("setting value of \"description\" to: " + kvp.getValue());
   organizationSubType.setDescription(kvp.getValue());
   }
   else if (kvp.getKey().equals("owner")) {
    this.isOwnerUpdated = true;
   log4j.debug("setting value of \"owner\" to: " + kvp.getValue());
   organizationSubType.setOwner(kvp.getValue());
   }
   else if (kvp.getKey().equals("creationTime")) {
    this.isCreationTimeUpdated = true;
   log4j.debug("setting value of \"creationTime\" to: " + kvp.getValue());
   organizationSubType.setCreationTime(Long.parseLong(kvp.getValue()));
   }
   else if (kvp.getKey().equals("sendSubscriptionRequestsTo")) {
    this.isSendSubscriptionRequestsToUpdated = true;
   log4j.debug("setting value of \"sendSubscriptionRequestsTo\" to: " + kvp.getValue());
   organizationSubType.setSendSubscriptionRequestsTo(kvp.getValue());
   }
   else if (kvp.getKey().equals("isPrivate")) {
    this.isIsPrivateUpdated = true;
   log4j.debug("setting value of \"isPrivate\" to: " + kvp.getValue());
   organizationSubType.setIsPrivate(kvp.getValue().equals("true"));
   }
   else if (kvp.getKey().equals("isTwoFactorAuthenticationRequired")) {
    this.isIsTwoFactorAuthenticationRequiredUpdated = true;
   log4j.debug("setting value of \"isTwoFactorAuthenticationRequired\" to: " + kvp.getValue());
   organizationSubType.setIsTwoFactorAuthenticationRequired(kvp.getValue().equals("true"));
   }
   else if (kvp.getKey().equals("isListInDirectory")) {
    this.isIsListInDirectoryUpdated = true;
   log4j.debug("setting value of \"isListInDirectory\" to: " + kvp.getValue());
   organizationSubType.setIsListInDirectory(kvp.getValue().equals("true"));
   }
   else if (kvp.getKey().equals("isLocked")) {
    this.isIsLockedUpdated = true;
   log4j.debug("setting value of \"isLocked\" to: " + kvp.getValue());
   organizationSubType.setIsLocked(kvp.getValue().equals("true"));
   }
   else if (kvp.getKey().equals("lockedBy")) {
    this.isLockedByUpdated = true;
   log4j.debug("setting value of \"lockedBy\" to: " + kvp.getValue());
   organizationSubType.setLockedBy(kvp.getValue());
   }
   else if (kvp.getKey().equals("lockTimestamp")) {
    this.isLockTimestampUpdated = true;
   log4j.debug("setting value of \"lockTimestamp\" to: " + kvp.getValue());
   organizationSubType.setLockTimestamp(kvp.getValue());
   }
   else if (kvp.getKey().equals("template")) {
   log4j.debug("setting value of \"template\" to: " + kvp.getValue());
   organizationSubType.setTemplate(kvp.getValue());
   }
   // Leaving instantiateSubTypeAttributes()

   }
}

log4j.debug("Leaving " + METHOD);
return organizationSubType;
}

/**
 * The validate method checks that a value was provided for all required 
 * attributes.
 *
 * @return The error message or null if no error occurred.
 */
protected String validate() {
final String METHOD = "validate()";
log4j.debug("Entered " + METHOD);

String result = null;

// Entered buildValidationMethod()
if (!this.isIdUpdated) {
   String msg = "Id is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
}

if (!this.isDisplayNameUpdated) {
   String msg = "DisplayName is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isDescriptionUpdated) {
   String msg = "Description is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isOwnerUpdated) {
   String msg = "Owner is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isCreationTimeUpdated) {
   String msg = "CreationTime is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isSendSubscriptionRequestsToUpdated) {
   String msg = "SendSubscriptionRequestsTo is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isIsPrivateUpdated) {
   String msg = "IsPrivate is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isIsTwoFactorAuthenticationRequiredUpdated) {
   String msg = "IsTwoFactorAuthenticationRequired is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isIsListInDirectoryUpdated) {
   String msg = "IsListInDirectory is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isIsLockedUpdated) {
   String msg = "IsLocked is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isLockedByUpdated) {
   String msg = "LockedBy is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isLockTimestampUpdated) {
   String msg = "LockTimestamp is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}


if (result != null) {
   log4j.debug("result: " + result);
}

log4j.debug("Leaving " + METHOD);
return result;
}
}
