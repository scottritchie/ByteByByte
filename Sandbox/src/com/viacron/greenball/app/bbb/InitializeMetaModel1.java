/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInitializationFile()).
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializeMetaModel1 class initializes an Element object with a MetaModel1 object.
 */
public class InitializeMetaModel1 {
private static Logger log4j = Logger.getLogger(InitializeMetaModel1.class);

private String theErrorMsg;
private MetaModel1 metaModel1;

public InitializeMetaModel1(MetaModel1 metaModel1) {
this.metaModel1 = metaModel1;
}

/**
 * The initialize method returns an Element object initialized with data from a
 * MetaModel1 object.
 * @param elementName The name of the element.
 * @return The element.
 * @throws MissingAttributeException
 */
protected Element initialize(String elementName) 
    throws MissingAttributeException {
final String METHOD = "initialize()";
log4j.debug("Entered " + METHOD);
Element element = null;

if (metaModel1 != null) {
log4j.debug("Creating new element: " + elementName);
element = new Element(elementName);

if (metaModel1.getName() != null) {
   AbstractAttribute abstractAttribute = initializeName(metaModel1.getName());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"name\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (metaModel1.getDatatype() != null) {
   AbstractAttribute abstractAttribute = initializeDatatype(metaModel1.getDatatype());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"datatype\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (metaModel1.getInclude() != null) {
   AbstractAttribute abstractAttribute = initializeInclude(metaModel1.getInclude());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"include\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (metaModel1.getMetaModelElement() != null) {
   AbstractAttribute abstractAttribute = initializeMetaModelElement(metaModel1.getMetaModelElement());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"metaModelElement\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

}

log4j.debug("Leaving " + METHOD);
return element;
}

/*
 * This method initializes the name attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeName(String name)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (name != null) {
      log4j.debug("Creating new KeyValuePair: name");
      KeyValuePair kvp = new KeyValuePair("name", "<STRING_BEGIN>" + name + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"name\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the datatype attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeDatatype(List<Datatype> datatypeList)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   if (datatypeList != null) {
      int indexDatatype = 0;
      for (Datatype datatype : datatypeList) {
         InitializeDatatype initializeDatatype = new InitializeDatatype(datatype);
         Element datatypeElement = initializeDatatype.initialize("datatype[" + indexDatatype + "]");
         abstractAttribute.getElements().add(datatypeElement);
         indexDatatype++;
      }
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"datatype\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }
   return abstractAttribute;
}

/*
 * This method initializes the include attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeInclude(List<Include> includeList)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   if (includeList != null) {
      int indexInclude = 0;
      for (Include include : includeList) {
         InitializeInclude initializeInclude = new InitializeInclude(include);
         Element includeElement = initializeInclude.initialize("include[" + indexInclude + "]");
         abstractAttribute.getElements().add(includeElement);
         indexInclude++;
      }
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"include\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }
   return abstractAttribute;
}

/*
 * This method initializes the metaModelElement attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeMetaModelElement(List<MetaModelElement> metaModelElementList)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   if (metaModelElementList != null) {
      int indexMetaModelElement = 0;
      for (MetaModelElement metaModelElement : metaModelElementList) {
         InitializeMetaModelElement initializeMetaModelElement = new InitializeMetaModelElement(metaModelElement);
         Element metaModelElementElement = initializeMetaModelElement.initialize("metaModelElement[" + indexMetaModelElement + "]");
         abstractAttribute.getElements().add(metaModelElementElement);
         indexMetaModelElement++;
      }
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"metaModelElement\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }
   return abstractAttribute;
}

/**
* This method returns the error message or null if no error occurred.
*/
public String getErrorMsg() {
   return theErrorMsg;
}

private void setErrorMsg(String errorMsg) {
   theErrorMsg = errorMsg;
}


}
