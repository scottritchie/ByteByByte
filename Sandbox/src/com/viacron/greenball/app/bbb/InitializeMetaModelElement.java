/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInitializationFile()).
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializeMetaModelElement class initializes an Element object with a MetaModelElement object.
 */
public class InitializeMetaModelElement {
private static Logger log4j = Logger.getLogger(InitializeMetaModelElement.class);

private String theErrorMsg;
private MetaModelElement metaModelElement;

public InitializeMetaModelElement(MetaModelElement metaModelElement) {
this.metaModelElement = metaModelElement;
}

/**
 * The initialize method returns an Element object initialized with data from a
 * MetaModelElement object.
 * @param elementName The name of the element.
 * @return The element.
 * @throws MissingAttributeException
 */
protected Element initialize(String elementName) 
    throws MissingAttributeException {
final String METHOD = "initialize()";
log4j.debug("Entered " + METHOD);
Element element = null;

if (metaModelElement != null) {
log4j.debug("Creating new element: " + elementName);
element = new Element(elementName);

if (metaModelElement.getName() != null) {
   AbstractAttribute abstractAttribute = initializeName(metaModelElement.getName());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"name\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (metaModelElement.getSuperType() != null) {
   AbstractAttribute abstractAttribute = initializeSuperType(metaModelElement.getSuperType());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"superType\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (metaModelElement.getLabeled() != null) {
   AbstractAttribute abstractAttribute = initializeLabeled(metaModelElement.getLabeled());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"labeled\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (metaModelElement.getVariables() != null) {
   AbstractAttribute abstractAttribute = initializeVariables(metaModelElement.getVariables());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"variables\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (metaModelElement.getAttributes() != null) {
   AbstractAttribute abstractAttribute = initializeAttributes(metaModelElement.getAttributes());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"attributes\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (metaModelElement.getXrefs() != null) {
   AbstractAttribute abstractAttribute = initializeXrefs(metaModelElement.getXrefs());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"xrefs\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

}

log4j.debug("Leaving " + METHOD);
return element;
}

/*
 * This method initializes the name attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeName(String name)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (name != null) {
      log4j.debug("Creating new KeyValuePair: name");
      KeyValuePair kvp = new KeyValuePair("name", "<STRING_BEGIN>" + name + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"name\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the superType attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeSuperType(String superType)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (superType != null) {
      log4j.debug("Creating new KeyValuePair: superType");
      KeyValuePair kvp = new KeyValuePair("superType", "<STRING_BEGIN>" + superType + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"superType\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the labeled attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeLabeled(Boolean labeled)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (labeled != null) {
      log4j.debug("Creating new KeyValuePair: labeled");
      KeyValuePair kvp = new KeyValuePair("labeled", labeled.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"labeled\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the variables attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeVariables(List<Variable> variablesList)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   if (variablesList != null) {
      int indexVariables = 0;
      for (Variable variables : variablesList) {
         InitializeVariable initializeVariable = new InitializeVariable(variables);
         Element variablesElement = initializeVariable.initialize("variables[" + indexVariables + "]");
         abstractAttribute.getElements().add(variablesElement);
         indexVariables++;
      }
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"variables\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }
   return abstractAttribute;
}

/*
 * This method initializes the attributes attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeAttributes(List<Attribute> attributesList)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   if (attributesList != null) {
      int indexAttributes = 0;
      for (Attribute attributes : attributesList) {
         InitializeAttribute initializeAttribute = new InitializeAttribute(attributes);
         Element attributesElement = initializeAttribute.initialize("attributes[" + indexAttributes + "]");
         abstractAttribute.getElements().add(attributesElement);
         indexAttributes++;
      }
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"attributes\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }
   return abstractAttribute;
}

/*
 * This method initializes the xrefs attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeXrefs(List<CrossReference> xrefsList)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   if (xrefsList != null) {
      int indexXrefs = 0;
      for (CrossReference xrefs : xrefsList) {
         InitializeCrossReference initializeCrossReference = new InitializeCrossReference(xrefs);
         Element xrefsElement = initializeCrossReference.initialize("xrefs[" + indexXrefs + "]");
         abstractAttribute.getElements().add(xrefsElement);
         indexXrefs++;
      }
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"xrefs\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }
   return abstractAttribute;
}

/**
* This method returns the error message or null if no error occurred.
*/
public String getErrorMsg() {
   return theErrorMsg;
}

private void setErrorMsg(String errorMsg) {
   theErrorMsg = errorMsg;
}


}
