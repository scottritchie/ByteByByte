/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInstantiationFile()).
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

public class InstantiateRule {
private static Logger log4j = Logger.getLogger(InstantiateRule.class);

private Element element;
private Rule rule;

/*
 * The isUpdated flags. If an attribute is required by the grammar then a value
 * must be provided, and the isUpdated flag will be set when the value is
 * obtained during unpacking. After the object is constructed during unpacking, 
 * validation will be performed to make sure a value was provided for all attributes
 * that are not optional. 
 * See buildFlags() in JBitByBitGenerator.java.
 */
private boolean isScopePathsUpdated = false;
private boolean isTestPathsUpdated = false;
private boolean isDeadlinePathsUpdated = false;
private boolean isTestPathIDsUpdated = false;
private boolean isScopeIDsUpdated = false;
private boolean isTestIDsUpdated = false;
private boolean isOrgIdUpdated = false;
private boolean isNameUpdated = false;
private boolean isIdUpdated = false;
private boolean isTestPathLabelsUpdated = false;
private boolean isTestPathIdsUpdated = false;
private boolean isDeadlinePathLabelsUpdated = false;
private boolean isDeadlinePathIdsUpdated = false;
private boolean isScopePathLabelsUpdated = false;
private boolean isScopePathIdsUpdated = false;
private boolean isDeadlineLongUpdated = false;
private boolean isWarningUpdated = false;
private boolean isTimePeriodUpdated = false;
private boolean isExpectedNodeStateUpdated = false;
private boolean isEnabledUpdated = false;
private boolean isEmailNotificationUpdated = false;
private boolean isSmsNotificationUpdated = false;
private boolean isDeadlineIdUpdated = false;
private boolean isSaveWhenExpiredUpdated = false;
private boolean isExpiredUpdated = false;
private boolean isStateUpdated = false;

/**
 * This method constructs a InstantiateRule object based on an Element
 * object.
 * 
 * @param element
 *            The Element.
 */
public InstantiateRule(Element element) {
this.element = element;
this.rule = new Rule();
}

/**
 * The instantiate method instantiates a Rule object.
 * 
 * @return The Rule.
 */
protected Rule instantiate() {
final String METHOD = "instantiate()";
log4j.debug("Entered " + METHOD);

log4j.debug("element: " + element.getName());

for (AbstractAttribute abstractAttribute : element.getAbstractAttributes()) {
      // Entered instantiateSubTypeElements()
   for (Element e : abstractAttribute.getElements()) {
      if (e.getName().startsWith("scopePaths[")) {
         this.isScopePathsUpdated = true;
         log4j.debug("found element: scopePaths");
         if (rule.getScopePaths() == null) {
         List<RulePath> scopePaths = new ArrayList<RulePath>();
         rule.setScopePaths(scopePaths);
         }

         InstantiateRulePath instantiateRulePath =
                  new InstantiateRulePath(e);
         RulePath rulePath =
                  instantiateRulePath.instantiate();
         rule.getScopePaths().add(rulePath);
      }
      else if (e.getName().startsWith("testPaths[")) {
         this.isTestPathsUpdated = true;
         log4j.debug("found element: testPaths");
         if (rule.getTestPaths() == null) {
         List<RulePath> testPaths = new ArrayList<RulePath>();
         rule.setTestPaths(testPaths);
         }

         InstantiateRulePath instantiateRulePath =
                  new InstantiateRulePath(e);
         RulePath rulePath =
                  instantiateRulePath.instantiate();
         rule.getTestPaths().add(rulePath);
      }
      else if (e.getName().startsWith("deadlinePaths[")) {
         this.isDeadlinePathsUpdated = true;
         log4j.debug("found element: deadlinePaths");
         if (rule.getDeadlinePaths() == null) {
         List<RulePath> deadlinePaths = new ArrayList<RulePath>();
         rule.setDeadlinePaths(deadlinePaths);
         }

         InstantiateRulePath instantiateRulePath =
                  new InstantiateRulePath(e);
         RulePath rulePath =
                  instantiateRulePath.instantiate();
         rule.getDeadlinePaths().add(rulePath);
      }
      else if (e.getName().startsWith("scopeIDs[")) {
         this.isScopeIDsUpdated = true;
         log4j.debug("found element: scopeIDs");
         if (rule.getScopeIDs() == null) {
         List<ScopeIdType> scopeIDs = new ArrayList<ScopeIdType>();
         rule.setScopeIDs(scopeIDs);
         }

         InstantiateScopeIdType instantiateScopeIdType =
                  new InstantiateScopeIdType(e);
         ScopeIdType scopeIdType =
                  instantiateScopeIdType.instantiate();
         rule.getScopeIDs().add(scopeIdType);
      }
   }
   // Leaving instantiateSubTypeElements()


   for (KeyValuePair kvp : abstractAttribute.getKeyValuePairs()) {
         // Entered instantiateSubTypeAttributes()
   if (kvp.getKey().startsWith("testPathIDs[")) {
      this.isTestPathIDsUpdated = true;
      if(rule.getTestPathIDs() == null) {
      rule.setTestPathIDs(new ArrayList<String>());
      }
      rule.getTestPathIDs().add(kvp.getValue());
   }
   else if (kvp.getKey().startsWith("testIDs[")) {
      this.isTestIDsUpdated = true;
      if(rule.getTestIDs() == null) {
      rule.setTestIDs(new ArrayList<String>());
      }
      rule.getTestIDs().add(kvp.getValue());
   }
   else if (kvp.getKey().equals("orgId")) {
    this.isOrgIdUpdated = true;
   log4j.debug("setting value of \"orgId\" to: " + kvp.getValue());
   rule.setOrgId(kvp.getValue());
   }
   else if (kvp.getKey().equals("name")) {
    this.isNameUpdated = true;
   log4j.debug("setting value of \"name\" to: " + kvp.getValue());
   rule.setName(kvp.getValue());
   }
   else if (kvp.getKey().equals("id")) {
    this.isIdUpdated = true;
   log4j.debug("setting value of \"id\" to: " + kvp.getValue());
   rule.setId(kvp.getValue());
   }
   else if (kvp.getKey().equals("testPathLabels")) {
    this.isTestPathLabelsUpdated = true;
   log4j.debug("setting value of \"testPathLabels\" to: " + kvp.getValue());
   rule.setTestPathLabels(kvp.getValue());
   }
   else if (kvp.getKey().equals("testPathIds")) {
    this.isTestPathIdsUpdated = true;
   log4j.debug("setting value of \"testPathIds\" to: " + kvp.getValue());
   rule.setTestPathIds(kvp.getValue());
   }
   else if (kvp.getKey().equals("deadlinePathLabels")) {
    this.isDeadlinePathLabelsUpdated = true;
   log4j.debug("setting value of \"deadlinePathLabels\" to: " + kvp.getValue());
   rule.setDeadlinePathLabels(kvp.getValue());
   }
   else if (kvp.getKey().equals("deadlinePathIds")) {
    this.isDeadlinePathIdsUpdated = true;
   log4j.debug("setting value of \"deadlinePathIds\" to: " + kvp.getValue());
   rule.setDeadlinePathIds(kvp.getValue());
   }
   else if (kvp.getKey().equals("scopePathLabels")) {
    this.isScopePathLabelsUpdated = true;
   log4j.debug("setting value of \"scopePathLabels\" to: " + kvp.getValue());
   rule.setScopePathLabels(kvp.getValue());
   }
   else if (kvp.getKey().equals("scopePathIds")) {
    this.isScopePathIdsUpdated = true;
   log4j.debug("setting value of \"scopePathIds\" to: " + kvp.getValue());
   rule.setScopePathIds(kvp.getValue());
   }
   else if (kvp.getKey().equals("deadlineLong")) {
    this.isDeadlineLongUpdated = true;
   log4j.debug("setting value of \"deadlineLong\" to: " + kvp.getValue());
   rule.setDeadlineLong(Long.parseLong(kvp.getValue()));
   }
   else if (kvp.getKey().equals("warning")) {
    this.isWarningUpdated = true;
   log4j.debug("setting value of \"warning\" to: " + kvp.getValue());
   rule.setWarning(kvp.getValue());
   }
   else if (kvp.getKey().equals("timePeriod")) {
    this.isTimePeriodUpdated = true;
   log4j.debug("setting value of \"timePeriod\" to: " + kvp.getValue());
   rule.setTimePeriod(kvp.getValue());
   }
   else if (kvp.getKey().equals("emailAddress")) {
   log4j.debug("setting value of \"emailAddress\" to: " + kvp.getValue());
   rule.setEmailAddress(kvp.getValue());
   }
   else if (kvp.getKey().equals("sms")) {
   log4j.debug("setting value of \"sms\" to: " + kvp.getValue());
   rule.setSms(kvp.getValue());
   }
   else if (kvp.getKey().equals("expectedNodeState")) {
    this.isExpectedNodeStateUpdated = true;
   log4j.debug("setting value of \"expectedNodeState\" to: " + kvp.getValue());
   rule.setExpectedNodeState(Integer.parseInt(kvp.getValue()));
   }
   else if (kvp.getKey().equals("enabled")) {
    this.isEnabledUpdated = true;
   log4j.debug("setting value of \"enabled\" to: " + kvp.getValue());
   rule.setEnabled(kvp.getValue().equals("true"));
   }
   else if (kvp.getKey().equals("emailNotification")) {
    this.isEmailNotificationUpdated = true;
   log4j.debug("setting value of \"emailNotification\" to: " + kvp.getValue());
   rule.setEmailNotification(kvp.getValue().equals("true"));
   }
   else if (kvp.getKey().equals("smsNotification")) {
    this.isSmsNotificationUpdated = true;
   log4j.debug("setting value of \"smsNotification\" to: " + kvp.getValue());
   rule.setSmsNotification(kvp.getValue().equals("true"));
   }
   else if (kvp.getKey().equals("deadlineId")) {
    this.isDeadlineIdUpdated = true;
   log4j.debug("setting value of \"deadlineId\" to: " + kvp.getValue());
   rule.setDeadlineId(kvp.getValue());
   }
   else if (kvp.getKey().equals("saveWhenExpired")) {
    this.isSaveWhenExpiredUpdated = true;
   log4j.debug("setting value of \"saveWhenExpired\" to: " + kvp.getValue());
   rule.setSaveWhenExpired(kvp.getValue().equals("true"));
   }
   else if (kvp.getKey().equals("expired")) {
    this.isExpiredUpdated = true;
   log4j.debug("setting value of \"expired\" to: " + kvp.getValue());
   rule.setExpired(kvp.getValue().equals("true"));
   }
   // Entered instantiatePEnumRef()
   if (kvp.getKey().equals("state")) {
   this.isStateUpdated = true;
   log4j.debug("setting value of \"state\" to: " + kvp.getValue());
   rule.setState(RuleState.valueOf(kvp.getValue()));
   //this.state = RuleState.valueOf(kvp.getValue());
   }
   // Leaving instantiatePEnumRef()
   // Leaving instantiateSubTypeAttributes()

   }
}

log4j.debug("Leaving " + METHOD);
return rule;
}

/**
 * The validate method checks that a value was provided for all required 
 * attributes.
 *
 * @return The error message or null if no error occurred.
 */
protected String validate() {
final String METHOD = "validate()";
log4j.debug("Entered " + METHOD);

String result = null;

// Entered buildValidationMethod()
if (!this.isScopePathsUpdated) {
   String msg = "ScopePaths is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
}

if (!this.isTestPathsUpdated) {
   String msg = "TestPaths is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isDeadlinePathsUpdated) {
   String msg = "DeadlinePaths is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isTestPathIDsUpdated) {
   String msg = "TestPathIDs is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isScopeIDsUpdated) {
   String msg = "ScopeIDs is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isTestIDsUpdated) {
   String msg = "TestIDs is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isOrgIdUpdated) {
   String msg = "OrgId is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isNameUpdated) {
   String msg = "Name is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isIdUpdated) {
   String msg = "Id is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isTestPathLabelsUpdated) {
   String msg = "TestPathLabels is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isTestPathIdsUpdated) {
   String msg = "TestPathIds is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isDeadlinePathLabelsUpdated) {
   String msg = "DeadlinePathLabels is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isDeadlinePathIdsUpdated) {
   String msg = "DeadlinePathIds is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isScopePathLabelsUpdated) {
   String msg = "ScopePathLabels is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isScopePathIdsUpdated) {
   String msg = "ScopePathIds is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isDeadlineLongUpdated) {
   String msg = "DeadlineLong is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isWarningUpdated) {
   String msg = "Warning is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isTimePeriodUpdated) {
   String msg = "TimePeriod is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isExpectedNodeStateUpdated) {
   String msg = "ExpectedNodeState is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isEnabledUpdated) {
   String msg = "Enabled is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isEmailNotificationUpdated) {
   String msg = "EmailNotification is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isSmsNotificationUpdated) {
   String msg = "SmsNotification is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isDeadlineIdUpdated) {
   String msg = "DeadlineId is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isSaveWhenExpiredUpdated) {
   String msg = "SaveWhenExpired is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isExpiredUpdated) {
   String msg = "Expired is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}
if (!this.isStateUpdated) {
   String msg = "State is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}


if (result != null) {
   log4j.debug("result: " + result);
}

log4j.debug("Leaving " + METHOD);
return result;
}
}
