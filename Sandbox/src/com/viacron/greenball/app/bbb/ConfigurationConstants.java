/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateClassFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;
import com.viacron.utils.StringMessageBuffer.parser.SMBGLexer;
import com.viacron.utils.StringMessageBuffer.parser.SMBGParser;

/**
 * The ConfigurationConstants class defines a message of the messaging system defined
 * by the GreenballMessages grammar. It provides methods for packing a ConfigurationConstants object
 * into a byte array or string, and for unpacking a byte array or string
 * back into a ConfigurationConstants object.
 */
public class ConfigurationConstants {
   private static final int ID = GreenballMessagesEnum.CONFIGURATION_CONSTANTS.getId();

   /**
    * The number of bits required to represent the ConfigurationConstantsEnum IDs.
    * # of attributes: 17
    * # of PEnumRefs: 0
    */
   private static final int ID_BITS = 5;

   private static GreenballMessagesDirectoryEntry[] theDirectory;
   private static final int DIRECTORY_OFFSET = 66;

   private static Logger log4j = Logger.getLogger(ConfigurationConstants.class);

   // Entered buildClassEnum()
   private enum ConfigurationConstantsEnum {
      // sizeInBits: 32
      CONFIGURATION_CONSTANT_NAME_MAX_LENGTH(0, 16, 0, false),

      // sizeInBits: 32
      FIRST_NAME_MAX_LENGTH(1, 48, 0, false),

      // sizeInBits: 32
      LAST_NAME_MAX_LENGTH(2, 80, 0, false),

      // sizeInBits: 32
      MIDDLE_NAME_MAX_LENGTH(3, 112, 0, false),

      // sizeInBits: 32
      META_MODEL_NAME_MAX_LENGTH(4, 144, 0, false),

      // sizeInBits: 32
      META_MODEL_DESCRIPTION_MAX_LENGTH(5, 176, 0, false),

      // sizeInBits: 32
      META_MODEL_OWNER_MAX_LENGTH(6, 208, 0, false),

      // sizeInBits: 32
      ORG_DISPLAY_NAME_MAX_LENGTH(7, 240, 0, false),

      // sizeInBits: 32
      PASSWORD_MAX_LENGTH(8, 272, 0, false),

      // sizeInBits: 32
      PASSWORD_MIN_LENGTH(9, 304, 0, false),

      // sizeInBits: 32
      PATH_MAX_LENGTH(10, 336, 0, false),

      // sizeInBits: 32
      SUBSCRIPTION_REQUEST_MESSAGE_MAX_LENGTH(11, 368, 0, false),

      // sizeInBits: 32
      USER_NAME_MAX_LENGTH(12, 400, 0, false),

      // sizeInBits: 32
      USER_ROLE_MAX_LENGTH(13, 432, 0, false),

      // sizeInBits: 32
      USER_STATUS_MAX_LENGTH(14, 464, 0, false),

      // sizeInBits: 32
      PAYMENT_STATUS_MAX_LENGTH(15, 496, 0, false),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SESSION_ID(16, -1, 0, true);

      private final int id;
      private final int offsetInBits;
      private int length;
      private boolean isDirectoryEntry;

      ConfigurationConstantsEnum(int id, int offsetInBits, int length, boolean isDirectoryEntry) {
         this.id = id;
         this.offsetInBits = offsetInBits;
         this.length = length;
         this.isDirectoryEntry = isDirectoryEntry;
      }

      public int getId() {
         return this.id;
      }

      public int getOffsetInBits() {
         return this.offsetInBits;
      }

      public int getLength() {
         return this.length;
      }

      public void setLength(int length) {
         this.length = length;
      }
   } // Leaving buildClassEnum()

   /*
    * The instance variables.
    * See buildInstanceVariables() in JBitByBitGenerator.java.
    */
   private int configurationConstantNameMaxLength;
   private int firstNameMaxLength;
   private int lastNameMaxLength;
   private int middleNameMaxLength;
   private int metaModelNameMaxLength;
   private int metaModelDescriptionMaxLength;
   private int metaModelOwnerMaxLength;
   private int orgDisplayNameMaxLength;
   private int passwordMaxLength;
   private int passwordMinLength;
   private int pathMaxLength;
   private int subscriptionRequestMessageMaxLength;
   private int userNameMaxLength;
   private int userRoleMaxLength;
   private int userStatusMaxLength;
   private int paymentStatusMaxLength;
   private String sessionId;

   private String theErrorMsg;

   /**
    * The ConfigurationConstants no-arg constructor.
    */
   public ConfigurationConstants() {}

   /**
    * The ConfigurationConstants constructor.
    * See buildParameterAnnotations() in JBitByBitGenerator.java.
    *
    * @param configurationConstantNameMaxLength The configurationConstantNameMaxLength message attribute.
    * @param firstNameMaxLength The firstNameMaxLength message attribute.
    * @param lastNameMaxLength The lastNameMaxLength message attribute.
    * @param middleNameMaxLength The middleNameMaxLength message attribute.
    * @param metaModelNameMaxLength The metaModelNameMaxLength message attribute.
    * @param metaModelDescriptionMaxLength The metaModelDescriptionMaxLength message attribute.
    * @param metaModelOwnerMaxLength The metaModelOwnerMaxLength message attribute.
    * @param orgDisplayNameMaxLength The orgDisplayNameMaxLength message attribute.
    * @param passwordMaxLength The passwordMaxLength message attribute.
    * @param passwordMinLength The passwordMinLength message attribute.
    * @param pathMaxLength The pathMaxLength message attribute.
    * @param subscriptionRequestMessageMaxLength The subscriptionRequestMessageMaxLength message attribute.
    * @param userNameMaxLength The userNameMaxLength message attribute.
    * @param userRoleMaxLength The userRoleMaxLength message attribute.
    * @param userStatusMaxLength The userStatusMaxLength message attribute.
    * @param paymentStatusMaxLength The paymentStatusMaxLength message attribute.
    * @param sessionId The sessionId message attribute.
    */
   public ConfigurationConstants(Integer configurationConstantNameMaxLength,
                                 Integer firstNameMaxLength,
                                 Integer lastNameMaxLength,
                                 Integer middleNameMaxLength,
                                 Integer metaModelNameMaxLength,
                                 Integer metaModelDescriptionMaxLength,
                                 Integer metaModelOwnerMaxLength,
                                 Integer orgDisplayNameMaxLength,
                                 Integer passwordMaxLength,
                                 Integer passwordMinLength,
                                 Integer pathMaxLength,
                                 Integer subscriptionRequestMessageMaxLength,
                                 Integer userNameMaxLength,
                                 Integer userRoleMaxLength,
                                 Integer userStatusMaxLength,
                                 Integer paymentStatusMaxLength,
                                 String sessionId) {
      // Entered buildParameterAssignments()
      this.setConfigurationConstantNameMaxLength(configurationConstantNameMaxLength);
      this.setFirstNameMaxLength(firstNameMaxLength);
      this.setLastNameMaxLength(lastNameMaxLength);
      this.setMiddleNameMaxLength(middleNameMaxLength);
      this.setMetaModelNameMaxLength(metaModelNameMaxLength);
      this.setMetaModelDescriptionMaxLength(metaModelDescriptionMaxLength);
      this.setMetaModelOwnerMaxLength(metaModelOwnerMaxLength);
      this.setOrgDisplayNameMaxLength(orgDisplayNameMaxLength);
      this.setPasswordMaxLength(passwordMaxLength);
      this.setPasswordMinLength(passwordMinLength);
      this.setPathMaxLength(pathMaxLength);
      this.setSubscriptionRequestMessageMaxLength(subscriptionRequestMessageMaxLength);
      this.setUserNameMaxLength(userNameMaxLength);
      this.setUserRoleMaxLength(userRoleMaxLength);
      this.setUserStatusMaxLength(userStatusMaxLength);
      this.setPaymentStatusMaxLength(paymentStatusMaxLength);
      this.setSessionId(sessionId);
      // Leaving buildParameterAssignments()
   }


   // Entered buildSetErrorMsgMethod()
   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }
   // Leaving buildSetErrorMsgMethod()

   // Entered buildGetErrorMsgMethod()
   /**
    * This method returns the error message or null if no error
    * occurred.
    */
   public String getErrorMsg() {
      return theErrorMsg;
   }
   // Leaving buildGetErrorMsgMethod()

   // Entered buildPackMethod()
   /**
    * This method packs a ConfigurationConstants object into a byte array. If a required attribute is not
    * provided an exception will be thrown.
    *
    * @return A byte array which represents a ConfigurationConstants message object.
    * @throws MissingAttributeException
    */
   public byte[] pack() throws MissingAttributeException {
      final String METHOD = "pack()";
      log4j.debug("Entered " + METHOD);

      int byteArraySize = getConfigurationConstantsSize();
      log4j.debug("byteArraySize: " + byteArraySize);
      byte[] bb = new byte[byteArraySize];

      /*
       * Convert object to byte array.
       */
      int offset = 0;

      bb = GreenballMessagesUtility.insertShort(bb, offset, (short) ID);
      offset += 2;

      if (this.getConfigurationConstantNameMaxLength() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "configurationConstantNameMaxLength", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getConfigurationConstantNameMaxLength());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"configurationConstantNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getFirstNameMaxLength() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "firstNameMaxLength", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getFirstNameMaxLength());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"firstNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getLastNameMaxLength() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "lastNameMaxLength", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getLastNameMaxLength());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"lastNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getMiddleNameMaxLength() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "middleNameMaxLength", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getMiddleNameMaxLength());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"middleNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getMetaModelNameMaxLength() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "metaModelNameMaxLength", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getMetaModelNameMaxLength());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"metaModelNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getMetaModelDescriptionMaxLength() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "metaModelDescriptionMaxLength", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getMetaModelDescriptionMaxLength());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"metaModelDescriptionMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getMetaModelOwnerMaxLength() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "metaModelOwnerMaxLength", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getMetaModelOwnerMaxLength());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"metaModelOwnerMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getOrgDisplayNameMaxLength() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "orgDisplayNameMaxLength", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getOrgDisplayNameMaxLength());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"orgDisplayNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getPasswordMaxLength() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "passwordMaxLength", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getPasswordMaxLength());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"passwordMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getPasswordMinLength() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "passwordMinLength", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getPasswordMinLength());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"passwordMinLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getPathMaxLength() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "pathMaxLength", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getPathMaxLength());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"pathMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getSubscriptionRequestMessageMaxLength() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "subscriptionRequestMessageMaxLength", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getSubscriptionRequestMessageMaxLength());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"subscriptionRequestMessageMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getUserNameMaxLength() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "userNameMaxLength", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getUserNameMaxLength());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"userNameMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getUserRoleMaxLength() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "userRoleMaxLength", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getUserRoleMaxLength());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"userRoleMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getUserStatusMaxLength() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "userStatusMaxLength", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getUserStatusMaxLength());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"userStatusMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getPaymentStatusMaxLength() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "paymentStatusMaxLength", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getPaymentStatusMaxLength());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"paymentStatusMaxLength\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }


      ConfigurationConstantsEnum.SESSION_ID.setLength(this.getSessionId() != null ? this.getSessionId().length() : 0);

      int directorySize = getConfigurationConstantsDirectorySize();
      if (directorySize != 0) {
         // Create the directory
         theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
         for (int i = 0; i < directorySize; i++) {
            theDirectory[i] = new GreenballMessagesDirectoryEntry();
         }

         // Fill the directory
         int index = 0;
         offset = DIRECTORY_OFFSET
               + GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES
               * theDirectory.length;

         for (ConfigurationConstantsEnum configurationConstantsEnum : ConfigurationConstantsEnum.values()) {
            if (configurationConstantsEnum.isDirectoryEntry == true) {
               int id = configurationConstantsEnum.getId();
               int length = configurationConstantsEnum.getLength();

               theDirectory[index].setId(id);
               theDirectory[index].setLength(length);
               theDirectory[index].setOffset(offset);

               // Insert the data
               if (id == ConfigurationConstantsEnum.SESSION_ID.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "sessionId", offset));
                  if (getSessionId() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getSessionId());
                     offset += length * 1;
                  }
               }
               index++;
            }
         }

         // Insert the directory
         log4j.debug(String.format("inserting the directory at offset %d", DIRECTORY_OFFSET));
         offset = DIRECTORY_OFFSET;
         index = 0;
         for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
            log4j.debug(String.format("index[%d]: ", index));
            log4j.debug(String.format("  ID:     %d", directoryEntry.getId()));
            log4j.debug(String.format("  length: %d", directoryEntry.getLength()));
            log4j.debug(String.format("  offset: %d", directoryEntry.getOffset()));
            bb = GreenballMessagesUtility.insertInteger(bb, offset, directoryEntry.getId());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 4, directoryEntry.getLength());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 8, directoryEntry.getOffset());

            offset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
            index++;
         }

         // Calculate and insert the checksum
         long checksum = GreenballMessagesUtility.getChecksum(bb, bb.length - 8);
         bb = GreenballMessagesUtility.insertLong(bb, bb.length - 8, checksum);
      }
      log4j.debug("Leaving " + METHOD);
      return bb;
   }
   // Leaving buildPackMethod()

   // Entered buildUnpackMethod()
   /**
    * This method unpacks a byte array containing a ConfigurationConstants object.
    *
    * @return The byte array as a ConfigurationConstants message object.
    */
   public ConfigurationConstants unpack(byte[] ba) {
      final String METHOD = "unpack()";
      log4j.debug("Entered " + METHOD);

      ConfigurationConstants configurationConstants = new ConfigurationConstants();

      configurationConstants.setConfigurationConstantNameMaxLength(GreenballMessagesUtility.getInteger(ba, ConfigurationConstantsEnum.CONFIGURATION_CONSTANT_NAME_MAX_LENGTH.getOffsetInBits()));
      configurationConstants.setFirstNameMaxLength(GreenballMessagesUtility.getInteger(ba, ConfigurationConstantsEnum.FIRST_NAME_MAX_LENGTH.getOffsetInBits()));
      configurationConstants.setLastNameMaxLength(GreenballMessagesUtility.getInteger(ba, ConfigurationConstantsEnum.LAST_NAME_MAX_LENGTH.getOffsetInBits()));
      configurationConstants.setMiddleNameMaxLength(GreenballMessagesUtility.getInteger(ba, ConfigurationConstantsEnum.MIDDLE_NAME_MAX_LENGTH.getOffsetInBits()));
      configurationConstants.setMetaModelNameMaxLength(GreenballMessagesUtility.getInteger(ba, ConfigurationConstantsEnum.META_MODEL_NAME_MAX_LENGTH.getOffsetInBits()));
      configurationConstants.setMetaModelDescriptionMaxLength(GreenballMessagesUtility.getInteger(ba, ConfigurationConstantsEnum.META_MODEL_DESCRIPTION_MAX_LENGTH.getOffsetInBits()));
      configurationConstants.setMetaModelOwnerMaxLength(GreenballMessagesUtility.getInteger(ba, ConfigurationConstantsEnum.META_MODEL_OWNER_MAX_LENGTH.getOffsetInBits()));
      configurationConstants.setOrgDisplayNameMaxLength(GreenballMessagesUtility.getInteger(ba, ConfigurationConstantsEnum.ORG_DISPLAY_NAME_MAX_LENGTH.getOffsetInBits()));
      configurationConstants.setPasswordMaxLength(GreenballMessagesUtility.getInteger(ba, ConfigurationConstantsEnum.PASSWORD_MAX_LENGTH.getOffsetInBits()));
      configurationConstants.setPasswordMinLength(GreenballMessagesUtility.getInteger(ba, ConfigurationConstantsEnum.PASSWORD_MIN_LENGTH.getOffsetInBits()));
      configurationConstants.setPathMaxLength(GreenballMessagesUtility.getInteger(ba, ConfigurationConstantsEnum.PATH_MAX_LENGTH.getOffsetInBits()));
      configurationConstants.setSubscriptionRequestMessageMaxLength(GreenballMessagesUtility.getInteger(ba, ConfigurationConstantsEnum.SUBSCRIPTION_REQUEST_MESSAGE_MAX_LENGTH.getOffsetInBits()));
      configurationConstants.setUserNameMaxLength(GreenballMessagesUtility.getInteger(ba, ConfigurationConstantsEnum.USER_NAME_MAX_LENGTH.getOffsetInBits()));
      configurationConstants.setUserRoleMaxLength(GreenballMessagesUtility.getInteger(ba, ConfigurationConstantsEnum.USER_ROLE_MAX_LENGTH.getOffsetInBits()));
      configurationConstants.setUserStatusMaxLength(GreenballMessagesUtility.getInteger(ba, ConfigurationConstantsEnum.USER_STATUS_MAX_LENGTH.getOffsetInBits()));
      configurationConstants.setPaymentStatusMaxLength(GreenballMessagesUtility.getInteger(ba, ConfigurationConstantsEnum.PAYMENT_STATUS_MAX_LENGTH.getOffsetInBits()));

      // Get the directory
      int directorySize = getConfigurationConstantsDirectorySize();
      theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
      int dirOffset = DIRECTORY_OFFSET;

      for (int entry = 0 ; entry < directorySize; entry++) {
         GreenballMessagesDirectoryEntry directoryEntry = new GreenballMessagesDirectoryEntry();

         int id = GreenballMessagesUtility.getInteger(ba, dirOffset * 8);
         directoryEntry.setId(id);
         int length = GreenballMessagesUtility.getInteger(ba, (dirOffset + 4) * 8);
         directoryEntry.setLength(length);
         int offset = GreenballMessagesUtility.getInteger(ba, (dirOffset + 8) * 8);
         directoryEntry.setOffset(offset);

         theDirectory[entry] = directoryEntry;

         dirOffset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      }

      for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
         int id = directoryEntry.getId();
         int offset = directoryEntry.getOffset();
         int length = directoryEntry.getLength();

         if (id == ConfigurationConstantsEnum.SESSION_ID.getId()) {
            configurationConstants.setSessionId(GreenballMessagesUtility.getString(ba, offset, length));
         }
      }

      log4j.debug("Leaving " + METHOD);
      return configurationConstants;
   }
   // Leaving buildUnpackMethod()

   // Entered buildPackStrMethod()
   /**
    * This method packs a ConfigurationConstants object into a String. If a required attribute is not
    * provided an exception will be thrown.
    *
    * @return A String which represents a ConfigurationConstants message object.
    * @throws MissingAttributeException
    */
   public String packStr() throws MissingAttributeException {
      final String METHOD = "packStr()";
      log4j.debug("Entered " + METHOD);

      String msg = null;
      setErrorMsg(null);
       
      /*
       * Initialize attribute values.
       */
      InitializeConfigurationConstants initializeConfigurationConstants = new InitializeConfigurationConstants(this);
      Element element = initializeConfigurationConstants.initialize();

      if (getErrorMsg() == null) {
         /*
          * Convert object to String.
          * See convertObjectToString() in JBitByBitGenerator.java.
          */
         msg = "{" + element.getName();
         for (AbstractAttribute attr : element.getAbstractAttributes()) {
            msg = buildString(attr, msg);
         }
         msg = msg.concat("}");

         log4j.debug("msg: " + msg);
      }

      log4j.debug("Leaving " + METHOD);
      return msg;
   }
   // Leaving buildPackStrMethod()

   // Entered buildUnpackStrMethod()
   /**
    * The unpack() method unpacks a String into an object. The String must conform to the
    * SMBG grammar.
    *
     * @return The message string as an object.
    */
   public ConfigurationConstants unpack(String buffer) {
      final String METHOD = "unpack()";
      log4j.debug("Entered " + METHOD);

      setErrorMsg(null);

      // Create the lexer
      log4j.debug("lexing...");
      SMBGLexer lexer = new SMBGLexer(new ANTLRStringStream(buffer));

      int nbrOfSyntaxErrors = lexer.getNumberOfSyntaxErrors();
      log4j.debug("# of lexer errors: " + nbrOfSyntaxErrors);

      // Check for errors
      if (nbrOfSyntaxErrors != 0) {
         for (String error : lexer.getErrors()) {
            log4j.error(error);
         }

         return null;
      }

      // Wrap a token-stream around the lexer
      CommonTokenStream tokenStream = new CommonTokenStream(lexer);

      // Create the parser
      log4j.debug("parsing...");
      SMBGParser parser = new SMBGParser(tokenStream);

      // Check for errors
      nbrOfSyntaxErrors = parser.getNumberOfSyntaxErrors();
      log4j.debug("# of parse errors: " + nbrOfSyntaxErrors);

      if (nbrOfSyntaxErrors != 0) {
         for (String error : parser.getErrors()) {
               log4j.error(error);
         }

         return null;
      }

      // Unpack the string into objects
      log4j.debug("unpacking...");
      try {
         parser.unpack();
      } catch (RecognitionException e) {
         log4j.error("Error: " + e.getMessage());
         setErrorMsg(e.getMessage());
         return null;
      }
      
      Element element = parser.getElement();
      element.dump();

      /*
       * Instantiate the ConfigurationConstants object.
       */
       InstantiateConfigurationConstants instantiateConfigurationConstants = new InstantiateConfigurationConstants(element);
       ConfigurationConstants configurationConstants = instantiateConfigurationConstants.instantiate();

      /*
       * Verify that a value was provided for all mandatory attributes.
       */
      String result = instantiateConfigurationConstants.validate();
      if (result != null) {
         log4j.error("Error: " + result);
         setErrorMsg(result);
         return null;
      }

      log4j.debug("Leaving " + METHOD);
      return configurationConstants;
   }
   // Leaving buildUnpackStrMethod()

   private String buildString(AbstractAttribute attr, String msg) {
      for (KeyValuePair kvp : attr.getKeyValuePairs()) {
         msg = msg.concat(" " + kvp.getKey() + ":" + kvp.getValue());
      }

      for (Element element : attr.getElements()) {
         msg = msg.concat(" {" + element.getName());
         for (AbstractAttribute abstractAttribute : element.getAbstractAttributes()) {
            msg = buildString(abstractAttribute, msg);
         }
         msg = msg.concat("}");
      }

      return msg;
   }

   /**
    * This method sets the configurationConstantNameMaxLength attribute. Setting of this value is required.
    * @param configurationConstantNameMaxLength The configurationConstantNameMaxLength attribute.
    */
   public void setConfigurationConstantNameMaxLength(Integer configurationConstantNameMaxLength) {
      this.configurationConstantNameMaxLength = configurationConstantNameMaxLength;
   }

   /**
    * This method sets the firstNameMaxLength attribute. Setting of this value is required.
    * @param firstNameMaxLength The firstNameMaxLength attribute.
    */
   public void setFirstNameMaxLength(Integer firstNameMaxLength) {
      this.firstNameMaxLength = firstNameMaxLength;
   }

   /**
    * This method sets the lastNameMaxLength attribute. Setting of this value is required.
    * @param lastNameMaxLength The lastNameMaxLength attribute.
    */
   public void setLastNameMaxLength(Integer lastNameMaxLength) {
      this.lastNameMaxLength = lastNameMaxLength;
   }

   /**
    * This method sets the middleNameMaxLength attribute. Setting of this value is required.
    * @param middleNameMaxLength The middleNameMaxLength attribute.
    */
   public void setMiddleNameMaxLength(Integer middleNameMaxLength) {
      this.middleNameMaxLength = middleNameMaxLength;
   }

   /**
    * This method sets the metaModelNameMaxLength attribute. Setting of this value is required.
    * @param metaModelNameMaxLength The metaModelNameMaxLength attribute.
    */
   public void setMetaModelNameMaxLength(Integer metaModelNameMaxLength) {
      this.metaModelNameMaxLength = metaModelNameMaxLength;
   }

   /**
    * This method sets the metaModelDescriptionMaxLength attribute. Setting of this value is required.
    * @param metaModelDescriptionMaxLength The metaModelDescriptionMaxLength attribute.
    */
   public void setMetaModelDescriptionMaxLength(Integer metaModelDescriptionMaxLength) {
      this.metaModelDescriptionMaxLength = metaModelDescriptionMaxLength;
   }

   /**
    * This method sets the metaModelOwnerMaxLength attribute. Setting of this value is required.
    * @param metaModelOwnerMaxLength The metaModelOwnerMaxLength attribute.
    */
   public void setMetaModelOwnerMaxLength(Integer metaModelOwnerMaxLength) {
      this.metaModelOwnerMaxLength = metaModelOwnerMaxLength;
   }

   /**
    * This method sets the orgDisplayNameMaxLength attribute. Setting of this value is required.
    * @param orgDisplayNameMaxLength The orgDisplayNameMaxLength attribute.
    */
   public void setOrgDisplayNameMaxLength(Integer orgDisplayNameMaxLength) {
      this.orgDisplayNameMaxLength = orgDisplayNameMaxLength;
   }

   /**
    * This method sets the passwordMaxLength attribute. Setting of this value is required.
    * @param passwordMaxLength The passwordMaxLength attribute.
    */
   public void setPasswordMaxLength(Integer passwordMaxLength) {
      this.passwordMaxLength = passwordMaxLength;
   }

   /**
    * This method sets the passwordMinLength attribute. Setting of this value is required.
    * @param passwordMinLength The passwordMinLength attribute.
    */
   public void setPasswordMinLength(Integer passwordMinLength) {
      this.passwordMinLength = passwordMinLength;
   }

   /**
    * This method sets the pathMaxLength attribute. Setting of this value is required.
    * @param pathMaxLength The pathMaxLength attribute.
    */
   public void setPathMaxLength(Integer pathMaxLength) {
      this.pathMaxLength = pathMaxLength;
   }

   /**
    * This method sets the subscriptionRequestMessageMaxLength attribute. Setting of this value is required.
    * @param subscriptionRequestMessageMaxLength The subscriptionRequestMessageMaxLength attribute.
    */
   public void setSubscriptionRequestMessageMaxLength(Integer subscriptionRequestMessageMaxLength) {
      this.subscriptionRequestMessageMaxLength = subscriptionRequestMessageMaxLength;
   }

   /**
    * This method sets the userNameMaxLength attribute. Setting of this value is required.
    * @param userNameMaxLength The userNameMaxLength attribute.
    */
   public void setUserNameMaxLength(Integer userNameMaxLength) {
      this.userNameMaxLength = userNameMaxLength;
   }

   /**
    * This method sets the userRoleMaxLength attribute. Setting of this value is required.
    * @param userRoleMaxLength The userRoleMaxLength attribute.
    */
   public void setUserRoleMaxLength(Integer userRoleMaxLength) {
      this.userRoleMaxLength = userRoleMaxLength;
   }

   /**
    * This method sets the userStatusMaxLength attribute. Setting of this value is required.
    * @param userStatusMaxLength The userStatusMaxLength attribute.
    */
   public void setUserStatusMaxLength(Integer userStatusMaxLength) {
      this.userStatusMaxLength = userStatusMaxLength;
   }

   /**
    * This method sets the paymentStatusMaxLength attribute. Setting of this value is required.
    * @param paymentStatusMaxLength The paymentStatusMaxLength attribute.
    */
   public void setPaymentStatusMaxLength(Integer paymentStatusMaxLength) {
      this.paymentStatusMaxLength = paymentStatusMaxLength;
   }

   /**
    * This method sets the sessionId attribute. Setting of this value is required.
    * @param sessionId The sessionId attribute.
    */
   public void setSessionId(String sessionId) {
      this.sessionId = sessionId;
   }

   /**
    * This method gets the configurationConstantNameMaxLength attribute. The configurationConstantNameMaxLength attribute is a required attribute.
    */
   public Integer getConfigurationConstantNameMaxLength() {
      return this.configurationConstantNameMaxLength;
   }

   /**
    * This method gets the firstNameMaxLength attribute. The firstNameMaxLength attribute is a required attribute.
    */
   public Integer getFirstNameMaxLength() {
      return this.firstNameMaxLength;
   }

   /**
    * This method gets the lastNameMaxLength attribute. The lastNameMaxLength attribute is a required attribute.
    */
   public Integer getLastNameMaxLength() {
      return this.lastNameMaxLength;
   }

   /**
    * This method gets the middleNameMaxLength attribute. The middleNameMaxLength attribute is a required attribute.
    */
   public Integer getMiddleNameMaxLength() {
      return this.middleNameMaxLength;
   }

   /**
    * This method gets the metaModelNameMaxLength attribute. The metaModelNameMaxLength attribute is a required attribute.
    */
   public Integer getMetaModelNameMaxLength() {
      return this.metaModelNameMaxLength;
   }

   /**
    * This method gets the metaModelDescriptionMaxLength attribute. The metaModelDescriptionMaxLength attribute is a required attribute.
    */
   public Integer getMetaModelDescriptionMaxLength() {
      return this.metaModelDescriptionMaxLength;
   }

   /**
    * This method gets the metaModelOwnerMaxLength attribute. The metaModelOwnerMaxLength attribute is a required attribute.
    */
   public Integer getMetaModelOwnerMaxLength() {
      return this.metaModelOwnerMaxLength;
   }

   /**
    * This method gets the orgDisplayNameMaxLength attribute. The orgDisplayNameMaxLength attribute is a required attribute.
    */
   public Integer getOrgDisplayNameMaxLength() {
      return this.orgDisplayNameMaxLength;
   }

   /**
    * This method gets the passwordMaxLength attribute. The passwordMaxLength attribute is a required attribute.
    */
   public Integer getPasswordMaxLength() {
      return this.passwordMaxLength;
   }

   /**
    * This method gets the passwordMinLength attribute. The passwordMinLength attribute is a required attribute.
    */
   public Integer getPasswordMinLength() {
      return this.passwordMinLength;
   }

   /**
    * This method gets the pathMaxLength attribute. The pathMaxLength attribute is a required attribute.
    */
   public Integer getPathMaxLength() {
      return this.pathMaxLength;
   }

   /**
    * This method gets the subscriptionRequestMessageMaxLength attribute. The subscriptionRequestMessageMaxLength attribute is a required attribute.
    */
   public Integer getSubscriptionRequestMessageMaxLength() {
      return this.subscriptionRequestMessageMaxLength;
   }

   /**
    * This method gets the userNameMaxLength attribute. The userNameMaxLength attribute is a required attribute.
    */
   public Integer getUserNameMaxLength() {
      return this.userNameMaxLength;
   }

   /**
    * This method gets the userRoleMaxLength attribute. The userRoleMaxLength attribute is a required attribute.
    */
   public Integer getUserRoleMaxLength() {
      return this.userRoleMaxLength;
   }

   /**
    * This method gets the userStatusMaxLength attribute. The userStatusMaxLength attribute is a required attribute.
    */
   public Integer getUserStatusMaxLength() {
      return this.userStatusMaxLength;
   }

   /**
    * This method gets the paymentStatusMaxLength attribute. The paymentStatusMaxLength attribute is a required attribute.
    */
   public Integer getPaymentStatusMaxLength() {
      return this.paymentStatusMaxLength;
   }

   /**
    * This method gets the sessionId attribute. The sessionId attribute is a required attribute.
    */
   public String getSessionId() {
      return this.sessionId;
   }

   /**
    * This method gets the size of the directory.
    */
   private int getConfigurationConstantsDirectorySize() {
      int directorySize = 0;

      // sessionId
      directorySize++;

      return directorySize;
   }


   /**
    * This method gets the size of the ConfigurationConstants object.
    * @return The size in bytes.
    */
   public int getConfigurationConstantsSize() {
      int size = 0;

      int directorySize = getConfigurationConstantsDirectorySize();
      size += directorySize * GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      // Add two bytes for the ID
      size += 2;
      // Add eight bytes for the CRC
      size += 8;
      // Add size of configurationConstantNameMaxLength
      size += 4;
      // Add size of firstNameMaxLength
      size += 4;
      // Add size of lastNameMaxLength
      size += 4;
      // Add size of middleNameMaxLength
      size += 4;
      // Add size of metaModelNameMaxLength
      size += 4;
      // Add size of metaModelDescriptionMaxLength
      size += 4;
      // Add size of metaModelOwnerMaxLength
      size += 4;
      // Add size of orgDisplayNameMaxLength
      size += 4;
      // Add size of passwordMaxLength
      size += 4;
      // Add size of passwordMinLength
      size += 4;
      // Add size of pathMaxLength
      size += 4;
      // Add size of subscriptionRequestMessageMaxLength
      size += 4;
      // Add size of userNameMaxLength
      size += 4;
      // Add size of userRoleMaxLength
      size += 4;
      // Add size of userStatusMaxLength
      size += 4;
      // Add size of paymentStatusMaxLength
      size += 4;
      // Add size of sessionId
      size += (getSessionId() != null ? getSessionId().length() : 0);

      return size;
   }

   @Override
   public String toString() {
      StringBuilder result = new StringBuilder();
      String NEW_LINE = System.getProperty("line.separator");

      result.append(this.getClass().getSimpleName() + " Object {" + NEW_LINE);
      result.append(" configurationConstantNameMaxLength: " + configurationConstantNameMaxLength + NEW_LINE);
      result.append(" firstNameMaxLength: " + firstNameMaxLength + NEW_LINE);
      result.append(" lastNameMaxLength: " + lastNameMaxLength + NEW_LINE);
      result.append(" middleNameMaxLength: " + middleNameMaxLength + NEW_LINE);
      result.append(" metaModelNameMaxLength: " + metaModelNameMaxLength + NEW_LINE);
      result.append(" metaModelDescriptionMaxLength: " + metaModelDescriptionMaxLength + NEW_LINE);
      result.append(" metaModelOwnerMaxLength: " + metaModelOwnerMaxLength + NEW_LINE);
      result.append(" orgDisplayNameMaxLength: " + orgDisplayNameMaxLength + NEW_LINE);
      result.append(" passwordMaxLength: " + passwordMaxLength + NEW_LINE);
      result.append(" passwordMinLength: " + passwordMinLength + NEW_LINE);
      result.append(" pathMaxLength: " + pathMaxLength + NEW_LINE);
      result.append(" subscriptionRequestMessageMaxLength: " + subscriptionRequestMessageMaxLength + NEW_LINE);
      result.append(" userNameMaxLength: " + userNameMaxLength + NEW_LINE);
      result.append(" userRoleMaxLength: " + userRoleMaxLength + NEW_LINE);
      result.append(" userStatusMaxLength: " + userStatusMaxLength + NEW_LINE);
      result.append(" paymentStatusMaxLength: " + paymentStatusMaxLength + NEW_LINE);
      result.append(" sessionId: " + sessionId + NEW_LINE);

      result.append("} ");

      return result.toString();
   }

   /**
    * The hashCode method returns this object's hashCode.
    */
   @Override
   public int hashCode() {
      final int prime = 31;
      int result = 1;
      result = prime * result
         + ((Integer) configurationConstantNameMaxLength).hashCode();
      result = prime * result
         + ((Integer) firstNameMaxLength).hashCode();
      result = prime * result
         + ((Integer) lastNameMaxLength).hashCode();
      result = prime * result
         + ((Integer) middleNameMaxLength).hashCode();
      result = prime * result
         + ((Integer) metaModelNameMaxLength).hashCode();
      result = prime * result
         + ((Integer) metaModelDescriptionMaxLength).hashCode();
      result = prime * result
         + ((Integer) metaModelOwnerMaxLength).hashCode();
      result = prime * result
         + ((Integer) orgDisplayNameMaxLength).hashCode();
      result = prime * result
         + ((Integer) passwordMaxLength).hashCode();
      result = prime * result
         + ((Integer) passwordMinLength).hashCode();
      result = prime * result
         + ((Integer) pathMaxLength).hashCode();
      result = prime * result
         + ((Integer) subscriptionRequestMessageMaxLength).hashCode();
      result = prime * result
         + ((Integer) userNameMaxLength).hashCode();
      result = prime * result
         + ((Integer) userRoleMaxLength).hashCode();
      result = prime * result
         + ((Integer) userStatusMaxLength).hashCode();
      result = prime * result
         + ((Integer) paymentStatusMaxLength).hashCode();
      result = prime * result
         + ((String) sessionId).hashCode();
      return result;
   }

   /**
    * The equals method checks for equality. 
    */
   public boolean equals(Object obj) {
      if (obj == this) return true;
      if (obj == null) return false;
      if (getClass() != obj.getClass()) return false;

      ConfigurationConstants configurationConstants = (ConfigurationConstants) obj;
      if (configurationConstants.getConfigurationConstantNameMaxLength() != this.getConfigurationConstantNameMaxLength()) {
         return false;
      }

      if (configurationConstants.getFirstNameMaxLength() != this.getFirstNameMaxLength()) {
         return false;
      }

      if (configurationConstants.getLastNameMaxLength() != this.getLastNameMaxLength()) {
         return false;
      }

      if (configurationConstants.getMiddleNameMaxLength() != this.getMiddleNameMaxLength()) {
         return false;
      }

      if (configurationConstants.getMetaModelNameMaxLength() != this.getMetaModelNameMaxLength()) {
         return false;
      }

      if (configurationConstants.getMetaModelDescriptionMaxLength() != this.getMetaModelDescriptionMaxLength()) {
         return false;
      }

      if (configurationConstants.getMetaModelOwnerMaxLength() != this.getMetaModelOwnerMaxLength()) {
         return false;
      }

      if (configurationConstants.getOrgDisplayNameMaxLength() != this.getOrgDisplayNameMaxLength()) {
         return false;
      }

      if (configurationConstants.getPasswordMaxLength() != this.getPasswordMaxLength()) {
         return false;
      }

      if (configurationConstants.getPasswordMinLength() != this.getPasswordMinLength()) {
         return false;
      }

      if (configurationConstants.getPathMaxLength() != this.getPathMaxLength()) {
         return false;
      }

      if (configurationConstants.getSubscriptionRequestMessageMaxLength() != this.getSubscriptionRequestMessageMaxLength()) {
         return false;
      }

      if (configurationConstants.getUserNameMaxLength() != this.getUserNameMaxLength()) {
         return false;
      }

      if (configurationConstants.getUserRoleMaxLength() != this.getUserRoleMaxLength()) {
         return false;
      }

      if (configurationConstants.getUserStatusMaxLength() != this.getUserStatusMaxLength()) {
         return false;
      }

      if (configurationConstants.getPaymentStatusMaxLength() != this.getPaymentStatusMaxLength()) {
         return false;
      }

      if (!configurationConstants.getSessionId().equals(this.getSessionId())) {
         return false;
      }

      return true;
   }
}
