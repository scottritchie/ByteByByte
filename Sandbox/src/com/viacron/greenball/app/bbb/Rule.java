/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateClassFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
/**
 * The Rule class is a SubType referenced by message objects defined
 * by the GreenballMessages grammar.
 */
public class Rule {
   private static final int ID = GreenballMessagesEnum.RULE.getId();

   /**
    * The number of bits required to represent the RuleEnum IDs.
    * # of attributes: 27
    * # of PEnumRefs: 1
    */
   private static final int ID_BITS = 5;

   private static GreenballMessagesDirectoryEntry[] theDirectory;
   private static final int DIRECTORY_OFFSET = 18;

   private static Logger log4j = Logger.getLogger(Rule.class);

   // Entered buildClassEnum()
   private enum RuleEnum {
      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SCOPE_PATHS(0, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      TEST_PATHS(1, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      DEADLINE_PATHS(2, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      TEST_PATH_I_DS(3, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SCOPE_I_DS(4, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      TEST_I_DS(5, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      ORG_ID(6, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      NAME(7, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      ID(8, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      TEST_PATH_LABELS(9, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      TEST_PATH_IDS(10, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      DEADLINE_PATH_LABELS(11, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      DEADLINE_PATH_IDS(12, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SCOPE_PATH_LABELS(13, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SCOPE_PATH_IDS(14, -1, 0, true),

      // sizeInBits: 64
      DEADLINE_LONG(15, 0, 0, false),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      WARNING(16, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      TIME_PERIOD(17, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      EMAIL_ADDRESS(18, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SMS(19, -1, 0, true),

      // sizeInBits: 32
      EXPECTED_NODE_STATE(20, 64, 0, false),

      // sizeInBits: 8
      ENABLED(21, 96, 0, false),

      // sizeInBits: 8
      EMAIL_NOTIFICATION(22, 104, 0, false),

      // sizeInBits: 8
      SMS_NOTIFICATION(23, 112, 0, false),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      DEADLINE_ID(24, -1, 0, true),

      // sizeInBits: 8
      SAVE_WHEN_EXPIRED(25, 120, 0, false),

      // sizeInBits: 8
      EXPIRED(26, 128, 0, false),

      // sizeInBits: 3
      // sizeInBytes: 1
      STATE(27, 136, 0, false);

      private final int id;
      private final int offsetInBits;
      private int length;
      private boolean isDirectoryEntry;

      RuleEnum(int id, int offsetInBits, int length, boolean isDirectoryEntry) {
         this.id = id;
         this.offsetInBits = offsetInBits;
         this.length = length;
         this.isDirectoryEntry = isDirectoryEntry;
      }

      public int getId() {
         return this.id;
      }

      public int getOffsetInBits() {
         return this.offsetInBits;
      }

      public int getLength() {
         return this.length;
      }

      public void setLength(int length) {
         this.length = length;
      }
   } // Leaving buildClassEnum()

   /*
    * The instance variables.
    * See buildInstanceVariables() in JBitByBitGenerator.java.
    */
   private List<RulePath> scopePaths;
   private List<RulePath> testPaths;
   private List<RulePath> deadlinePaths;
   private List<String> testPathIDs;
   private List<ScopeIdType> scopeIDs;
   private List<String> testIDs;
   private String orgId;
   private String name;
   private String id;
   private String testPathLabels;
   private String testPathIds;
   private String deadlinePathLabels;
   private String deadlinePathIds;
   private String scopePathLabels;
   private String scopePathIds;
   private long deadlineLong;
   private String warning;
   private String timePeriod;
   private String emailAddress;
   private String sms;
   private int expectedNodeState;
   private boolean enabled;
   private boolean emailNotification;
   private boolean smsNotification;
   private String deadlineId;
   private boolean saveWhenExpired;
   private boolean expired;
   private RuleState state;


   private String theErrorMsg;

   /**
    * The Rule no-arg constructor.
    */
   public Rule() {}

   /**
    * The Rule constructor.
    * See buildParameterAnnotations() in JBitByBitGenerator.java.
    *
    * @param scopePaths The scopePaths message attribute.
    * @param testPaths The testPaths message attribute.
    * @param deadlinePaths The deadlinePaths message attribute.
    * @param testPathIDs The testPathIDs message attribute.
    * @param scopeIDs The scopeIDs message attribute.
    * @param testIDs The testIDs message attribute.
    * @param orgId The orgId message attribute.
    * @param name The name message attribute.
    * @param id The id message attribute.
    * @param testPathLabels The testPathLabels message attribute.
    * @param testPathIds The testPathIds message attribute.
    * @param deadlinePathLabels The deadlinePathLabels message attribute.
    * @param deadlinePathIds The deadlinePathIds message attribute.
    * @param scopePathLabels The scopePathLabels message attribute.
    * @param scopePathIds The scopePathIds message attribute.
    * @param deadlineLong The deadlineLong message attribute.
    * @param warning The warning message attribute.
    * @param timePeriod The timePeriod message attribute.
    * @param emailAddress The emailAddress message attribute.
    * @param sms The sms message attribute.
    * @param expectedNodeState The expectedNodeState message attribute.
    * @param enabled The enabled message attribute.
    * @param emailNotification The emailNotification message attribute.
    * @param smsNotification The smsNotification message attribute.
    * @param deadlineId The deadlineId message attribute.
    * @param saveWhenExpired The saveWhenExpired message attribute.
    * @param expired The expired message attribute.
    * @param state The RuleState message attribute.
    */
   public Rule(List<RulePath> scopePaths, List<RulePath> testPaths, List<RulePath> deadlinePaths,
               List<String> testPathIDs, List<ScopeIdType> scopeIDs,
               List<String> testIDs,
               String orgId,
               String name,
               String id,
               String testPathLabels,
               String testPathIds,
               String deadlinePathLabels,
               String deadlinePathIds,
               String scopePathLabels,
               String scopePathIds,
               Long deadlineLong,
               String warning,
               String timePeriod,
               String emailAddress,
               String sms,
               Integer expectedNodeState,
               Boolean enabled,
               Boolean emailNotification,
               Boolean smsNotification,
               String deadlineId,
               Boolean saveWhenExpired,
               Boolean expired, RuleState state) {
      // Entered buildParameterAssignments()
      this.setScopePaths(scopePaths);
      this.setTestPaths(testPaths);
      this.setDeadlinePaths(deadlinePaths);
      this.setTestPathIDs(testPathIDs);
      this.setScopeIDs(scopeIDs);
      this.setTestIDs(testIDs);
      this.setOrgId(orgId);
      this.setName(name);
      this.setId(id);
      this.setTestPathLabels(testPathLabels);
      this.setTestPathIds(testPathIds);
      this.setDeadlinePathLabels(deadlinePathLabels);
      this.setDeadlinePathIds(deadlinePathIds);
      this.setScopePathLabels(scopePathLabels);
      this.setScopePathIds(scopePathIds);
      this.setDeadlineLong(deadlineLong);
      this.setWarning(warning);
      this.setTimePeriod(timePeriod);
      this.setEmailAddress(emailAddress);
      this.setSms(sms);
      this.setExpectedNodeState(expectedNodeState);
      this.setEnabled(enabled);
      this.setEmailNotification(emailNotification);
      this.setSmsNotification(smsNotification);
      this.setDeadlineId(deadlineId);
      this.setSaveWhenExpired(saveWhenExpired);
      this.setExpired(expired);
      this.setState(state);
      // Leaving buildParameterAssignments()
   }

   /**
    * The Rule copy constructor.
    */
   public Rule(Rule rule) {
      // Entered buildCopyConstructorParameterAssignments()
      for(RulePath tmpRulePath : rule.getScopePaths()) {
         this.getScopePaths().add(new RulePath(tmpRulePath));
      }
      for(RulePath tmpRulePath : rule.getTestPaths()) {
         this.getTestPaths().add(new RulePath(tmpRulePath));
      }
      for(RulePath tmpRulePath : rule.getDeadlinePaths()) {
         this.getDeadlinePaths().add(new RulePath(tmpRulePath));
      }
      this.setTestPathIDs(rule.getTestPathIDs());
      for(ScopeIdType tmpScopeIdType : rule.getScopeIDs()) {
         this.getScopeIDs().add(new ScopeIdType(tmpScopeIdType));
      }
      this.setTestIDs(rule.getTestIDs());
      this.setOrgId(rule.getOrgId());
      this.setName(rule.getName());
      this.setId(rule.getId());
      this.setTestPathLabels(rule.getTestPathLabels());
      this.setTestPathIds(rule.getTestPathIds());
      this.setDeadlinePathLabels(rule.getDeadlinePathLabels());
      this.setDeadlinePathIds(rule.getDeadlinePathIds());
      this.setScopePathLabels(rule.getScopePathLabels());
      this.setScopePathIds(rule.getScopePathIds());
      this.setDeadlineLong(rule.getDeadlineLong());
      this.setWarning(rule.getWarning());
      this.setTimePeriod(rule.getTimePeriod());
      this.setEmailAddress(rule.getEmailAddress());
      this.setSms(rule.getSms());
      this.setExpectedNodeState(rule.getExpectedNodeState());
      this.setEnabled(rule.getEnabled());
      this.setEmailNotification(rule.getEmailNotification());
      this.setSmsNotification(rule.getSmsNotification());
      this.setDeadlineId(rule.getDeadlineId());
      this.setSaveWhenExpired(rule.getSaveWhenExpired());
      this.setExpired(rule.getExpired());
      this.setState(rule.getState());
      // Leaving buildCopyConstructorParameterAssignments()
   }

   // Entered buildSetErrorMsgMethod()
   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }
   // Leaving buildSetErrorMsgMethod()

   // Entered buildGetErrorMsgMethod()
   /**
    * This method returns the error message or null if no error
    * occurred.
    */
   public String getErrorMsg() {
      return theErrorMsg;
   }
   // Leaving buildGetErrorMsgMethod()

   // Entered buildPackMethod()
   /**
    * This method packs a Rule object into a byte array. If a required attribute is not
    * provided an exception will be thrown.
    *
    * @return A byte array which represents a Rule message object.
    * @throws MissingAttributeException
    */
   public byte[] pack() throws MissingAttributeException {
      final String METHOD = "pack()";
      log4j.debug("Entered " + METHOD);

      int byteArraySize = getRuleSize();
      log4j.debug("byteArraySize: " + byteArraySize);
      byte[] bb = new byte[byteArraySize];

      /*
       * Convert object to byte array.
       */
      int offset = 0;

      if (this.getDeadlineLong() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "deadlineLong", offset));
         bb = GreenballMessagesUtility.insertLong(bb, offset, this.getDeadlineLong());
         offset += 8;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"deadlineLong\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getExpectedNodeState() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "expectedNodeState", offset));
         bb = GreenballMessagesUtility.insertInteger(bb, offset, this.getExpectedNodeState());
         offset += 4;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"expectedNodeState\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getEnabled() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "enabled", offset));
         bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 1, this.getEnabled() == true ? 1 : 0);
         offset += 1;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"enabled\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getEmailNotification() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "emailNotification", offset));
         bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 1, this.getEmailNotification() == true ? 1 : 0);
         offset += 1;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"emailNotification\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getSmsNotification() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "smsNotification", offset));
         bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 1, this.getSmsNotification() == true ? 1 : 0);
         offset += 1;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"smsNotification\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getSaveWhenExpired() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "saveWhenExpired", offset));
         bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 1, this.getSaveWhenExpired() == true ? 1 : 0);
         offset += 1;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"saveWhenExpired\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (this.getExpired() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "expired", offset));
         bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 1, this.getExpired() == true ? 1 : 0);
         offset += 1;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"expired\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      log4j.debug(String.format("inserting %s at offset %d", "state", offset));
      bb = GreenballMessagesUtility.insertByte(bb, offset, (byte) this.getState().getId());
      offset += 1;

      RuleEnum.SCOPE_PATHS.setLength(this.getScopePaths().size());
      RuleEnum.TEST_PATHS.setLength(this.getTestPaths().size());
      RuleEnum.DEADLINE_PATHS.setLength(this.getDeadlinePaths().size());
      RuleEnum.TEST_PATH_I_DS.setLength(this.getTestPathIDs() != null ? this.getTestPathIDs().size() : 0);
      RuleEnum.SCOPE_I_DS.setLength(this.getScopeIDs().size());
      RuleEnum.TEST_I_DS.setLength(this.getTestIDs() != null ? this.getTestIDs().size() : 0);
      RuleEnum.ORG_ID.setLength(this.getOrgId() != null ? this.getOrgId().length() : 0);
      RuleEnum.NAME.setLength(this.getName() != null ? this.getName().length() : 0);
      RuleEnum.ID.setLength(this.getId() != null ? this.getId().length() : 0);
      RuleEnum.TEST_PATH_LABELS.setLength(this.getTestPathLabels() != null ? this.getTestPathLabels().length() : 0);
      RuleEnum.TEST_PATH_IDS.setLength(this.getTestPathIds() != null ? this.getTestPathIds().length() : 0);
      RuleEnum.DEADLINE_PATH_LABELS.setLength(this.getDeadlinePathLabels() != null ? this.getDeadlinePathLabels().length() : 0);
      RuleEnum.DEADLINE_PATH_IDS.setLength(this.getDeadlinePathIds() != null ? this.getDeadlinePathIds().length() : 0);
      RuleEnum.SCOPE_PATH_LABELS.setLength(this.getScopePathLabels() != null ? this.getScopePathLabels().length() : 0);
      RuleEnum.SCOPE_PATH_IDS.setLength(this.getScopePathIds() != null ? this.getScopePathIds().length() : 0);
      RuleEnum.WARNING.setLength(this.getWarning() != null ? this.getWarning().length() : 0);
      RuleEnum.TIME_PERIOD.setLength(this.getTimePeriod() != null ? this.getTimePeriod().length() : 0);
      RuleEnum.EMAIL_ADDRESS.setLength(this.getEmailAddress() != null ? this.getEmailAddress().length() : 0);
      RuleEnum.SMS.setLength(this.getSms() != null ? this.getSms().length() : 0);
      RuleEnum.DEADLINE_ID.setLength(this.getDeadlineId() != null ? this.getDeadlineId().length() : 0);

      int directorySize = getRuleDirectorySize();
      if (directorySize != 0) {
         // Create the directory
         theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
         for (int i = 0; i < directorySize; i++) {
            theDirectory[i] = new GreenballMessagesDirectoryEntry();
         }

         // Fill the directory
         int index = 0;
         offset = DIRECTORY_OFFSET
               + GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES
               * theDirectory.length;

         for (RuleEnum ruleEnum : RuleEnum.values()) {
            if (ruleEnum.isDirectoryEntry == true) {
               int id = ruleEnum.getId();
               int length = ruleEnum.getLength();

               theDirectory[index].setId(id);
               theDirectory[index].setLength(length);
               theDirectory[index].setOffset(offset);

               // Insert the data
               if (id == RuleEnum.SCOPE_PATHS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "scopePaths", offset));
                  for (RulePath rulePath : this.scopePaths) {
                     byte[] bytes = rulePath.pack();
                     bb = GreenballMessagesUtility.insertBytes(bb, offset, bytes);

                     theDirectory[index].setId(id);
                     theDirectory[index].setLength(bytes.length);
                     theDirectory[index].setOffset(offset);

                     offset += bytes.length;
                     index++;
                  }
               }
               else if (id == RuleEnum.TEST_PATHS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "testPaths", offset));
                  for (RulePath rulePath : this.testPaths) {
                     byte[] bytes = rulePath.pack();
                     bb = GreenballMessagesUtility.insertBytes(bb, offset, bytes);

                     theDirectory[index].setId(id);
                     theDirectory[index].setLength(bytes.length);
                     theDirectory[index].setOffset(offset);

                     offset += bytes.length;
                     index++;
                  }
               }
               else if (id == RuleEnum.DEADLINE_PATHS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "deadlinePaths", offset));
                  for (RulePath rulePath : this.deadlinePaths) {
                     byte[] bytes = rulePath.pack();
                     bb = GreenballMessagesUtility.insertBytes(bb, offset, bytes);

                     theDirectory[index].setId(id);
                     theDirectory[index].setLength(bytes.length);
                     theDirectory[index].setOffset(offset);

                     offset += bytes.length;
                     index++;
                  }
               }
               else if (id == RuleEnum.TEST_PATH_I_DS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "testPathIDs", offset));
                  for (String s : getTestPathIDs()) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, s);
                     int strLen = s.getBytes(Charset
                           .forName("UTF-8")).length;

                     theDirectory[index].setId(id);
                     theDirectory[index].setLength(strLen);
                     theDirectory[index].setOffset(offset);

                     offset += strLen;
                     index++;
                  }
                  index--;
               }
               else if (id == RuleEnum.SCOPE_I_DS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "scopeIDs", offset));
                  for (ScopeIdType scopeIdType : this.scopeIDs) {
                     byte[] bytes = scopeIdType.pack();
                     bb = GreenballMessagesUtility.insertBytes(bb, offset, bytes);

                     theDirectory[index].setId(id);
                     theDirectory[index].setLength(bytes.length);
                     theDirectory[index].setOffset(offset);

                     offset += bytes.length;
                     index++;
                  }
               }
               else if (id == RuleEnum.TEST_I_DS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "testIDs", offset));
                  for (String s : getTestIDs()) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, s);
                     int strLen = s.getBytes(Charset
                           .forName("UTF-8")).length;

                     theDirectory[index].setId(id);
                     theDirectory[index].setLength(strLen);
                     theDirectory[index].setOffset(offset);

                     offset += strLen;
                     index++;
                  }
                  index--;
               }
               else if (id == RuleEnum.ORG_ID.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "orgId", offset));
                  if (getOrgId() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getOrgId());
                     offset += length * 1;
                  }
               }
               else if (id == RuleEnum.NAME.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "name", offset));
                  if (getName() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getName());
                     offset += length * 1;
                  }
               }
               else if (id == RuleEnum.ID.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "id", offset));
                  if (getId() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getId());
                     offset += length * 1;
                  }
               }
               else if (id == RuleEnum.TEST_PATH_LABELS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "testPathLabels", offset));
                  if (getTestPathLabels() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getTestPathLabels());
                     offset += length * 1;
                  }
               }
               else if (id == RuleEnum.TEST_PATH_IDS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "testPathIds", offset));
                  if (getTestPathIds() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getTestPathIds());
                     offset += length * 1;
                  }
               }
               else if (id == RuleEnum.DEADLINE_PATH_LABELS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "deadlinePathLabels", offset));
                  if (getDeadlinePathLabels() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getDeadlinePathLabels());
                     offset += length * 1;
                  }
               }
               else if (id == RuleEnum.DEADLINE_PATH_IDS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "deadlinePathIds", offset));
                  if (getDeadlinePathIds() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getDeadlinePathIds());
                     offset += length * 1;
                  }
               }
               else if (id == RuleEnum.SCOPE_PATH_LABELS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "scopePathLabels", offset));
                  if (getScopePathLabels() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getScopePathLabels());
                     offset += length * 1;
                  }
               }
               else if (id == RuleEnum.SCOPE_PATH_IDS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "scopePathIds", offset));
                  if (getScopePathIds() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getScopePathIds());
                     offset += length * 1;
                  }
               }
               else if (id == RuleEnum.WARNING.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "warning", offset));
                  if (getWarning() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getWarning());
                     offset += length * 1;
                  }
               }
               else if (id == RuleEnum.TIME_PERIOD.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "timePeriod", offset));
                  if (getTimePeriod() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getTimePeriod());
                     offset += length * 1;
                  }
               }
               else if (id == RuleEnum.EMAIL_ADDRESS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "emailAddress", offset));
                  if (getEmailAddress() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getEmailAddress());
                     offset += length * 1;
                  }
               }
               else if (id == RuleEnum.SMS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "sms", offset));
                  if (getSms() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getSms());
                     offset += length * 1;
                  }
               }
               else if (id == RuleEnum.DEADLINE_ID.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "deadlineId", offset));
                  if (getDeadlineId() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getDeadlineId());
                     offset += length * 1;
                  }
               }
               index++;
            }
         }

         // Insert the directory
         log4j.debug(String.format("inserting the directory at offset %d", DIRECTORY_OFFSET));
         offset = DIRECTORY_OFFSET;
         index = 0;
         for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
            log4j.debug(String.format("index[%d]: ", index));
            log4j.debug(String.format("  ID:     %d", directoryEntry.getId()));
            log4j.debug(String.format("  length: %d", directoryEntry.getLength()));
            log4j.debug(String.format("  offset: %d", directoryEntry.getOffset()));
            bb = GreenballMessagesUtility.insertInteger(bb, offset, directoryEntry.getId());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 4, directoryEntry.getLength());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 8, directoryEntry.getOffset());

            offset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
            index++;
         }

      }
      log4j.debug("Leaving " + METHOD);
      return bb;
   }
   // Leaving buildPackMethod()

   // Entered buildUnpackMethod()
   /**
    * This method unpacks a byte array containing a Rule object.
    *
    * @return The byte array as a Rule message object.
    */
   public Rule unpack(byte[] ba) {
      final String METHOD = "unpack()";
      log4j.debug("Entered " + METHOD);

      Rule rule = new Rule();

      rule.setDeadlineLong(GreenballMessagesUtility.getLong(ba, RuleEnum.DEADLINE_LONG.getOffsetInBits()));
      rule.setExpectedNodeState(GreenballMessagesUtility.getInteger(ba, RuleEnum.EXPECTED_NODE_STATE.getOffsetInBits()));
      rule.setEnabled(GreenballMessagesUtility.getBoolean(ba, RuleEnum.ENABLED.getOffsetInBits()));
      rule.setEmailNotification(GreenballMessagesUtility.getBoolean(ba, RuleEnum.EMAIL_NOTIFICATION.getOffsetInBits()));
      rule.setSmsNotification(GreenballMessagesUtility.getBoolean(ba, RuleEnum.SMS_NOTIFICATION.getOffsetInBits()));
      rule.setSaveWhenExpired(GreenballMessagesUtility.getBoolean(ba, RuleEnum.SAVE_WHEN_EXPIRED.getOffsetInBits()));
      rule.setExpired(GreenballMessagesUtility.getBoolean(ba, RuleEnum.EXPIRED.getOffsetInBits()));
      rule.setState(RuleState.toEnum(GreenballMessagesUtility.getByte(ba, RuleEnum.STATE.getOffsetInBits())));

      // Get the directory
      int directorySize = getRuleDirectorySize();
      theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
      int dirOffset = DIRECTORY_OFFSET;

      for (int entry = 0 ; entry < directorySize; entry++) {
         GreenballMessagesDirectoryEntry directoryEntry = new GreenballMessagesDirectoryEntry();

         int id = GreenballMessagesUtility.getInteger(ba, dirOffset * 8);
         directoryEntry.setId(id);
         int length = GreenballMessagesUtility.getInteger(ba, (dirOffset + 4) * 8);
         directoryEntry.setLength(length);
         int offset = GreenballMessagesUtility.getInteger(ba, (dirOffset + 8) * 8);
         directoryEntry.setOffset(offset);

         theDirectory[entry] = directoryEntry;

         dirOffset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      }

      for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
         int id = directoryEntry.getId();
         int offset = directoryEntry.getOffset();
         int length = directoryEntry.getLength();

         if (id == RuleEnum.TEST_PATH_I_DS.getId()) {
            String s = GreenballMessagesUtility.getString(ba, offset, length);
            rule.getTestPathIDs().add(s);
         }
         else if (id == RuleEnum.TEST_I_DS.getId()) {
            String s = GreenballMessagesUtility.getString(ba, offset, length);
            rule.getTestIDs().add(s);
         }
         else if (id == RuleEnum.ORG_ID.getId()) {
            rule.setOrgId(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == RuleEnum.NAME.getId()) {
            rule.setName(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == RuleEnum.ID.getId()) {
            rule.setId(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == RuleEnum.TEST_PATH_LABELS.getId()) {
            rule.setTestPathLabels(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == RuleEnum.TEST_PATH_IDS.getId()) {
            rule.setTestPathIds(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == RuleEnum.DEADLINE_PATH_LABELS.getId()) {
            rule.setDeadlinePathLabels(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == RuleEnum.DEADLINE_PATH_IDS.getId()) {
            rule.setDeadlinePathIds(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == RuleEnum.SCOPE_PATH_LABELS.getId()) {
            rule.setScopePathLabels(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == RuleEnum.SCOPE_PATH_IDS.getId()) {
            rule.setScopePathIds(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == RuleEnum.WARNING.getId()) {
            rule.setWarning(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == RuleEnum.TIME_PERIOD.getId()) {
            rule.setTimePeriod(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == RuleEnum.EMAIL_ADDRESS.getId()) {
            rule.setEmailAddress(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == RuleEnum.SMS.getId()) {
            rule.setSms(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == RuleEnum.DEADLINE_ID.getId()) {
            rule.setDeadlineId(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == RuleEnum.SCOPE_PATHS.getId()) {
            byte[] bytes = new byte[length];
            for (int index = 0; index < length; index++) {
               bytes[index] = GreenballMessagesUtility.getByte(ba, (offset + index) * 8);
            }
            rule.getScopePaths().add(new RulePath().unpack(bytes));
         }
         else if (id == RuleEnum.TEST_PATHS.getId()) {
            byte[] bytes = new byte[length];
            for (int index = 0; index < length; index++) {
               bytes[index] = GreenballMessagesUtility.getByte(ba, (offset + index) * 8);
            }
            rule.getTestPaths().add(new RulePath().unpack(bytes));
         }
         else if (id == RuleEnum.DEADLINE_PATHS.getId()) {
            byte[] bytes = new byte[length];
            for (int index = 0; index < length; index++) {
               bytes[index] = GreenballMessagesUtility.getByte(ba, (offset + index) * 8);
            }
            rule.getDeadlinePaths().add(new RulePath().unpack(bytes));
         }
         else if (id == RuleEnum.SCOPE_I_DS.getId()) {
            byte[] bytes = new byte[length];
            for (int index = 0; index < length; index++) {
               bytes[index] = GreenballMessagesUtility.getByte(ba, (offset + index) * 8);
            }
            rule.getScopeIDs().add(new ScopeIdType().unpack(bytes));
         }
      }

      log4j.debug("Leaving " + METHOD);
      return rule;
   }
   // Leaving buildUnpackMethod()

   /**
    * This method sets the testPathIDs attribute. Setting of this value is required.
    * @param testPathIDs The testPathIDs attribute.
    */
   public void setTestPathIDs(List<String> testPathIDs) {
      this.testPathIDs = testPathIDs;
   }

   /**
    * This method sets the testIDs attribute. Setting of this value is required.
    * @param testIDs The testIDs attribute.
    */
   public void setTestIDs(List<String> testIDs) {
      this.testIDs = testIDs;
   }

   /**
    * This method sets the orgId attribute. Setting of this value is required.
    * @param orgId The orgId attribute.
    */
   public void setOrgId(String orgId) {
      this.orgId = orgId;
   }

   /**
    * This method sets the name attribute. Setting of this value is required.
    * @param name The name attribute.
    */
   public void setName(String name) {
      this.name = name;
   }

   /**
    * This method sets the id attribute. Setting of this value is required.
    * @param id The id attribute.
    */
   public void setId(String id) {
      this.id = id;
   }

   /**
    * This method sets the testPathLabels attribute. Setting of this value is required.
    * @param testPathLabels The testPathLabels attribute.
    */
   public void setTestPathLabels(String testPathLabels) {
      this.testPathLabels = testPathLabels;
   }

   /**
    * This method sets the testPathIds attribute. Setting of this value is required.
    * @param testPathIds The testPathIds attribute.
    */
   public void setTestPathIds(String testPathIds) {
      this.testPathIds = testPathIds;
   }

   /**
    * This method sets the deadlinePathLabels attribute. Setting of this value is required.
    * @param deadlinePathLabels The deadlinePathLabels attribute.
    */
   public void setDeadlinePathLabels(String deadlinePathLabels) {
      this.deadlinePathLabels = deadlinePathLabels;
   }

   /**
    * This method sets the deadlinePathIds attribute. Setting of this value is required.
    * @param deadlinePathIds The deadlinePathIds attribute.
    */
   public void setDeadlinePathIds(String deadlinePathIds) {
      this.deadlinePathIds = deadlinePathIds;
   }

   /**
    * This method sets the scopePathLabels attribute. Setting of this value is required.
    * @param scopePathLabels The scopePathLabels attribute.
    */
   public void setScopePathLabels(String scopePathLabels) {
      this.scopePathLabels = scopePathLabels;
   }

   /**
    * This method sets the scopePathIds attribute. Setting of this value is required.
    * @param scopePathIds The scopePathIds attribute.
    */
   public void setScopePathIds(String scopePathIds) {
      this.scopePathIds = scopePathIds;
   }

   /**
    * This method sets the deadlineLong attribute. Setting of this value is required.
    * @param deadlineLong The deadlineLong attribute.
    */
   public void setDeadlineLong(Long deadlineLong) {
      this.deadlineLong = deadlineLong;
   }

   /**
    * This method sets the warning attribute. Setting of this value is required.
    * @param warning The warning attribute.
    */
   public void setWarning(String warning) {
      this.warning = warning;
   }

   /**
    * This method sets the timePeriod attribute. Setting of this value is required.
    * @param timePeriod The timePeriod attribute.
    */
   public void setTimePeriod(String timePeriod) {
      this.timePeriod = timePeriod;
   }

   /**
    * This method sets the emailAddress attribute. Setting of this value is optional.
    * @param emailAddress The emailAddress attribute.
    */
   public void setEmailAddress(String emailAddress) {
      this.emailAddress = emailAddress;
   }

   /**
    * This method sets the sms attribute. Setting of this value is optional.
    * @param sms The sms attribute.
    */
   public void setSms(String sms) {
      this.sms = sms;
   }

   /**
    * This method sets the expectedNodeState attribute. Setting of this value is required.
    * @param expectedNodeState The expectedNodeState attribute.
    */
   public void setExpectedNodeState(Integer expectedNodeState) {
      this.expectedNodeState = expectedNodeState;
   }

   /**
    * This method sets the enabled attribute. Setting of this value is required.
    * @param enabled The enabled attribute.
    */
   public void setEnabled(Boolean enabled) {
      this.enabled = enabled;
   }

   /**
    * This method sets the emailNotification attribute. Setting of this value is required.
    * @param emailNotification The emailNotification attribute.
    */
   public void setEmailNotification(Boolean emailNotification) {
      this.emailNotification = emailNotification;
   }

   /**
    * This method sets the smsNotification attribute. Setting of this value is required.
    * @param smsNotification The smsNotification attribute.
    */
   public void setSmsNotification(Boolean smsNotification) {
      this.smsNotification = smsNotification;
   }

   /**
    * This method sets the deadlineId attribute. Setting of this value is required.
    * @param deadlineId The deadlineId attribute.
    */
   public void setDeadlineId(String deadlineId) {
      this.deadlineId = deadlineId;
   }

   /**
    * This method sets the saveWhenExpired attribute. Setting of this value is required.
    * @param saveWhenExpired The saveWhenExpired attribute.
    */
   public void setSaveWhenExpired(Boolean saveWhenExpired) {
      this.saveWhenExpired = saveWhenExpired;
   }

   /**
    * This method sets the expired attribute. Setting of this value is required.
    * @param expired The expired attribute.
    */
   public void setExpired(Boolean expired) {
      this.expired = expired;
   }

   /**
    * This method gets the testPathIDs attribute. The testPathIDs attribute is a required attribute.
    */
   public List<String> getTestPathIDs() {
      if (this.testPathIDs == null) {
         this.testPathIDs = new ArrayList<String>();
      }
      return this.testPathIDs;
   }

   /**
    * This method gets the testIDs attribute. The testIDs attribute is a required attribute.
    */
   public List<String> getTestIDs() {
      if (this.testIDs == null) {
         this.testIDs = new ArrayList<String>();
      }
      return this.testIDs;
   }

   /**
    * This method gets the orgId attribute. The orgId attribute is a required attribute.
    */
   public String getOrgId() {
      return this.orgId;
   }

   /**
    * This method gets the name attribute. The name attribute is a required attribute.
    */
   public String getName() {
      return this.name;
   }

   /**
    * This method gets the id attribute. The id attribute is a required attribute.
    */
   public String getId() {
      return this.id;
   }

   /**
    * This method gets the testPathLabels attribute. The testPathLabels attribute is a required attribute.
    */
   public String getTestPathLabels() {
      return this.testPathLabels;
   }

   /**
    * This method gets the testPathIds attribute. The testPathIds attribute is a required attribute.
    */
   public String getTestPathIds() {
      return this.testPathIds;
   }

   /**
    * This method gets the deadlinePathLabels attribute. The deadlinePathLabels attribute is a required attribute.
    */
   public String getDeadlinePathLabels() {
      return this.deadlinePathLabels;
   }

   /**
    * This method gets the deadlinePathIds attribute. The deadlinePathIds attribute is a required attribute.
    */
   public String getDeadlinePathIds() {
      return this.deadlinePathIds;
   }

   /**
    * This method gets the scopePathLabels attribute. The scopePathLabels attribute is a required attribute.
    */
   public String getScopePathLabels() {
      return this.scopePathLabels;
   }

   /**
    * This method gets the scopePathIds attribute. The scopePathIds attribute is a required attribute.
    */
   public String getScopePathIds() {
      return this.scopePathIds;
   }

   /**
    * This method gets the deadlineLong attribute. The deadlineLong attribute is a required attribute.
    */
   public Long getDeadlineLong() {
      return this.deadlineLong;
   }

   /**
    * This method gets the warning attribute. The warning attribute is a required attribute.
    */
   public String getWarning() {
      return this.warning;
   }

   /**
    * This method gets the timePeriod attribute. The timePeriod attribute is a required attribute.
    */
   public String getTimePeriod() {
      return this.timePeriod;
   }

   /**
    * This method gets the emailAddress attribute. The emailAddress attribute is an optional attribute.
    */
   public String getEmailAddress() {
      return this.emailAddress;
   }

   /**
    * This method gets the sms attribute. The sms attribute is an optional attribute.
    */
   public String getSms() {
      return this.sms;
   }

   /**
    * This method gets the expectedNodeState attribute. The expectedNodeState attribute is a required attribute.
    */
   public Integer getExpectedNodeState() {
      return this.expectedNodeState;
   }

   /**
    * This method gets the enabled attribute. The enabled attribute is a required attribute.
    */
   public Boolean getEnabled() {
      return this.enabled;
   }

   /**
    * This method gets the emailNotification attribute. The emailNotification attribute is a required attribute.
    */
   public Boolean getEmailNotification() {
      return this.emailNotification;
   }

   /**
    * This method gets the smsNotification attribute. The smsNotification attribute is a required attribute.
    */
   public Boolean getSmsNotification() {
      return this.smsNotification;
   }

   /**
    * This method gets the deadlineId attribute. The deadlineId attribute is a required attribute.
    */
   public String getDeadlineId() {
      return this.deadlineId;
   }

   /**
    * This method gets the saveWhenExpired attribute. The saveWhenExpired attribute is a required attribute.
    */
   public Boolean getSaveWhenExpired() {
      return this.saveWhenExpired;
   }

   /**
    * This method gets the expired attribute. The expired attribute is a required attribute.
    */
   public Boolean getExpired() {
      return this.expired;
   }

   /**
    * This method sets the scopePaths attribute. Setting of this value is required.
    * @param scopePaths The scopePaths.
    */
   public void setScopePaths(List<RulePath> scopePaths) {
      this.scopePaths = scopePaths;
   }

   /**
    * This method sets the testPaths attribute. Setting of this value is required.
    * @param testPaths The testPaths.
    */
   public void setTestPaths(List<RulePath> testPaths) {
      this.testPaths = testPaths;
   }

   /**
    * This method sets the deadlinePaths attribute. Setting of this value is required.
    * @param deadlinePaths The deadlinePaths.
    */
   public void setDeadlinePaths(List<RulePath> deadlinePaths) {
      this.deadlinePaths = deadlinePaths;
   }

   /**
    * This method sets the scopeIDs attribute. Setting of this value is required.
    * @param scopeIDs The scopeIDs.
    */
   public void setScopeIDs(List<ScopeIdType> scopeIDs) {
      this.scopeIDs = scopeIDs;
   }

   /**
    * This method gets the scopePaths attribute. The scopePaths attribute is a required attribute.
    */
   public List<RulePath> getScopePaths() {
      if (this.scopePaths == null) {
         this.scopePaths = new ArrayList<RulePath>();
      }
      return this.scopePaths;
   }

   /**
    * This method gets the testPaths attribute. The testPaths attribute is a required attribute.
    */
   public List<RulePath> getTestPaths() {
      if (this.testPaths == null) {
         this.testPaths = new ArrayList<RulePath>();
      }
      return this.testPaths;
   }

   /**
    * This method gets the deadlinePaths attribute. The deadlinePaths attribute is a required attribute.
    */
   public List<RulePath> getDeadlinePaths() {
      if (this.deadlinePaths == null) {
         this.deadlinePaths = new ArrayList<RulePath>();
      }
      return this.deadlinePaths;
   }

   /**
    * This method gets the scopeIDs attribute. The scopeIDs attribute is a required attribute.
    */
   public List<ScopeIdType> getScopeIDs() {
      if (this.scopeIDs == null) {
         this.scopeIDs = new ArrayList<ScopeIdType>();
      }
      return this.scopeIDs;
   }

   /**
    * This method sets the state attribute. Setting of this value is required.
    * @param state The state.
    */
   public void setState(RuleState state) {
      this.state = state;
   }

   /**
    * This method gets the state attribute. The state attribute is a required attribute.
    * @return The state attribute.
    */
   public RuleState getState() {
      return this.state;
   }

   /**
    * This method gets the size of the directory.
    */
   private int getRuleDirectorySize() {
      int directorySize = 0;

      // scopePaths
      directorySize += getScopePaths().size();
      // testPaths
      directorySize += getTestPaths().size();
      // deadlinePaths
      directorySize += getDeadlinePaths().size();
      // testPathIDs
      directorySize += getTestPathIDs().size();
      // scopeIDs
      directorySize += getScopeIDs().size();
      // testIDs
      directorySize += getTestIDs().size();
      // orgId
      directorySize++;
      // name
      directorySize++;
      // id
      directorySize++;
      // testPathLabels
      directorySize++;
      // testPathIds
      directorySize++;
      // deadlinePathLabels
      directorySize++;
      // deadlinePathIds
      directorySize++;
      // scopePathLabels
      directorySize++;
      // scopePathIds
      directorySize++;
      // warning
      directorySize++;
      // timePeriod
      directorySize++;
      // emailAddress
      directorySize++;
      // sms
      directorySize++;
      // deadlineId
      directorySize++;

      return directorySize;
   }


   /**
    * This method gets the size of the Rule object.
    * @return The size in bytes.
    */
   public int getRuleSize() {
      int size = 0;

      int directorySize = getRuleDirectorySize();
      size += directorySize * GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      // Add size of testPathIDs
      for (String s : getTestPathIDs()) {
         size += s.getBytes(Charset.forName("UTF-8")).length;
      }
      // Add size of testIDs
      for (String s : getTestIDs()) {
         size += s.getBytes(Charset.forName("UTF-8")).length;
      }
      // Add size of orgId
      size += (getOrgId() != null ? getOrgId().length() : 0);
      // Add size of name
      size += (getName() != null ? getName().length() : 0);
      // Add size of id
      size += (getId() != null ? getId().length() : 0);
      // Add size of testPathLabels
      size += (getTestPathLabels() != null ? getTestPathLabels().length() : 0);
      // Add size of testPathIds
      size += (getTestPathIds() != null ? getTestPathIds().length() : 0);
      // Add size of deadlinePathLabels
      size += (getDeadlinePathLabels() != null ? getDeadlinePathLabels().length() : 0);
      // Add size of deadlinePathIds
      size += (getDeadlinePathIds() != null ? getDeadlinePathIds().length() : 0);
      // Add size of scopePathLabels
      size += (getScopePathLabels() != null ? getScopePathLabels().length() : 0);
      // Add size of scopePathIds
      size += (getScopePathIds() != null ? getScopePathIds().length() : 0);
      // Add size of deadlineLong
      size += 8;
      // Add size of warning
      size += (getWarning() != null ? getWarning().length() : 0);
      // Add size of timePeriod
      size += (getTimePeriod() != null ? getTimePeriod().length() : 0);
      // Add size of emailAddress
      size += (getEmailAddress() != null ? getEmailAddress().length() : 0);
      // Add size of sms
      size += (getSms() != null ? getSms().length() : 0);
      // Add size of expectedNodeState
      size += 4;
      // Add size of enabled
      size += 1;
      // Add size of emailNotification
      size += 1;
      // Add size of smsNotification
      size += 1;
      // Add size of deadlineId
      size += (getDeadlineId() != null ? getDeadlineId().length() : 0);
      // Add size of saveWhenExpired
      size += 1;
      // Add size of expired
      size += 1;
      // Add size of scopePaths
      for (RulePath rulePath: getScopePaths()) {
         size += rulePath.getRulePathSize();
      }
      // Add size of testPaths
      for (RulePath rulePath: getTestPaths()) {
         size += rulePath.getRulePathSize();
      }
      // Add size of deadlinePaths
      for (RulePath rulePath: getDeadlinePaths()) {
         size += rulePath.getRulePathSize();
      }
      // Add size of scopeIDs
      for (ScopeIdType scopeIdType: getScopeIDs()) {
         size += scopeIdType.getScopeIdTypeSize();
      }
      // Add size of state
      size += 1;

      return size;
   }

   @Override
   public String toString() {
      StringBuilder result = new StringBuilder();
      String NEW_LINE = System.getProperty("line.separator");

      result.append(this.getClass().getSimpleName() + " Object {" + NEW_LINE);

      if (scopePaths != null) {
         for (RulePath scopePathsRulePath : scopePaths) {
            result.append(scopePathsRulePath.toString());
         }
      }

      if (testPaths != null) {
         for (RulePath testPathsRulePath : testPaths) {
            result.append(testPathsRulePath.toString());
         }
      }

      if (deadlinePaths != null) {
         for (RulePath deadlinePathsRulePath : deadlinePaths) {
            result.append(deadlinePathsRulePath.toString());
         }
      }

      if (testPathIDs != null) {
         int i = 0;
         for (String testPathIDsString : testPathIDs) {
            result.append(" testPathIDs[" + i + "]: " + testPathIDsString.toString() + NEW_LINE);
            i++;
         }
      }

      if (scopeIDs != null) {
         for (ScopeIdType scopeIDsScopeIdType : scopeIDs) {
            result.append(scopeIDsScopeIdType.toString());
         }
      }

      if (testIDs != null) {
         int i = 0;
         for (String testIDsString : testIDs) {
            result.append(" testIDs[" + i + "]: " + testIDsString.toString() + NEW_LINE);
            i++;
         }
      }
      result.append(" orgId: " + orgId + NEW_LINE);
      result.append(" name: " + name + NEW_LINE);
      result.append(" id: " + id + NEW_LINE);
      result.append(" testPathLabels: " + testPathLabels + NEW_LINE);
      result.append(" testPathIds: " + testPathIds + NEW_LINE);
      result.append(" deadlinePathLabels: " + deadlinePathLabels + NEW_LINE);
      result.append(" deadlinePathIds: " + deadlinePathIds + NEW_LINE);
      result.append(" scopePathLabels: " + scopePathLabels + NEW_LINE);
      result.append(" scopePathIds: " + scopePathIds + NEW_LINE);
      result.append(" deadlineLong: " + deadlineLong + NEW_LINE);
      result.append(" warning: " + warning + NEW_LINE);
      result.append(" timePeriod: " + timePeriod + NEW_LINE);
      result.append(" emailAddress: " + emailAddress + NEW_LINE);
      result.append(" sms: " + sms + NEW_LINE);
      result.append(" expectedNodeState: " + expectedNodeState + NEW_LINE);
      result.append(" enabled: " + enabled + NEW_LINE);
      result.append(" emailNotification: " + emailNotification + NEW_LINE);
      result.append(" smsNotification: " + smsNotification + NEW_LINE);
      result.append(" deadlineId: " + deadlineId + NEW_LINE);
      result.append(" saveWhenExpired: " + saveWhenExpired + NEW_LINE);
      result.append(" expired: " + expired + NEW_LINE);

      result.append(" state: " + state + NEW_LINE);
      result.append("} ");

      return result.toString();
   }

   /**
    * The hashCode method returns this object's hashCode.
    */
   @Override
   public int hashCode() {
      final int prime = 31;
      int result = 1;
      for (String s : testPathIDs) {
         result = prime * result + s.hashCode();
      }
      for (String s : testIDs) {
         result = prime * result + s.hashCode();
      }
      result = prime * result
         + ((String) orgId).hashCode();
      result = prime * result
         + ((String) name).hashCode();
      result = prime * result
         + ((String) id).hashCode();
      result = prime * result
         + ((String) testPathLabels).hashCode();
      result = prime * result
         + ((String) testPathIds).hashCode();
      result = prime * result
         + ((String) deadlinePathLabels).hashCode();
      result = prime * result
         + ((String) deadlinePathIds).hashCode();
      result = prime * result
         + ((String) scopePathLabels).hashCode();
      result = prime * result
         + ((String) scopePathIds).hashCode();
      result = prime * result
         + ((Long) deadlineLong).hashCode();
      result = prime * result
         + ((String) warning).hashCode();
      result = prime * result
         + ((String) timePeriod).hashCode();
      result = prime * result
         + ((String) emailAddress).hashCode();
      result = prime * result
         + ((String) sms).hashCode();
      result = prime * result
         + ((Integer) expectedNodeState).hashCode();
      result = prime * result
         + ((Boolean) enabled).hashCode();
      result = prime * result
         + ((Boolean) emailNotification).hashCode();
      result = prime * result
         + ((Boolean) smsNotification).hashCode();
      result = prime * result
         + ((String) deadlineId).hashCode();
      result = prime * result
         + ((Boolean) saveWhenExpired).hashCode();
      result = prime * result
         + ((Boolean) expired).hashCode();
      return result;
   }

   /**
    * The equals method checks for equality. 
    */
   public boolean equals(Object obj) {
      if (obj == this) return true;
      if (obj == null) return false;
      if (getClass() != obj.getClass()) return false;

      Rule rule = (Rule) obj;
      if (!rule.getTestPathIDs().equals(this.getTestPathIDs())) {
         return false;
      }

      if (!rule.getTestIDs().equals(this.getTestIDs())) {
         return false;
      }

      if (!rule.getOrgId().equals(this.getOrgId())) {
         return false;
      }

      if (!rule.getName().equals(this.getName())) {
         return false;
      }

      if (!rule.getId().equals(this.getId())) {
         return false;
      }

      if (!rule.getTestPathLabels().equals(this.getTestPathLabels())) {
         return false;
      }

      if (!rule.getTestPathIds().equals(this.getTestPathIds())) {
         return false;
      }

      if (!rule.getDeadlinePathLabels().equals(this.getDeadlinePathLabels())) {
         return false;
      }

      if (!rule.getDeadlinePathIds().equals(this.getDeadlinePathIds())) {
         return false;
      }

      if (!rule.getScopePathLabels().equals(this.getScopePathLabels())) {
         return false;
      }

      if (!rule.getScopePathIds().equals(this.getScopePathIds())) {
         return false;
      }

      if (rule.getDeadlineLong() != this.getDeadlineLong()) {
         return false;
      }

      if (!rule.getWarning().equals(this.getWarning())) {
         return false;
      }

      if (!rule.getTimePeriod().equals(this.getTimePeriod())) {
         return false;
      }

      if (rule.getEmailAddress() == null && this.getEmailAddress() != null) {
         return false;
      }
      else if (rule.getEmailAddress() != null && this.getEmailAddress() == null) {
         return false;
      }
      else if (rule.getEmailAddress() != null && 
      !rule.getEmailAddress().equals(this.getEmailAddress())) {
         return false;
      }

      if (rule.getSms() == null && this.getSms() != null) {
         return false;
      }
      else if (rule.getSms() != null && this.getSms() == null) {
         return false;
      }
      else if (rule.getSms() != null && 
      !rule.getSms().equals(this.getSms())) {
         return false;
      }

      if (rule.getExpectedNodeState() != this.getExpectedNodeState()) {
         return false;
      }

      if (rule.getEnabled() != this.getEnabled()) {
         return false;
      }

      if (rule.getEmailNotification() != this.getEmailNotification()) {
         return false;
      }

      if (rule.getSmsNotification() != this.getSmsNotification()) {
         return false;
      }

      if (!rule.getDeadlineId().equals(this.getDeadlineId())) {
         return false;
      }

      if (rule.getSaveWhenExpired() != this.getSaveWhenExpired()) {
         return false;
      }

      if (rule.getExpired() != this.getExpired()) {
         return false;
      }

      if (rule.getState() != this.getState()) {
         return false;
      }

      return true;
   }
}
