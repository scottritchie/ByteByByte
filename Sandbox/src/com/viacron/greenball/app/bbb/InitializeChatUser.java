/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateInitializationFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializeChatUser class initializes the element object with the ChatUser object.
 *
 */
public class InitializeChatUser {
   private static Logger log4j = Logger.getLogger(InitializeChatUser.class);
   private String theErrorMsg;
   private Element element;
   private ChatUser chatUser;

   /**
    * The InitializeChatUser class initializes the element object with the ChatUser object.
    *
    * @param chatUser The object which will be used to initialize the element object.
    */
   public InitializeChatUser(ChatUser chatUser) {
      this.chatUser = chatUser;

      this.element = new Element("ChatUser");
   }

   /**
    * This method initializes the element.
    */
   public Element initialize() throws MissingAttributeException {
      final String METHOD = "initialize()";
      log4j.debug("Entered " + METHOD);

      log4j.debug("element.getName(): ChatUser");

      if (chatUser.getAvailable() != null) {
         AbstractAttribute abstractAttribute = initializeAvailable(chatUser.getAvailable());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"available\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chatUser.getTimestamp() != null) {
         AbstractAttribute abstractAttribute = initializeTimestamp(chatUser.getTimestamp());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"timestamp\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      if (chatUser.getOrg() != null) {
         AbstractAttribute abstractAttribute = initializeOrg(chatUser.getOrg());
         element.getAbstractAttributes().add(abstractAttribute);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"org\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }
      if (chatUser.getAction() != null) {
         AbstractAttribute abstractAttribute = initializeAction(chatUser.getAction());
         element.getAbstractAttributes().add(abstractAttribute);
      }      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"action\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }


      log4j.debug("Leaving " + METHOD);
      return element;
   }

   /*
    * This method initializes the available attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeAvailable(Boolean available)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (available != null) {
         log4j.debug("Creating new KeyValuePair: available");
         KeyValuePair kvp = new KeyValuePair("available", available.toString());
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"available\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the timestamp attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeTimestamp(Long timestamp)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      // Entered initAttributeValue()
      if (timestamp != null) {
         log4j.debug("Creating new KeyValuePair: timestamp");
         KeyValuePair kvp = new KeyValuePair("timestamp", Long.toString(timestamp));
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"timestamp\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }

      // Leaving initAttributeValue()
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   /*
    * This method initializes the org attribute.
    * Generated by initAttributeMethods()
    */
   private AbstractAttribute initializeOrg(List<String> orgList)
           throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initAbstractAttributeValue()
      int orgIndex = 0;
      for (String org : orgList) {
         // Entered initAttributeValue()
         if (org != null) {
            log4j.debug("Creating new KeyValuePair: org[" + orgIndex + "]");
            KeyValuePair kvp = new KeyValuePair("org[" + orgIndex + "]", "<STRING_BEGIN>" + org + "<STRING_END>");
            abstractAttribute.getKeyValuePairs().add(kvp);
         }
         else {
            // Missing required attribute, generate an error message and throw an exception
            setErrorMsg("Error packing object. The attribute \"org\" is required, but no value was provided.");
            log4j.error(getErrorMsg());
            throw new MissingAttributeException(getErrorMsg());
         }

         // Leaving initAttributeValue()
         orgIndex++;
      }
      // Leaving initAbstractAttributeValue()
      return abstractAttribute;
   }

   private AbstractAttribute initializeAction(ChatAction action)
         throws MissingAttributeException {
      AbstractAttribute abstractAttribute = new AbstractAttribute();
      // Entered initPEnumRefValue()
      if (action != null) {
         log4j.debug("Creating new Key/Value pair: action");
         KeyValuePair kvp = new KeyValuePair("action", "<ENUM_BEGIN>" + action + "<ENUM_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }
      else {
         // Missing required attribute, generate an error message and throw an exception
         setErrorMsg("Error packing object. The attribute \"action\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }
      // Leaving initPEnumRefValue()
      return abstractAttribute;
   }

   /**
   * This method returns the error message or null if no error occurred.
   */
   public String getErrorMsg() {
      return theErrorMsg;
   }

   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }

}
