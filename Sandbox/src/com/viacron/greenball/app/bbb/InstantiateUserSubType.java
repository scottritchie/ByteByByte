/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInstantiationFile()).
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

public class InstantiateUserSubType {
private static Logger log4j = Logger.getLogger(InstantiateUserSubType.class);

private Element element;
private UserSubType userSubType;

/*
 * The isUpdated flags. If an attribute is required by the grammar then a value
 * must be provided, and the isUpdated flag will be set when the value is
 * obtained during unpacking. After the object is constructed during unpacking, 
 * validation will be performed to make sure a value was provided for all attributes
 * that are not optional. 
 * See buildFlags() in JBitByBitGenerator.java.
 */
private boolean isFirstNameUpdated = false;
private boolean isLastNameUpdated = false;
private boolean isUserNameUpdated = false;

/**
 * This method constructs a InstantiateUserSubType object based on an Element
 * object.
 * 
 * @param element
 *            The Element.
 */
public InstantiateUserSubType(Element element) {
this.element = element;
this.userSubType = new UserSubType();
}

/**
 * The instantiate method instantiates a UserSubType object.
 * 
 * @return The UserSubType.
 */
protected UserSubType instantiate() {
final String METHOD = "instantiate()";
log4j.debug("Entered " + METHOD);

log4j.debug("element: " + element.getName());

for (AbstractAttribute abstractAttribute : element.getAbstractAttributes()) {
      // Entered instantiateSubTypeElements()
   // Leaving instantiateSubTypeElements()


   for (KeyValuePair kvp : abstractAttribute.getKeyValuePairs()) {
         // Entered instantiateSubTypeAttributes()
   if (kvp.getKey().equals("firstName")) {
    this.isFirstNameUpdated = true;
   log4j.debug("setting value of \"firstName\" to: " + kvp.getValue());
   userSubType.setFirstName(kvp.getValue());
   }
   else if (kvp.getKey().equals("middleName")) {
   log4j.debug("setting value of \"middleName\" to: " + kvp.getValue());
   userSubType.setMiddleName(kvp.getValue());
   }
   else if (kvp.getKey().equals("lastName")) {
    this.isLastNameUpdated = true;
   log4j.debug("setting value of \"lastName\" to: " + kvp.getValue());
   userSubType.setLastName(kvp.getValue());
   }
   else if (kvp.getKey().equals("userName")) {
    this.isUserNameUpdated = true;
   log4j.debug("setting value of \"userName\" to: " + kvp.getValue());
   userSubType.setUserName(kvp.getValue());
   }
   else if (kvp.getKey().equals("password")) {
   log4j.debug("setting value of \"password\" to: " + kvp.getValue());
   userSubType.setPassword(kvp.getValue());
   }
   else if (kvp.getKey().equals("timestamp")) {
   log4j.debug("setting value of \"timestamp\" to: " + kvp.getValue());
   userSubType.setTimestamp(Long.parseLong(kvp.getValue()));
   }
   // Entered instantiatePEnumRef()
   if (kvp.getKey().equals("userRole")) {
   log4j.debug("setting value of \"userRole\" to: " + kvp.getValue());
   userSubType.setUserRole(UserRoleEnum.valueOf(kvp.getValue()));
   //this.userRole = UserRoleEnum.valueOf(kvp.getValue());
   }
   // Leaving instantiatePEnumRef()
   // Entered instantiatePEnumRef()
   else if (kvp.getKey().equals("userStatus")) {
   log4j.debug("setting value of \"userStatus\" to: " + kvp.getValue());
   userSubType.setUserStatus(UserStatusEnum.valueOf(kvp.getValue()));
   //this.userStatus = UserStatusEnum.valueOf(kvp.getValue());
   }
   // Leaving instantiatePEnumRef()
   // Entered instantiatePEnumRef()
   else if (kvp.getKey().equals("paymentStatus")) {
   log4j.debug("setting value of \"paymentStatus\" to: " + kvp.getValue());
   userSubType.setPaymentStatus(PaymentStatusEnum.valueOf(kvp.getValue()));
   //this.paymentStatus = PaymentStatusEnum.valueOf(kvp.getValue());
   }
   // Leaving instantiatePEnumRef()
   // Leaving instantiateSubTypeAttributes()

   }
}

log4j.debug("Leaving " + METHOD);
return userSubType;
}

/**
 * The validate method checks that a value was provided for all required 
 * attributes.
 *
 * @return The error message or null if no error occurred.
 */
protected String validate() {
final String METHOD = "validate()";
log4j.debug("Entered " + METHOD);

String result = null;

// Entered buildValidationMethod()
if (!this.isFirstNameUpdated) {
   String msg = "FirstName is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
}

if (!this.isLastNameUpdated) {
   String msg = "LastName is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isUserNameUpdated) {
   String msg = "UserName is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}


if (result != null) {
   log4j.debug("result: " + result);
}

log4j.debug("Leaving " + METHOD);
return result;
}
}
