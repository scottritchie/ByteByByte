/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInitializationFile()).
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializeRulePath class initializes an Element object with a RulePath object.
 */
public class InitializeRulePath {
private static Logger log4j = Logger.getLogger(InitializeRulePath.class);

private String theErrorMsg;
private RulePath rulePath;

public InitializeRulePath(RulePath rulePath) {
this.rulePath = rulePath;
}

/**
 * The initialize method returns an Element object initialized with data from a
 * RulePath object.
 * @param elementName The name of the element.
 * @return The element.
 * @throws MissingAttributeException
 */
protected Element initialize(String elementName) 
    throws MissingAttributeException {
final String METHOD = "initialize()";
log4j.debug("Entered " + METHOD);
Element element = null;

if (rulePath != null) {
log4j.debug("Creating new element: " + elementName);
element = new Element(elementName);

if (rulePath.getClassName() != null) {
   AbstractAttribute abstractAttribute = initializeClassName(rulePath.getClassName());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"className\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rulePath.getXrefClassName() != null) {
   AbstractAttribute abstractAttribute = initializeXrefClassName(rulePath.getXrefClassName());
   element.getAbstractAttributes().add(abstractAttribute);
}

if (rulePath.getId() != null) {
   AbstractAttribute abstractAttribute = initializeId(rulePath.getId());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"id\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rulePath.getCrossReference() != null) {
   AbstractAttribute abstractAttribute = initializeCrossReference(rulePath.getCrossReference());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"crossReference\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (rulePath.getMulti() != null) {
   AbstractAttribute abstractAttribute = initializeMulti(rulePath.getMulti());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"multi\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

}

log4j.debug("Leaving " + METHOD);
return element;
}

/*
 * This method initializes the className attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeClassName(String className)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (className != null) {
      log4j.debug("Creating new KeyValuePair: className");
      KeyValuePair kvp = new KeyValuePair("className", "<STRING_BEGIN>" + className + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"className\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the xrefClassName attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeXrefClassName(String xrefClassName)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (xrefClassName != null) {
      log4j.debug("Creating new KeyValuePair: xrefClassName");
      KeyValuePair kvp = new KeyValuePair("xrefClassName", "<STRING_BEGIN>" + xrefClassName + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the id attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeId(String id)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (id != null) {
      log4j.debug("Creating new KeyValuePair: id");
      KeyValuePair kvp = new KeyValuePair("id", "<STRING_BEGIN>" + id + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"id\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the crossReference attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeCrossReference(Boolean crossReference)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (crossReference != null) {
      log4j.debug("Creating new KeyValuePair: crossReference");
      KeyValuePair kvp = new KeyValuePair("crossReference", crossReference.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"crossReference\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the multi attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeMulti(Boolean multi)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (multi != null) {
      log4j.debug("Creating new KeyValuePair: multi");
      KeyValuePair kvp = new KeyValuePair("multi", multi.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"multi\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/**
* This method returns the error message or null if no error occurred.
*/
public String getErrorMsg() {
   return theErrorMsg;
}

private void setErrorMsg(String errorMsg) {
   theErrorMsg = errorMsg;
}


}
