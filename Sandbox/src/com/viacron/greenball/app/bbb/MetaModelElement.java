/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateClassFile()). 
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
/**
 * The MetaModelElement class is a SubType referenced by message objects defined
 * by the GreenballMessages grammar.
 */
public class MetaModelElement {
   private static final int ID = GreenballMessagesEnum.META_MODEL_ELEMENT.getId();

   /**
    * The number of bits required to represent the MetaModelElementEnum IDs.
    * # of attributes: 6
    * # of PEnumRefs: 0
    */
   private static final int ID_BITS = 3;

   private static GreenballMessagesDirectoryEntry[] theDirectory;
   private static final int DIRECTORY_OFFSET = 1;

   private static Logger log4j = Logger.getLogger(MetaModelElement.class);

   // Entered buildClassEnum()
   private enum MetaModelElementEnum {
      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      NAME(0, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      SUPER_TYPE(1, -1, 0, true),

      // sizeInBits: 8
      LABELED(2, 0, 0, false),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      VARIABLES(3, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      ATTRIBUTES(4, -1, 0, true),

      // This is a directory item. It's offset and length cannot be determined
      // until runtime.
      XREFS(5, -1, 0, true);

      private final int id;
      private final int offsetInBits;
      private int length;
      private boolean isDirectoryEntry;

      MetaModelElementEnum(int id, int offsetInBits, int length, boolean isDirectoryEntry) {
         this.id = id;
         this.offsetInBits = offsetInBits;
         this.length = length;
         this.isDirectoryEntry = isDirectoryEntry;
      }

      public int getId() {
         return this.id;
      }

      public int getOffsetInBits() {
         return this.offsetInBits;
      }

      public int getLength() {
         return this.length;
      }

      public void setLength(int length) {
         this.length = length;
      }
   } // Leaving buildClassEnum()

   /*
    * The instance variables.
    * See buildInstanceVariables() in JBitByBitGenerator.java.
    */
   private String name;
   private String superType;
   private boolean labeled;
   private List<Variable> variables;
   private List<Attribute> attributes;
   private List<CrossReference> xrefs;

   private String theErrorMsg;

   /**
    * The MetaModelElement no-arg constructor.
    */
   public MetaModelElement() {}

   /**
    * The MetaModelElement constructor.
    * See buildParameterAnnotations() in JBitByBitGenerator.java.
    *
    * @param name The name message attribute.
    * @param superType The superType message attribute.
    * @param labeled The labeled message attribute.
    * @param variables The variables message attribute.
    * @param attributes The attributes message attribute.
    * @param xrefs The xrefs message attribute.
    */
   public MetaModelElement(String name,
                           String superType,
                           Boolean labeled, List<Variable> variables, List<Attribute> attributes, List<CrossReference> xrefs) {
      // Entered buildParameterAssignments()
      this.setName(name);
      this.setSuperType(superType);
      this.setLabeled(labeled);
      this.setVariables(variables);
      this.setAttributes(attributes);
      this.setXrefs(xrefs);
      // Leaving buildParameterAssignments()
   }

   /**
    * The MetaModelElement copy constructor.
    */
   public MetaModelElement(MetaModelElement metaModelElement) {
      // Entered buildCopyConstructorParameterAssignments()
      this.setName(metaModelElement.getName());
      this.setSuperType(metaModelElement.getSuperType());
      this.setLabeled(metaModelElement.getLabeled());
      for(Variable tmpVariable : metaModelElement.getVariables()) {
         this.getVariables().add(new Variable(tmpVariable));
      }
      for(Attribute tmpAttribute : metaModelElement.getAttributes()) {
         this.getAttributes().add(new Attribute(tmpAttribute));
      }
      for(CrossReference tmpCrossReference : metaModelElement.getXrefs()) {
         this.getXrefs().add(new CrossReference(tmpCrossReference));
      }
      // Leaving buildCopyConstructorParameterAssignments()
   }

   // Entered buildSetErrorMsgMethod()
   private void setErrorMsg(String errorMsg) {
      theErrorMsg = errorMsg;
   }
   // Leaving buildSetErrorMsgMethod()

   // Entered buildGetErrorMsgMethod()
   /**
    * This method returns the error message or null if no error
    * occurred.
    */
   public String getErrorMsg() {
      return theErrorMsg;
   }
   // Leaving buildGetErrorMsgMethod()

   // Entered buildPackMethod()
   /**
    * This method packs a MetaModelElement object into a byte array. If a required attribute is not
    * provided an exception will be thrown.
    *
    * @return A byte array which represents a MetaModelElement message object.
    * @throws MissingAttributeException
    */
   public byte[] pack() throws MissingAttributeException {
      final String METHOD = "pack()";
      log4j.debug("Entered " + METHOD);

      int byteArraySize = getMetaModelElementSize();
      log4j.debug("byteArraySize: " + byteArraySize);
      byte[] bb = new byte[byteArraySize];

      /*
       * Convert object to byte array.
       */
      int offset = 0;

      if (this.getLabeled() != null) {
         log4j.debug(String.format("inserting %s at offset %d", "labeled", offset));
         bb = GreenballMessagesUtility.insertBitfield(bb, offset * 8, 1, this.getLabeled() == true ? 1 : 0);
         offset += 1;
      } else {
         /*
          * Missing required attribute, generate an error message and throw
          * an exception.
          */
         setErrorMsg("Error packing object. The attribute \"labeled\" is required, but no value was provided.");
         log4j.error(getErrorMsg());
         throw new MissingAttributeException(getErrorMsg());
      }


      MetaModelElementEnum.NAME.setLength(this.getName() != null ? this.getName().length() : 0);
      MetaModelElementEnum.SUPER_TYPE.setLength(this.getSuperType() != null ? this.getSuperType().length() : 0);
      MetaModelElementEnum.VARIABLES.setLength(this.getVariables().size());
      MetaModelElementEnum.ATTRIBUTES.setLength(this.getAttributes().size());
      MetaModelElementEnum.XREFS.setLength(this.getXrefs().size());

      int directorySize = getMetaModelElementDirectorySize();
      if (directorySize != 0) {
         // Create the directory
         theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
         for (int i = 0; i < directorySize; i++) {
            theDirectory[i] = new GreenballMessagesDirectoryEntry();
         }

         // Fill the directory
         int index = 0;
         offset = DIRECTORY_OFFSET
               + GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES
               * theDirectory.length;

         for (MetaModelElementEnum metaModelElementEnum : MetaModelElementEnum.values()) {
            if (metaModelElementEnum.isDirectoryEntry == true) {
               int id = metaModelElementEnum.getId();
               int length = metaModelElementEnum.getLength();

               theDirectory[index].setId(id);
               theDirectory[index].setLength(length);
               theDirectory[index].setOffset(offset);

               // Insert the data
               if (id == MetaModelElementEnum.NAME.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "name", offset));
                  if (getName() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getName());
                     offset += length * 1;
                  }
               }
               else if (id == MetaModelElementEnum.SUPER_TYPE.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "superType", offset));
                  if (getSuperType() != null) {
                     bb = GreenballMessagesUtility.insertString(bb, offset, getSuperType());
                     offset += length * 1;
                  }
               }
               else if (id == MetaModelElementEnum.VARIABLES.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "variables", offset));
                  for (Variable variable : this.variables) {
                     byte[] bytes = variable.pack();
                     bb = GreenballMessagesUtility.insertBytes(bb, offset, bytes);

                     theDirectory[index].setId(id);
                     theDirectory[index].setLength(bytes.length);
                     theDirectory[index].setOffset(offset);

                     offset += bytes.length;
                     index++;
                  }
               }
               else if (id == MetaModelElementEnum.ATTRIBUTES.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "attributes", offset));
                  for (Attribute attribute : this.attributes) {
                     byte[] bytes = attribute.pack();
                     bb = GreenballMessagesUtility.insertBytes(bb, offset, bytes);

                     theDirectory[index].setId(id);
                     theDirectory[index].setLength(bytes.length);
                     theDirectory[index].setOffset(offset);

                     offset += bytes.length;
                     index++;
                  }
               }
               else if (id == MetaModelElementEnum.XREFS.getId()) {
                  log4j.debug(String.format("inserting %s at offset %d", "xrefs", offset));
                  for (CrossReference crossReference : this.xrefs) {
                     byte[] bytes = crossReference.pack();
                     bb = GreenballMessagesUtility.insertBytes(bb, offset, bytes);

                     theDirectory[index].setId(id);
                     theDirectory[index].setLength(bytes.length);
                     theDirectory[index].setOffset(offset);

                     offset += bytes.length;
                     index++;
                  }
               }
               index++;
            }
         }

         // Insert the directory
         log4j.debug(String.format("inserting the directory at offset %d", DIRECTORY_OFFSET));
         offset = DIRECTORY_OFFSET;
         index = 0;
         for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
            log4j.debug(String.format("index[%d]: ", index));
            log4j.debug(String.format("  ID:     %d", directoryEntry.getId()));
            log4j.debug(String.format("  length: %d", directoryEntry.getLength()));
            log4j.debug(String.format("  offset: %d", directoryEntry.getOffset()));
            bb = GreenballMessagesUtility.insertInteger(bb, offset, directoryEntry.getId());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 4, directoryEntry.getLength());
            bb = GreenballMessagesUtility.insertInteger(bb, offset + 8, directoryEntry.getOffset());

            offset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
            index++;
         }

      }
      log4j.debug("Leaving " + METHOD);
      return bb;
   }
   // Leaving buildPackMethod()

   // Entered buildUnpackMethod()
   /**
    * This method unpacks a byte array containing a MetaModelElement object.
    *
    * @return The byte array as a MetaModelElement message object.
    */
   public MetaModelElement unpack(byte[] ba) {
      final String METHOD = "unpack()";
      log4j.debug("Entered " + METHOD);

      MetaModelElement metaModelElement = new MetaModelElement();

      metaModelElement.setLabeled(GreenballMessagesUtility.getBoolean(ba, MetaModelElementEnum.LABELED.getOffsetInBits()));

      // Get the directory
      int directorySize = getMetaModelElementDirectorySize();
      theDirectory = new GreenballMessagesDirectoryEntry[directorySize];
      int dirOffset = DIRECTORY_OFFSET;

      for (int entry = 0 ; entry < directorySize; entry++) {
         GreenballMessagesDirectoryEntry directoryEntry = new GreenballMessagesDirectoryEntry();

         int id = GreenballMessagesUtility.getInteger(ba, dirOffset * 8);
         directoryEntry.setId(id);
         int length = GreenballMessagesUtility.getInteger(ba, (dirOffset + 4) * 8);
         directoryEntry.setLength(length);
         int offset = GreenballMessagesUtility.getInteger(ba, (dirOffset + 8) * 8);
         directoryEntry.setOffset(offset);

         theDirectory[entry] = directoryEntry;

         dirOffset += GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      }

      for (GreenballMessagesDirectoryEntry directoryEntry : theDirectory) {
         int id = directoryEntry.getId();
         int offset = directoryEntry.getOffset();
         int length = directoryEntry.getLength();

         if (id == MetaModelElementEnum.NAME.getId()) {
            metaModelElement.setName(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == MetaModelElementEnum.SUPER_TYPE.getId()) {
            metaModelElement.setSuperType(GreenballMessagesUtility.getString(ba, offset, length));
         }
         else if (id == MetaModelElementEnum.VARIABLES.getId()) {
            byte[] bytes = new byte[length];
            for (int index = 0; index < length; index++) {
               bytes[index] = GreenballMessagesUtility.getByte(ba, (offset + index) * 8);
            }
            metaModelElement.getVariables().add(new Variable().unpack(bytes));
         }
         else if (id == MetaModelElementEnum.ATTRIBUTES.getId()) {
            byte[] bytes = new byte[length];
            for (int index = 0; index < length; index++) {
               bytes[index] = GreenballMessagesUtility.getByte(ba, (offset + index) * 8);
            }
            metaModelElement.getAttributes().add(new Attribute().unpack(bytes));
         }
         else if (id == MetaModelElementEnum.XREFS.getId()) {
            byte[] bytes = new byte[length];
            for (int index = 0; index < length; index++) {
               bytes[index] = GreenballMessagesUtility.getByte(ba, (offset + index) * 8);
            }
            metaModelElement.getXrefs().add(new CrossReference().unpack(bytes));
         }
      }

      log4j.debug("Leaving " + METHOD);
      return metaModelElement;
   }
   // Leaving buildUnpackMethod()

   /**
    * This method sets the name attribute. Setting of this value is required.
    * @param name The name attribute.
    */
   public void setName(String name) {
      this.name = name;
   }

   /**
    * This method sets the superType attribute. Setting of this value is required.
    * @param superType The superType attribute.
    */
   public void setSuperType(String superType) {
      this.superType = superType;
   }

   /**
    * This method sets the labeled attribute. Setting of this value is required.
    * @param labeled The labeled attribute.
    */
   public void setLabeled(Boolean labeled) {
      this.labeled = labeled;
   }

   /**
    * This method gets the name attribute. The name attribute is a required attribute.
    */
   public String getName() {
      return this.name;
   }

   /**
    * This method gets the superType attribute. The superType attribute is a required attribute.
    */
   public String getSuperType() {
      return this.superType;
   }

   /**
    * This method gets the labeled attribute. The labeled attribute is a required attribute.
    */
   public Boolean getLabeled() {
      return this.labeled;
   }

   /**
    * This method sets the variables attribute. Setting of this value is required.
    * @param variables The variables.
    */
   public void setVariables(List<Variable> variables) {
      this.variables = variables;
   }

   /**
    * This method sets the attributes attribute. Setting of this value is required.
    * @param attributes The attributes.
    */
   public void setAttributes(List<Attribute> attributes) {
      this.attributes = attributes;
   }

   /**
    * This method sets the xrefs attribute. Setting of this value is required.
    * @param xrefs The xrefs.
    */
   public void setXrefs(List<CrossReference> xrefs) {
      this.xrefs = xrefs;
   }

   /**
    * This method gets the variables attribute. The variables attribute is a required attribute.
    */
   public List<Variable> getVariables() {
      if (this.variables == null) {
         this.variables = new ArrayList<Variable>();
      }
      return this.variables;
   }

   /**
    * This method gets the attributes attribute. The attributes attribute is a required attribute.
    */
   public List<Attribute> getAttributes() {
      if (this.attributes == null) {
         this.attributes = new ArrayList<Attribute>();
      }
      return this.attributes;
   }

   /**
    * This method gets the xrefs attribute. The xrefs attribute is a required attribute.
    */
   public List<CrossReference> getXrefs() {
      if (this.xrefs == null) {
         this.xrefs = new ArrayList<CrossReference>();
      }
      return this.xrefs;
   }

   /**
    * This method gets the size of the directory.
    */
   private int getMetaModelElementDirectorySize() {
      int directorySize = 0;

      // name
      directorySize++;
      // superType
      directorySize++;
      // variables
      directorySize += getVariables().size();
      // attributes
      directorySize += getAttributes().size();
      // xrefs
      directorySize += getXrefs().size();

      return directorySize;
   }


   /**
    * This method gets the size of the MetaModelElement object.
    * @return The size in bytes.
    */
   public int getMetaModelElementSize() {
      int size = 0;

      int directorySize = getMetaModelElementDirectorySize();
      size += directorySize * GreenballMessagesDirectoryEntry.DIRECTORY_ENTRY_SIZE_IN_BYTES;
      // Add size of name
      size += (getName() != null ? getName().length() : 0);
      // Add size of superType
      size += (getSuperType() != null ? getSuperType().length() : 0);
      // Add size of labeled
      size += 1;
      // Add size of variables
      for (Variable variable: getVariables()) {
         size += variable.getVariableSize();
      }
      // Add size of attributes
      for (Attribute attribute: getAttributes()) {
         size += attribute.getAttributeSize();
      }
      // Add size of xrefs
      for (CrossReference crossReference: getXrefs()) {
         size += crossReference.getCrossReferenceSize();
      }

      return size;
   }

   @Override
   public String toString() {
      StringBuilder result = new StringBuilder();
      String NEW_LINE = System.getProperty("line.separator");

      result.append(this.getClass().getSimpleName() + " Object {" + NEW_LINE);
      result.append(" name: " + name + NEW_LINE);
      result.append(" superType: " + superType + NEW_LINE);
      result.append(" labeled: " + labeled + NEW_LINE);

      if (variables != null) {
         for (Variable variablesVariable : variables) {
            result.append(variablesVariable.toString());
         }
      }

      if (attributes != null) {
         for (Attribute attributesAttribute : attributes) {
            result.append(attributesAttribute.toString());
         }
      }

      if (xrefs != null) {
         for (CrossReference xrefsCrossReference : xrefs) {
            result.append(xrefsCrossReference.toString());
         }
      }

      result.append("} ");

      return result.toString();
   }

   /**
    * The hashCode method returns this object's hashCode.
    */
   @Override
   public int hashCode() {
      final int prime = 31;
      int result = 1;
      result = prime * result
         + ((String) name).hashCode();
      result = prime * result
         + ((String) superType).hashCode();
      result = prime * result
         + ((Boolean) labeled).hashCode();
      return result;
   }

   /**
    * The equals method checks for equality. 
    */
   public boolean equals(Object obj) {
      if (obj == this) return true;
      if (obj == null) return false;
      if (getClass() != obj.getClass()) return false;

      MetaModelElement metaModelElement = (MetaModelElement) obj;
      if (!metaModelElement.getName().equals(this.getName())) {
         return false;
      }

      if (!metaModelElement.getSuperType().equals(this.getSuperType())) {
         return false;
      }

      if (metaModelElement.getLabeled() != this.getLabeled()) {
         return false;
      }

      return true;
   }
}
