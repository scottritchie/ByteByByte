/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInstantiationFile()).
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

public class InstantiateMetaModelElement {
private static Logger log4j = Logger.getLogger(InstantiateMetaModelElement.class);

private Element element;
private MetaModelElement metaModelElement;

/*
 * The isUpdated flags. If an attribute is required by the grammar then a value
 * must be provided, and the isUpdated flag will be set when the value is
 * obtained during unpacking. After the object is constructed during unpacking, 
 * validation will be performed to make sure a value was provided for all attributes
 * that are not optional. 
 * See buildFlags() in JBitByBitGenerator.java.
 */
private boolean isNameUpdated = false;
private boolean isSuperTypeUpdated = false;
private boolean isLabeledUpdated = false;
private boolean isVariablesUpdated = false;
private boolean isAttributesUpdated = false;
private boolean isXrefsUpdated = false;

/**
 * This method constructs a InstantiateMetaModelElement object based on an Element
 * object.
 * 
 * @param element
 *            The Element.
 */
public InstantiateMetaModelElement(Element element) {
this.element = element;
this.metaModelElement = new MetaModelElement();
}

/**
 * The instantiate method instantiates a MetaModelElement object.
 * 
 * @return The MetaModelElement.
 */
protected MetaModelElement instantiate() {
final String METHOD = "instantiate()";
log4j.debug("Entered " + METHOD);

log4j.debug("element: " + element.getName());

for (AbstractAttribute abstractAttribute : element.getAbstractAttributes()) {
      // Entered instantiateSubTypeElements()
   for (Element e : abstractAttribute.getElements()) {
      if (e.getName().startsWith("variables[")) {
         this.isVariablesUpdated = true;
         log4j.debug("found element: variables");
         if (metaModelElement.getVariables() == null) {
         List<Variable> variables = new ArrayList<Variable>();
         metaModelElement.setVariables(variables);
         }

         InstantiateVariable instantiateVariable =
                  new InstantiateVariable(e);
         Variable variable =
                  instantiateVariable.instantiate();
         metaModelElement.getVariables().add(variable);
      }
      else if (e.getName().startsWith("attributes[")) {
         this.isAttributesUpdated = true;
         log4j.debug("found element: attributes");
         if (metaModelElement.getAttributes() == null) {
         List<Attribute> attributes = new ArrayList<Attribute>();
         metaModelElement.setAttributes(attributes);
         }

         InstantiateAttribute instantiateAttribute =
                  new InstantiateAttribute(e);
         Attribute attribute =
                  instantiateAttribute.instantiate();
         metaModelElement.getAttributes().add(attribute);
      }
      else if (e.getName().startsWith("xrefs[")) {
         this.isXrefsUpdated = true;
         log4j.debug("found element: xrefs");
         if (metaModelElement.getXrefs() == null) {
         List<CrossReference> xrefs = new ArrayList<CrossReference>();
         metaModelElement.setXrefs(xrefs);
         }

         InstantiateCrossReference instantiateCrossReference =
                  new InstantiateCrossReference(e);
         CrossReference crossReference =
                  instantiateCrossReference.instantiate();
         metaModelElement.getXrefs().add(crossReference);
      }
   }
   // Leaving instantiateSubTypeElements()


   for (KeyValuePair kvp : abstractAttribute.getKeyValuePairs()) {
         // Entered instantiateSubTypeAttributes()
   if (kvp.getKey().equals("name")) {
    this.isNameUpdated = true;
   log4j.debug("setting value of \"name\" to: " + kvp.getValue());
   metaModelElement.setName(kvp.getValue());
   }
   else if (kvp.getKey().equals("superType")) {
    this.isSuperTypeUpdated = true;
   log4j.debug("setting value of \"superType\" to: " + kvp.getValue());
   metaModelElement.setSuperType(kvp.getValue());
   }
   else if (kvp.getKey().equals("labeled")) {
    this.isLabeledUpdated = true;
   log4j.debug("setting value of \"labeled\" to: " + kvp.getValue());
   metaModelElement.setLabeled(kvp.getValue().equals("true"));
   }
   // Leaving instantiateSubTypeAttributes()

   }
}

log4j.debug("Leaving " + METHOD);
return metaModelElement;
}

/**
 * The validate method checks that a value was provided for all required 
 * attributes.
 *
 * @return The error message or null if no error occurred.
 */
protected String validate() {
final String METHOD = "validate()";
log4j.debug("Entered " + METHOD);

String result = null;

// Entered buildValidationMethod()
if (!this.isNameUpdated) {
   String msg = "Name is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
}

if (!this.isSuperTypeUpdated) {
   String msg = "SuperType is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isLabeledUpdated) {
   String msg = "Labeled is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isVariablesUpdated) {
   String msg = "Variables is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isAttributesUpdated) {
   String msg = "Attributes is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}

if (!this.isXrefsUpdated) {
   String msg = "Xrefs is required, but no value was provided.";
   if (result == null) {
      result = msg;
   }
   else {
      result = result.concat("\n" + msg);
   }
}


if (result != null) {
   log4j.debug("result: " + result);
}

log4j.debug("Leaving " + METHOD);
return result;
}
}
