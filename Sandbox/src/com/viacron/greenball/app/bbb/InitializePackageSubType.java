/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInitializationFile()).
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializePackageSubType class initializes an Element object with a PackageSubType object.
 */
public class InitializePackageSubType {
private static Logger log4j = Logger.getLogger(InitializePackageSubType.class);

private String theErrorMsg;
private PackageSubType packageSubType;

public InitializePackageSubType(PackageSubType packageSubType) {
this.packageSubType = packageSubType;
}

/**
 * The initialize method returns an Element object initialized with data from a
 * PackageSubType object.
 * @param elementName The name of the element.
 * @return The element.
 * @throws MissingAttributeException
 */
protected Element initialize(String elementName) 
    throws MissingAttributeException {
final String METHOD = "initialize()";
log4j.debug("Entered " + METHOD);
Element element = null;

if (packageSubType != null) {
log4j.debug("Creating new element: " + elementName);
element = new Element(elementName);

if (packageSubType.getName() != null) {
   AbstractAttribute abstractAttribute = initializeName(packageSubType.getName());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"name\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (packageSubType.getDataType() != null) {
   AbstractAttribute abstractAttribute = initializeDataType(packageSubType.getDataType());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"dataType\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (packageSubType.getImprt() != null) {
   AbstractAttribute abstractAttribute = initializeImprt(packageSubType.getImprt());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"imprt\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (packageSubType.getElement() != null) {
   AbstractAttribute abstractAttribute = initializeElement(packageSubType.getElement());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"element\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

}

log4j.debug("Leaving " + METHOD);
return element;
}

/*
 * This method initializes the name attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeName(String name)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (name != null) {
      log4j.debug("Creating new KeyValuePair: name");
      KeyValuePair kvp = new KeyValuePair("name", "<STRING_BEGIN>" + name + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"name\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the dataType attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeDataType(List<Datatype> dataTypeList)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   if (dataTypeList != null) {
      int indexDataType = 0;
      for (Datatype dataType : dataTypeList) {
         InitializeDatatype initializeDatatype = new InitializeDatatype(dataType);
         Element dataTypeElement = initializeDatatype.initialize("dataType[" + indexDataType + "]");
         abstractAttribute.getElements().add(dataTypeElement);
         indexDataType++;
      }
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"dataType\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }
   return abstractAttribute;
}

/*
 * This method initializes the imprt attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeImprt(List<ImportSubType> imprtList)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   if (imprtList != null) {
      int indexImprt = 0;
      for (ImportSubType imprt : imprtList) {
         InitializeImportSubType initializeImportSubType = new InitializeImportSubType(imprt);
         Element imprtElement = initializeImportSubType.initialize("imprt[" + indexImprt + "]");
         abstractAttribute.getElements().add(imprtElement);
         indexImprt++;
      }
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"imprt\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }
   return abstractAttribute;
}

/*
 * This method initializes the element attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeElement(List<MetaModelElement> elementList)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   if (elementList != null) {
      int indexElement = 0;
      for (MetaModelElement element : elementList) {
         InitializeMetaModelElement initializeMetaModelElement = new InitializeMetaModelElement(element);
         Element elementElement = initializeMetaModelElement.initialize("element[" + indexElement + "]");
         abstractAttribute.getElements().add(elementElement);
         indexElement++;
      }
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"element\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }
   return abstractAttribute;
}

/**
* This method returns the error message or null if no error occurred.
*/
public String getErrorMsg() {
   return theErrorMsg;
}

private void setErrorMsg(String errorMsg) {
   theErrorMsg = errorMsg;
}


}
