/*
 * WARNING: This file was generated by BitByBitGenerator.xtend (see
 * generateSubTypeInitializationFile()).
 * Do not edit.
 */
package com.viacron.greenball.app.bbb;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.viacron.utils.StringMessageBuffer.parser.AbstractAttribute;
import com.viacron.utils.StringMessageBuffer.parser.Element;
import com.viacron.utils.StringMessageBuffer.parser.KeyValuePair;

/**
 * The InitializeTreeNodeType class initializes an Element object with a TreeNodeType object.
 */
public class InitializeTreeNodeType {
private static Logger log4j = Logger.getLogger(InitializeTreeNodeType.class);

private String theErrorMsg;
private TreeNodeType treeNodeType;

public InitializeTreeNodeType(TreeNodeType treeNodeType) {
this.treeNodeType = treeNodeType;
}

/**
 * The initialize method returns an Element object initialized with data from a
 * TreeNodeType object.
 * @param elementName The name of the element.
 * @return The element.
 * @throws MissingAttributeException
 */
protected Element initialize(String elementName) 
    throws MissingAttributeException {
final String METHOD = "initialize()";
log4j.debug("Entered " + METHOD);
Element element = null;

if (treeNodeType != null) {
log4j.debug("Creating new element: " + elementName);
element = new Element(elementName);

// Recursive attribute detected

// Recursive list detected
if (treeNodeType.getChildren() != null) {
   int childrenIndex = 0;
   for (TreeNodeType treeNodeTypeChildren : treeNodeType.getChildren()) {
      InitializeTreeNodeType initializeTreeNodeType = new InitializeTreeNodeType(
            treeNodeTypeChildren);
      Element aTreeNodeTypeElement = initializeTreeNodeType
            .initialize("children[" + childrenIndex + "]");
      AbstractAttribute aAbstractAttribute = new AbstractAttribute();
      aAbstractAttribute.getElements().add(aTreeNodeTypeElement);
      element.getAbstractAttributes().add(aAbstractAttribute);
      childrenIndex++;
   }
}

if (treeNodeType.getPrefix() != null) {
   AbstractAttribute abstractAttribute = initializePrefix(treeNodeType.getPrefix());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"prefix\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (treeNodeType.getLabel() != null) {
   AbstractAttribute abstractAttribute = initializeLabel(treeNodeType.getLabel());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"label\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (treeNodeType.getFieldName() != null) {
   AbstractAttribute abstractAttribute = initializeFieldName(treeNodeType.getFieldName());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"fieldName\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (treeNodeType.getClassName() != null) {
   AbstractAttribute abstractAttribute = initializeClassName(treeNodeType.getClassName());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"className\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (treeNodeType.getSource() != null) {
   AbstractAttribute abstractAttribute = initializeSource(treeNodeType.getSource());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"source\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (treeNodeType.getCrosslink() != null) {
   AbstractAttribute abstractAttribute = initializeCrosslink(treeNodeType.getCrosslink());
   element.getAbstractAttributes().add(abstractAttribute);
}

if (treeNodeType.getUsageCounter() != null) {
   AbstractAttribute abstractAttribute = initializeUsageCounter(treeNodeType.getUsageCounter());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"usageCounter\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (treeNodeType.getLevel() != null) {
   AbstractAttribute abstractAttribute = initializeLevel(treeNodeType.getLevel());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"level\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (treeNodeType.getNodeState() != null) {
   AbstractAttribute abstractAttribute = initializeNodeState(treeNodeType.getNodeState());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"nodeState\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (treeNodeType.getSn() != null) {
   AbstractAttribute abstractAttribute = initializeSn(treeNodeType.getSn());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"sn\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (treeNodeType.getXref() != null) {
   AbstractAttribute abstractAttribute = initializeXref(treeNodeType.getXref());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"xref\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (treeNodeType.getRuleIds() != null) {
   AbstractAttribute abstractAttribute = initializeRuleIds(treeNodeType.getRuleIds());
   element.getAbstractAttributes().add(abstractAttribute);
}

if (treeNodeType.getCrossReference() != null) {
   AbstractAttribute abstractAttribute = initializeCrossReference(treeNodeType.getCrossReference());
   element.getAbstractAttributes().add(abstractAttribute);
}

if (treeNodeType.getMulti() != null) {
   AbstractAttribute abstractAttribute = initializeMulti(treeNodeType.getMulti());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"multi\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (treeNodeType.getLabelable() != null) {
   AbstractAttribute abstractAttribute = initializeLabelable(treeNodeType.getLabelable());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"labelable\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (treeNodeType.getExpanded() != null) {
   AbstractAttribute abstractAttribute = initializeExpanded(treeNodeType.getExpanded());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"expanded\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (treeNodeType.getId() != null) {
   AbstractAttribute abstractAttribute = initializeId(treeNodeType.getId());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"id\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

if (treeNodeType.getParentId() != null) {
   AbstractAttribute abstractAttribute = initializeParentId(treeNodeType.getParentId());
   element.getAbstractAttributes().add(abstractAttribute);
} else {
   // Missing required attribute, generate an error message and throw an exception
   setErrorMsg("Error packing object. The attribute \"parentId\" is required, but no value was provided.");
   log4j.error(getErrorMsg());
   throw new MissingAttributeException(getErrorMsg());
}

}

log4j.debug("Leaving " + METHOD);
return element;
}

/*
 * This method initializes the parent attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeParent(TreeNodeType parent)
             throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   if (parent != null) {
      InitializeTreeNodeType initializeTreeNodeType = new InitializeTreeNodeType(parent);
      Element parentElement = initializeTreeNodeType.initialize("parent");
      abstractAttribute.getElements().add(parentElement);
   }
   return abstractAttribute;
}


/*
 * This method initializes the prefix attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializePrefix(String prefix)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (prefix != null) {
      log4j.debug("Creating new KeyValuePair: prefix");
      KeyValuePair kvp = new KeyValuePair("prefix", "<STRING_BEGIN>" + prefix + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"prefix\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the label attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeLabel(String label)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (label != null) {
      log4j.debug("Creating new KeyValuePair: label");
      KeyValuePair kvp = new KeyValuePair("label", "<STRING_BEGIN>" + label + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"label\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the fieldName attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeFieldName(String fieldName)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (fieldName != null) {
      log4j.debug("Creating new KeyValuePair: fieldName");
      KeyValuePair kvp = new KeyValuePair("fieldName", "<STRING_BEGIN>" + fieldName + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"fieldName\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the className attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeClassName(String className)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (className != null) {
      log4j.debug("Creating new KeyValuePair: className");
      KeyValuePair kvp = new KeyValuePair("className", "<STRING_BEGIN>" + className + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"className\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the source attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeSource(String source)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (source != null) {
      log4j.debug("Creating new KeyValuePair: source");
      KeyValuePair kvp = new KeyValuePair("source", "<STRING_BEGIN>" + source + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"source\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the crosslink attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeCrosslink(String crosslink)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (crosslink != null) {
      log4j.debug("Creating new KeyValuePair: crosslink");
      KeyValuePair kvp = new KeyValuePair("crosslink", "<STRING_BEGIN>" + crosslink + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the usageCounter attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeUsageCounter(Integer usageCounter)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (usageCounter != null) {
      log4j.debug("Creating new KeyValuePair: usageCounter");
      KeyValuePair kvp = new KeyValuePair("usageCounter", Integer.toString(usageCounter));
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"usageCounter\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the level attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeLevel(Integer level)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (level != null) {
      log4j.debug("Creating new KeyValuePair: level");
      KeyValuePair kvp = new KeyValuePair("level", Integer.toString(level));
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"level\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the nodeState attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeNodeState(Integer nodeState)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (nodeState != null) {
      log4j.debug("Creating new KeyValuePair: nodeState");
      KeyValuePair kvp = new KeyValuePair("nodeState", Integer.toString(nodeState));
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"nodeState\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the sn attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeSn(Long sn)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (sn != null) {
      log4j.debug("Creating new KeyValuePair: sn");
      KeyValuePair kvp = new KeyValuePair("sn", Long.toString(sn));
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"sn\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the xref attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeXref(Boolean xref)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (xref != null) {
      log4j.debug("Creating new KeyValuePair: xref");
      KeyValuePair kvp = new KeyValuePair("xref", xref.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"xref\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the ruleIds attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeRuleIds(List<String> ruleIdsList)
        throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   int ruleIdsIndex = 0;
   for (String ruleIds : ruleIdsList) {
      // Entered initAttributeValue()
      if (ruleIds != null) {
         log4j.debug("Creating new KeyValuePair: ruleIds[" + ruleIdsIndex + "]");
         KeyValuePair kvp = new KeyValuePair("ruleIds[" + ruleIdsIndex + "]", "<STRING_BEGIN>" + ruleIds + "<STRING_END>");
         abstractAttribute.getKeyValuePairs().add(kvp);
      }

      // Leaving initAttributeValue()
      ruleIdsIndex++;
   }
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the crossReference attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeCrossReference(String crossReference)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (crossReference != null) {
      log4j.debug("Creating new KeyValuePair: crossReference");
      KeyValuePair kvp = new KeyValuePair("crossReference", "<STRING_BEGIN>" + crossReference + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the multi attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeMulti(Boolean multi)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (multi != null) {
      log4j.debug("Creating new KeyValuePair: multi");
      KeyValuePair kvp = new KeyValuePair("multi", multi.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"multi\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the labelable attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeLabelable(Boolean labelable)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (labelable != null) {
      log4j.debug("Creating new KeyValuePair: labelable");
      KeyValuePair kvp = new KeyValuePair("labelable", labelable.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"labelable\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the expanded attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeExpanded(Boolean expanded)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (expanded != null) {
      log4j.debug("Creating new KeyValuePair: expanded");
      KeyValuePair kvp = new KeyValuePair("expanded", expanded.toString());
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"expanded\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the id attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeId(String id)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (id != null) {
      log4j.debug("Creating new KeyValuePair: id");
      KeyValuePair kvp = new KeyValuePair("id", "<STRING_BEGIN>" + id + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"id\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/*
 * This method initializes the parentId attribute.
 * Generated by initAttributeMethods()
 */
private AbstractAttribute initializeParentId(String parentId)
         throws MissingAttributeException {
   AbstractAttribute abstractAttribute = new AbstractAttribute();
   // Entered initAbstractAttributeValue()
   // Entered initAttributeValue()
   if (parentId != null) {
      log4j.debug("Creating new KeyValuePair: parentId");
      KeyValuePair kvp = new KeyValuePair("parentId", "<STRING_BEGIN>" + parentId + "<STRING_END>");
      abstractAttribute.getKeyValuePairs().add(kvp);
   }
   else {
      // Missing required attribute, generate an error message and throw an exception
      setErrorMsg("Error packing object. The attribute \"parentId\" is required, but no value was provided.");
      log4j.error(getErrorMsg());
      throw new MissingAttributeException(getErrorMsg());
   }

   // Leaving initAttributeValue()
   // Leaving initAbstractAttributeValue()
   return abstractAttribute;
}

/**
* This method returns the error message or null if no error occurred.
*/
public String getErrorMsg() {
   return theErrorMsg;
}

private void setErrorMsg(String errorMsg) {
   theErrorMsg = errorMsg;
}


}
